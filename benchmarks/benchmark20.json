{
  "source": {
    "relations": [
      "addresses(int addresses.id, String addresses.first_name, String addresses.last_name, String addresses.day_phone, String addresses.evening_phone, String addresses.address_line_1, String addresses.address_line_2, String addresses.city, String addresses.state, String addresses.zip, String addresses.created_at, String addresses.updated_at, String addresses.address_name, int addresses.user_id, String addresses.country, String addresses.status, String addresses.comment, String addresses.fedex_validation_status)",
      "boxes(int boxes.id, int boxes.assigned_to_user_id, String boxes.created_at, String boxes.updated_at, int boxes.ordering_order_line_id, String boxes.status, String boxes.box_type, String boxes.description, String boxes.inventorying_status, int boxes.inventorying_order_line_id, String boxes.received_at, String boxes.height, String boxes.width, String boxes.length, String boxes.weight, int boxes.box_num, String boxes.return_requested_at, String boxes.location, String boxes.inventoried_at, int boxes.created_by_id)",
      "boxes_subscriptions(int boxes_subscriptions.id, int boxes_subscriptions.box_id, int boxes_subscriptions.subscription_id)",
      "cart_items(int cart_items.id, int cart_items.quantity, int cart_items.cart_id, int cart_items.product_id, String cart_items.created_at, String cart_items.updated_at, int cart_items.committed_months, int cart_items.box_id, int cart_items.address_id, int cart_items.stored_item_id)",
      "carts(int carts.id, int carts.user_id, String carts.created_at, String carts.updated_at, String carts.ordered_at, String carts.status, String carts.quoted_shipping_cost, String carts.quoted_shipping_cost_success)",
      "charges(int charges.id, int charges.user_id, String charges.total_in_cents, int charges.product_id, String charges.created_at, String charges.updated_at, int charges.order_id, int charges.shipment_id, String charges.comments, int charges.created_by_admin_id)",
      "credits(int credits.id, String credits.amount, int credits.user_id, String credits.created_at, String credits.updated_at, String credits.description, int credits.created_by_admin_id)",
      "furniture_items_subscriptions(int furniture_items_subscriptions.id, int furniture_items_subscriptions.furniture_item_id, int furniture_items_subscriptions.subscription_id)",
      "interested_people(int interested_people.id, String interested_people.email, String interested_people.created_at, String interested_people.updated_at)",
      "invoices(int invoices.id, int invoices.user_id, int invoices.payment_transaction_id, int invoices.order_id, String invoices.created_at, String invoices.updated_at)",
      "marketing_hits(int marketing_hits.id, String marketing_hits.source, String marketing_hits.created_at, String marketing_hits.updated_at)",
      "order_lines(int order_lines.id, int order_lines.order_id, int order_lines.product_id, int order_lines.quantity, String order_lines.status, String order_lines.created_at, String order_lines.updated_at, int order_lines.committed_months, int order_lines.shipping_address_id, int order_lines.service_box_id, int order_lines.shipment_id, int order_lines.service_item_id, int order_lines.item_mail_shipping_charge_id, String order_lines.amount_paid_at_purchase)",
      "orders(int orders.id, int orders.cart_id, String orders.ip_address, int orders.user_id, String orders.created_at, String orders.updated_at, String orders.initial_charged_shipping_cost)",
      "payment_profiles(int payment_profiles.id, String payment_profiles.identifier, String payment_profiles.last_four_digits, int payment_profiles.user_id, String payment_profiles.created_at, String payment_profiles.updated_at, int payment_profiles.year, String payment_profiles.first_name, String payment_profiles.last_name, int payment_profiles.billing_address_id, String payment_profiles.cc_type, String payment_profiles.month, String payment_profiles.active)",
      "payment_transactions(int payment_transactions.id, int payment_transactions.order_id, String payment_transactions.action, String payment_transactions.authorization, String payment_transactions.message, String payment_transactions.params, int payment_transactions.user_id, String payment_transactions.created_at, String payment_transactions.updated_at, int payment_transactions.payment_profile_id, String payment_transactions.status, int payment_transactions.storage_payment_processing_record_id, String payment_transactions.auth_transaction_id, int payment_transactions.credit_id, String payment_transactions.submitted_amount)",
      "photos(int photos.id, int photos.stored_item_id, String photos.created_at, String photos.updated_at, String photos.data_file_name, String photos.data_content_type, int photos.data_file_size, String photos.data_updated_at)",
      "products(int products.id, String products.name, String products.price, String products.created_at, String products.updated_at, String products.price_comment, String products.first_due, String products.discountable)",
      "rental_agreement_versions(int rental_agreement_versions.id, String rental_agreement_versions.agreement_text, String rental_agreement_versions.created_at, String rental_agreement_versions.updated_at)",
      "rental_agreement_versions_users(int rental_agreement_versions_users.id, int rental_agreement_versions_users.user_id, int rental_agreement_versions_users.rental_agreement_version_id, String rental_agreement_versions_users.created_at, String rental_agreement_versions_users.updated_at)",
      "shipments(int shipments.id, int shipments.box_id, int shipments.from_address_id, int shipments.to_address_id, String shipments.tracking_number, String shipments.created_at, String shipments.updated_at, String shipments.shipment_label_file_name, String shipments.shipment_label_updated_at, String shipments.state, String shipments.payor, String shipments.charge_requested)",
      "storage_charge_processing_records(int storage_charge_processing_records.id, int storage_charge_processing_records.generated_by_user_id, String storage_charge_processing_records.as_of_date, String storage_charge_processing_records.created_at, String storage_charge_processing_records.updated_at, String storage_charge_processing_records.locked_for_editing)",
      "storage_charges(int storage_charges.id, int storage_charges.box_id, int storage_charges.charge_id, String storage_charges.start_date, String storage_charges.end_date, int storage_charges.storage_charge_processing_record_id)",
      "storage_payment_processing_records(int storage_payment_processing_records.id, int storage_payment_processing_records.generated_by_user_id, String storage_payment_processing_records.as_of_date, String storage_payment_processing_records.created_at, String storage_payment_processing_records.updated_at)",
      "stored_item_photos(int stored_item_photos.id, String stored_item_photos.photo_file_name, String stored_item_photos.photo_content_type, int stored_item_photos.photo_file_size, String stored_item_photos.photo_updated_at, String stored_item_photos.access_token, String stored_item_photos.stored_item_id, String stored_item_photos.created_at, String stored_item_photos.updated_at)",
      "stored_item_tags(int stored_item_tags.id, int stored_item_tags.stored_item_id, String stored_item_tags.tag, String stored_item_tags.created_at, String stored_item_tags.updated_at)",
      "stored_items(int stored_items.id, int stored_items.box_id, String stored_items.created_at, String stored_items.updated_at, String stored_items.status, String stored_items.donated_to, int stored_items.shipment_id, String stored_items.type, String stored_items.height, String stored_items.width, String stored_items.length, String stored_items.location, String stored_items.creator_id, String stored_items.user_id)",
      "subscriptions(int subscriptions.id, String subscriptions.start_date, String subscriptions.end_date, int subscriptions.user_id, int subscriptions.duration_in_months, String subscriptions.created_at, String subscriptions.updated_at)",
      "users(int users.id, String users.email, String users.encrypted_password, String users.reset_password_token, String users.remember_created_at, int users.sign_in_count, String users.current_sign_in_at, String users.last_sign_in_at, String users.current_sign_in_ip, String users.last_sign_in_ip, String users.password_salt, String users.confirmation_token, String users.confirmed_at, String users.confirmation_sent_at, int users.failed_attempts, String users.unlock_token, String users.locked_at, String users.authentication_token, String users.created_at, String users.updated_at, String users.last_name, String users.first_name, String users.beta_user, String users.signup_comments, String users.role, String users.cim_id, int users.default_payment_profile_id, int users.default_shipping_address_id, String users.test_user, int users.acting_as_user_id, String users.first_time_signed_up)"
    ],
    "primarykeys": [
      "addresses(addresses.id)",
      "boxes(boxes.id)",
      "boxes_subscriptions(boxes_subscriptions.id)",
      "cart_items(cart_items.id)",
      "carts(carts.id)",
      "charges(charges.id)",
      "credits(credits.id)",
      "interested_people(interested_people.id)",
      "invoices(invoices.id)",
      "marketing_hits(marketing_hits.id)",
      "order_lines(order_lines.id)",
      "orders(orders.id)",
      "payment_profiles(payment_profiles.id)",
      "payment_transactions(payment_transactions.id)",
      "photos(photos.id)",
      "products(products.id)",
      "rental_agreement_versions(rental_agreement_versions.id)",
      "rental_agreement_versions_users(rental_agreement_versions_users.id)",
      "shipments(shipments.id)",
      "storage_charge_processing_records(storage_charge_processing_records.id)",
      "storage_charges(storage_charges.id)",
      "storage_payment_processing_records(storage_payment_processing_records.id)",
      "stored_item_photos(stored_item_photos.id)",
      "stored_item_tags(stored_item_tags.id)",
      "stored_items(stored_items.id)",
      "subscriptions(subscriptions.id)",
      "users(users.id)"
    ],
    "foreignkeys": [
      "addresses(addresses.user_id) -> users(users.id)",
      "boxes(boxes.assigned_to_user_id) -> users(users.id)",
      "boxes(boxes.created_by_id) -> users(users.id)",
      "boxes_subscriptions(boxes_subscriptions.box_id) -> boxes(boxes.id)",
      "boxes_subscriptions(boxes_subscriptions.subscription_id) -> subscriptions(subscriptions.id)",
      "cart_items(cart_items.cart_id) -> carts(carts.id)",
      "cart_items(cart_items.product_id) -> products(products.id)",
      "cart_items(cart_items.box_id) -> boxes(boxes.id)",
      "cart_items(cart_items.address_id) -> addresses(addresses.id)",
      "cart_items(cart_items.stored_item_id) -> stored_items(stored_items.id)",
      "carts(carts.user_id) -> users(users.id)",
      "charges(charges.user_id) -> users(users.id)",
      "charges(charges.product_id) -> products(products.id)",
      "charges(charges.order_id) -> orders(orders.id)",
      "charges(charges.shipment_id) -> shipments(shipments.id)",
      "credits(credits.user_id) -> users(users.id)",
      "invoices(invoices.user_id) -> users(users.id)",
      "invoices(invoices.payment_transaction_id) -> payment_transactions(payment_transactions.id)",
      "invoices(invoices.order_id) -> orders(orders.id)",
      "order_lines(order_lines.order_id) -> orders(orders.id)",
      "order_lines(order_lines.product_id) -> products(products.id)",
      "order_lines(order_lines.shipping_address_id) -> addresses(addresses.id)",
      "order_lines(order_lines.service_box_id) -> boxes(boxes.id)",
      "order_lines(order_lines.shipment_id) -> shipments(shipments.id)",
      "order_lines(order_lines.service_item_id) -> stored_items(stored_items.id)",
      "order_lines(order_lines.item_mail_shipping_charge_id) -> charges(charges.id)",
      "orders(orders.cart_id) -> carts(carts.id)",
      "orders(orders.user_id) -> users(users.id)",
      "payment_profiles(payment_profiles.user_id) -> users(users.id)",
      "payment_profiles(payment_profiles.billing_address_id) -> addresses(addresses.id)",
      "payment_transactions(payment_transactions.order_id) -> orders(orders.id)",
      "payment_transactions(payment_transactions.user_id) -> users(users.id)",
      "payment_transactions(payment_transactions.payment_profile_id) -> payment_profiles(payment_profiles.id)",
      "payment_transactions(payment_transactions.storage_payment_processing_record_id) -> storage_payment_processing_records(storage_payment_processing_records.id)",
      "payment_transactions(payment_transactions.credit_id) -> credits(credits.id)",
      "photos(photos.stored_item_id) -> stored_items(stored_items.id)",
      "rental_agreement_versions_users(rental_agreement_versions_users.user_id) -> users(users.id)",
      "rental_agreement_versions_users(rental_agreement_versions_users.rental_agreement_version_id) -> rental_agreement_versions(rental_agreement_versions.id)",
      "shipments(shipments.box_id) -> boxes(boxes.id)",
      "shipments(shipments.from_address_id) -> addresses(addresses.id)",
      "shipments(shipments.to_address_id) -> addresses(addresses.id)",
      "storage_charge_processing_records(storage_charge_processing_records.generated_by_user_id) -> users(users.id)",
      "storage_charges(storage_charges.box_id) -> boxes(boxes.id)",
      "storage_charges(storage_charges.charge_id) -> charges(charges.id)",
      "storage_charges(storage_charges.storage_charge_processing_record_id) -> storage_charge_processing_records(storage_charge_processing_records.id)",
      "storage_payment_processing_records(storage_payment_processing_records.generated_by_user_id) -> users(users.id)",
      "stored_item_photos(stored_item_photos.stored_item_id) -> stored_items(stored_items.id)",
      "stored_item_tags(stored_item_tags.stored_item_id) -> stored_items(stored_items.id)",
      "stored_items(stored_items.box_id) -> boxes(boxes.id)",
      "stored_items(stored_items.shipment_id) -> shipments(shipments.id)",
      "subscriptions(subscriptions.user_id) -> users(users.id)",
      "users(users.default_payment_profile_id) -> payment_profiles(payment_profiles.id)",
      "users(users.default_shipping_address_id) -> addresses(addresses.id)"
    ],
    "transactions": [
      {
        "signature": "void createAddress(int id, String first_name, String last_name, String day_phone, String evening_phone, String address_line_1, String address_line_2, String city, String state, String zip, String created_at, String updated_at, String address_name, int user_id, String country, String status, String comment, String fedex_validation_status)",
        "body": [
          "ins(addresses, (id, first_name, last_name, day_phone, evening_phone, address_line_1, address_line_2, city, state, zip, created_at, updated_at, address_name, user_id, country, status, comment, fedex_validation_status))"
        ]
      },
      {
        "signature": "void deleteAddress(int id)",
        "body": [
          "del(addresses, addresses.id=id)"
        ]
      },
      {
        "signature": "void updateAddress(int id, String first_name, String last_name, String day_phone, String evening_phone, String address_line_1, String address_line_2, String city, String state, String zip, String updated_at, String address_name, int user_id, String country, String status, String comment, String fedex_validation_status)",
        "body": [
          "upd(addresses, addresses.id=id, addresses.first_name, first_name)",
          "upd(addresses, addresses.id=id, addresses.last_name, last_name)",
          "upd(addresses, addresses.id=id, addresses.day_phone, day_phone)",
          "upd(addresses, addresses.id=id, addresses.evening_phone, evening_phone)",
          "upd(addresses, addresses.id=id, addresses.address_line_1, address_line_1)",
          "upd(addresses, addresses.id=id, addresses.address_line_2, address_line_2)",
          "upd(addresses, addresses.id=id, addresses.city, city)",
          "upd(addresses, addresses.id=id, addresses.state, state)",
          "upd(addresses, addresses.id=id, addresses.zip, zip)",
          "upd(addresses, addresses.id=id, addresses.updated_at, updated_at)",
          "upd(addresses, addresses.id=id, addresses.address_name, address_name)",
          "upd(addresses, addresses.id=id, addresses.user_id, user_id)",
          "upd(addresses, addresses.id=id, addresses.country, country)",
          "upd(addresses, addresses.id=id, addresses.status, status)",
          "upd(addresses, addresses.id=id, addresses.comment, comment)",
          "upd(addresses, addresses.id=id, addresses.fedex_validation_status, fedex_validation_status)"
        ]
      },
      {
        "signature": "void readAddress(int id)",
        "body": [
          "pi([addresses.first_name, addresses.last_name, addresses.day_phone, addresses.evening_phone, addresses.address_line_1, addresses.address_line_2, addresses.city, addresses.state, addresses.zip, addresses.address_name, addresses.user_id, addresses.country, addresses.status, addresses.comment, addresses.fedex_validation_status], sigma(addresses.id=id, addresses))"
        ]
      },
      {
        "signature": "void readAddressCreateTime(int id)",
        "body": [
          "pi([addresses.created_at], sigma(addresses.id=id, addresses))"
        ]
      },
      {
        "signature": "void readAddressUpdateTime(int id)",
        "body": [
          "pi([addresses.updated_at], sigma(addresses.id=id, addresses))"
        ]
      },
      {
        "signature": "void createBox(int id, int assigned_to_user_id, String created_at, String updated_at, int ordering_order_line_id, String status, String box_type, String description, String inventorying_status, int inventorying_order_line_id, String received_at, String height, String width, String length, String weight, int box_num, String return_requested_at, String location, String inventoried_at, int created_by_id)",
        "body": [
          "ins(boxes, (id, assigned_to_user_id, created_at, updated_at, ordering_order_line_id, status, box_type, description, inventorying_status, inventorying_order_line_id, received_at, height, width, length, weight, box_num, return_requested_at, location, inventoried_at, created_by_id))"
        ]
      },
      {
        "signature": "void deleteBox(int id)",
        "body": [
          "del(boxes, boxes.id=id)"
        ]
      },
      {
        "signature": "void updateBox(int id, int assigned_to_user_id, String updated_at, int ordering_order_line_id, String status, String box_type, String description, String inventorying_status, int inventorying_order_line_id, String received_at, String height, String width, String length, String weight, int box_num, String return_requested_at, String location, String inventoried_at, int created_by_id)",
        "body": [
          "upd(boxes, boxes.id=id, boxes.assigned_to_user_id, assigned_to_user_id)",
          "upd(boxes, boxes.id=id, boxes.updated_at, updated_at)",
          "upd(boxes, boxes.id=id, boxes.ordering_order_line_id, ordering_order_line_id)",
          "upd(boxes, boxes.id=id, boxes.status, status)",
          "upd(boxes, boxes.id=id, boxes.box_type, box_type)",
          "upd(boxes, boxes.id=id, boxes.description, description)",
          "upd(boxes, boxes.id=id, boxes.inventorying_status, inventorying_status)",
          "upd(boxes, boxes.id=id, boxes.inventorying_order_line_id, inventorying_order_line_id)",
          "upd(boxes, boxes.id=id, boxes.received_at, received_at)",
          "upd(boxes, boxes.id=id, boxes.height, height)",
          "upd(boxes, boxes.id=id, boxes.width, width)",
          "upd(boxes, boxes.id=id, boxes.length, length)",
          "upd(boxes, boxes.id=id, boxes.weight, weight)",
          "upd(boxes, boxes.id=id, boxes.box_num, box_num)",
          "upd(boxes, boxes.id=id, boxes.return_requested_at, return_requested_at)",
          "upd(boxes, boxes.id=id, boxes.location, location)",
          "upd(boxes, boxes.id=id, boxes.inventoried_at, inventoried_at)",
          "upd(boxes, boxes.id=id, boxes.created_by_id, created_by_id)"
        ]
      },
      {
        "signature": "void readBox(int id)",
        "body": [
          "pi([boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, boxes.height, boxes.width, boxes.length, boxes.weight, boxes.box_num, boxes.return_requested_at, boxes.location, boxes.inventoried_at, boxes.created_by_id], sigma(boxes.id=id, boxes))"
        ]
      },
      {
        "signature": "void readBoxCreateTime(int id)",
        "body": [
          "pi([boxes.created_at], sigma(boxes.id=id, boxes))"
        ]
      },
      {
        "signature": "void readBoxUpdateTime(int id)",
        "body": [
          "pi([boxes.updated_at], sigma(boxes.id=id, boxes))"
        ]
      },
      {
        "signature": "void createBoxSubscription(int id, int box_id, int subscription_id)",
        "body": [
          "ins(boxes_subscriptions, (id, box_id, subscription_id))"
        ]
      },
      {
        "signature": "void deleteBoxSubscription(int id)",
        "body": [
          "del(boxes_subscriptions, boxes_subscriptions.id=id)"
        ]
      },
      {
        "signature": "void updateBoxSubscription(int id, int box_id, int subscription_id)",
        "body": [
          "upd(boxes_subscriptions, boxes_subscriptions.id=id, boxes_subscriptions.box_id, box_id)",
          "upd(boxes_subscriptions, boxes_subscriptions.id=id, boxes_subscriptions.subscription_id, subscription_id)"
        ]
      },
      {
        "signature": "void readBoxSubscription(int id)",
        "body": [
          "pi([boxes_subscriptions.box_id, boxes_subscriptions.subscription_id], sigma(boxes_subscriptions.id=id, boxes_subscriptions))"
        ]
      },
      {
        "signature": "void createCartItem(int id, int quantity, int cart_id, int product_id, String created_at, String updated_at, int committed_months, int box_id, int address_id, int stored_item_id)",
        "body": [
          "ins(cart_items, (id, quantity, cart_id, product_id, created_at, updated_at, committed_months, box_id, address_id, stored_item_id))"
        ]
      },
      {
        "signature": "void deleteCartItem(int id)",
        "body": [
          "del(cart_items, cart_items.id=id)"
        ]
      },
      {
        "signature": "void updateCartItem(int id, int quantity, int cart_id, int product_id, String updated_at, int committed_months, int box_id, int address_id, int stored_item_id)",
        "body": [
          "upd(cart_items, cart_items.id=id, cart_items.quantity, quantity)",
          "upd(cart_items, cart_items.id=id, cart_items.cart_id, cart_id)",
          "upd(cart_items, cart_items.id=id, cart_items.product_id, product_id)",
          "upd(cart_items, cart_items.id=id, cart_items.updated_at, updated_at)",
          "upd(cart_items, cart_items.id=id, cart_items.committed_months, committed_months)",
          "upd(cart_items, cart_items.id=id, cart_items.box_id, box_id)",
          "upd(cart_items, cart_items.id=id, cart_items.address_id, address_id)",
          "upd(cart_items, cart_items.id=id, cart_items.stored_item_id, stored_item_id)"
        ]
      },
      {
        "signature": "void readCartItem(int id)",
        "body": [
          "pi([cart_items.quantity, cart_items.cart_id, cart_items.product_id, cart_items.committed_months, cart_items.box_id, cart_items.address_id, cart_items.stored_item_id], sigma(cart_items.id=id, cart_items))"
        ]
      },
      {
        "signature": "void readCartItemCreateTime(int id)",
        "body": [
          "pi([cart_items.created_at], sigma(cart_items.id=id, cart_items))"
        ]
      },
      {
        "signature": "void readCartItemUpdateTime(int id)",
        "body": [
          "pi([cart_items.updated_at], sigma(cart_items.id=id, cart_items))"
        ]
      },
      {
        "signature": "void createCart(int id, int user_id, String created_at, String updated_at, String ordered_at, String status, String quoted_shipping_cost, String quoted_shipping_cost_success)",
        "body": [
          "ins(carts, (id, user_id, created_at, updated_at, ordered_at, status, quoted_shipping_cost, quoted_shipping_cost_success))"
        ]
      },
      {
        "signature": "void deleteCart(int id)",
        "body": [
          "del(carts, carts.id=id)"
        ]
      },
      {
        "signature": "void updateCart(int id, int user_id, String updated_at, String ordered_at, String status, String quoted_shipping_cost, String quoted_shipping_cost_success)",
        "body": [
          "upd(carts, carts.id=id, carts.user_id, user_id)",
          "upd(carts, carts.id=id, carts.updated_at, updated_at)",
          "upd(carts, carts.id=id, carts.ordered_at, ordered_at)",
          "upd(carts, carts.id=id, carts.status, status)",
          "upd(carts, carts.id=id, carts.quoted_shipping_cost, quoted_shipping_cost)",
          "upd(carts, carts.id=id, carts.quoted_shipping_cost_success, quoted_shipping_cost_success)"
        ]
      },
      {
        "signature": "void readCart(int id)",
        "body": [
          "pi([carts.user_id, carts.ordered_at, carts.status, carts.quoted_shipping_cost, carts.quoted_shipping_cost_success], sigma(carts.id=id, carts))"
        ]
      },
      {
        "signature": "void readCartCreateTime(int id)",
        "body": [
          "pi([carts.created_at], sigma(carts.id=id, carts))"
        ]
      },
      {
        "signature": "void readCartUpdateTime(int id)",
        "body": [
          "pi([carts.updated_at], sigma(carts.id=id, carts))"
        ]
      },
      {
        "signature": "void createCharge(int id, int user_id, String total_in_cents, int product_id, String created_at, String updated_at, int order_id, int shipment_id, String comments, int created_by_admin_id)",
        "body": [
          "ins(charges, (id, user_id, total_in_cents, product_id, created_at, updated_at, order_id, shipment_id, comments, created_by_admin_id))"
        ]
      },
      {
        "signature": "void deleteCharge(int id)",
        "body": [
          "del(charges, charges.id=id)"
        ]
      },
      {
        "signature": "void updateCharge(int id, int user_id, String total_in_cents, int product_id, String updated_at, int order_id, int shipment_id, String comments, int created_by_admin_id)",
        "body": [
          "upd(charges, charges.id=id, charges.user_id, user_id)",
          "upd(charges, charges.id=id, charges.total_in_cents, total_in_cents)",
          "upd(charges, charges.id=id, charges.product_id, product_id)",
          "upd(charges, charges.id=id, charges.updated_at, updated_at)",
          "upd(charges, charges.id=id, charges.order_id, order_id)",
          "upd(charges, charges.id=id, charges.shipment_id, shipment_id)",
          "upd(charges, charges.id=id, charges.comments, comments)",
          "upd(charges, charges.id=id, charges.created_by_admin_id, created_by_admin_id)"
        ]
      },
      {
        "signature": "void readCharge(int id)",
        "body": [
          "pi([charges.user_id, charges.total_in_cents, charges.product_id, charges.order_id, charges.shipment_id, charges.comments, charges.created_by_admin_id], sigma(charges.id=id, charges))"
        ]
      },
      {
        "signature": "void readChargeCreateTime(int id)",
        "body": [
          "pi([charges.created_at], sigma(charges.id=id, charges))"
        ]
      },
      {
        "signature": "void readChargeUpdateTime(int id)",
        "body": [
          "pi([charges.updated_at], sigma(charges.id=id, charges))"
        ]
      },
      {
        "signature": "void createCredit(int id, String amount, int user_id, String created_at, String updated_at, String description, int created_by_admin_id)",
        "body": [
          "ins(credits, (id, amount, user_id, created_at, updated_at, description, created_by_admin_id))"
        ]
      },
      {
        "signature": "void deleteCredit(int id)",
        "body": [
          "del(credits, credits.id=id)"
        ]
      },
      {
        "signature": "void updateCredit(int id, String amount, int user_id, String updated_at, String description, int created_by_admin_id)",
        "body": [
          "upd(credits, credits.id=id, credits.amount, amount)",
          "upd(credits, credits.id=id, credits.user_id, user_id)",
          "upd(credits, credits.id=id, credits.updated_at, updated_at)",
          "upd(credits, credits.id=id, credits.description, description)",
          "upd(credits, credits.id=id, credits.created_by_admin_id, created_by_admin_id)"
        ]
      },
      {
        "signature": "void readCredit(int id)",
        "body": [
          "pi([credits.amount, credits.user_id, credits.description, credits.created_by_admin_id], sigma(credits.id=id, credits))"
        ]
      },
      {
        "signature": "void readCreditCreateTime(int id)",
        "body": [
          "pi([credits.created_at], sigma(credits.id=id, credits))"
        ]
      },
      {
        "signature": "void readCreditUpdateTime(int id)",
        "body": [
          "pi([credits.updated_at], sigma(credits.id=id, credits))"
        ]
      },
      {
        "signature": "void createInterestedPeople(int id, String email, String created_at, String updated_at)",
        "body": [
          "ins(interested_people, (id, email, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteInterestedPeople(int id)",
        "body": [
          "del(interested_people, interested_people.id=id)"
        ]
      },
      {
        "signature": "void updateInterestedPeople(int id, String email, String updated_at)",
        "body": [
          "upd(interested_people, interested_people.id=id, interested_people.email, email)",
          "upd(interested_people, interested_people.id=id, interested_people.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readInterestedPeople(int id)",
        "body": [
          "pi([interested_people.email], sigma(interested_people.id=id, interested_people))"
        ]
      },
      {
        "signature": "void readInterestedPeopleCreateTime(int id)",
        "body": [
          "pi([interested_people.created_at], sigma(interested_people.id=id, interested_people))"
        ]
      },
      {
        "signature": "void readInterestedPeopleUpdateTime(int id)",
        "body": [
          "pi([interested_people.updated_at], sigma(interested_people.id=id, interested_people))"
        ]
      },
      {
        "signature": "void createInvoice(int id, int user_id, int payment_transaction_id, int order_id, String created_at, String updated_at)",
        "body": [
          "ins(invoices, (id, user_id, payment_transaction_id, order_id, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteInvoice(int id)",
        "body": [
          "del(invoices, invoices.id=id)"
        ]
      },
      {
        "signature": "void updateInvoice(int id, int user_id, int payment_transaction_id, int order_id, String updated_at)",
        "body": [
          "upd(invoices, invoices.id=id, invoices.user_id, user_id)",
          "upd(invoices, invoices.id=id, invoices.payment_transaction_id, payment_transaction_id)",
          "upd(invoices, invoices.id=id, invoices.order_id, order_id)",
          "upd(invoices, invoices.id=id, invoices.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readInvoice(int id)",
        "body": [
          "pi([invoices.user_id, invoices.payment_transaction_id, invoices.order_id], sigma(invoices.id=id, invoices))"
        ]
      },
      {
        "signature": "void readInvoiceCreateTime(int id)",
        "body": [
          "pi([invoices.created_at], sigma(invoices.id=id, invoices))"
        ]
      },
      {
        "signature": "void readInvoiceUpdateTime(int id)",
        "body": [
          "pi([invoices.updated_at], sigma(invoices.id=id, invoices))"
        ]
      },
      {
        "signature": "void createMarketingHit(int id, String source, String created_at, String updated_at)",
        "body": [
          "ins(marketing_hits, (id, source, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteMarketingHit(int id)",
        "body": [
          "del(marketing_hits, marketing_hits.id=id)"
        ]
      },
      {
        "signature": "void updateMarketingHit(int id, String source, String updated_at)",
        "body": [
          "upd(marketing_hits, marketing_hits.id=id, marketing_hits.source, source)",
          "upd(marketing_hits, marketing_hits.id=id, marketing_hits.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readMarketingHit(int id)",
        "body": [
          "pi([marketing_hits.source], sigma(marketing_hits.id=id, marketing_hits))"
        ]
      },
      {
        "signature": "void readMarketingHitCreateTime(int id)",
        "body": [
          "pi([marketing_hits.created_at], sigma(marketing_hits.id=id, marketing_hits))"
        ]
      },
      {
        "signature": "void readMarketingHitUpdateTime(int id)",
        "body": [
          "pi([marketing_hits.updated_at], sigma(marketing_hits.id=id, marketing_hits))"
        ]
      },
      {
        "signature": "void createOrderLine(int id, int order_id, int product_id, int quantity, String status, String created_at, String updated_at, int committed_months, int shipping_address_id, int service_box_id, int shipment_id, int service_item_id, int item_mail_shipping_charge_id, String amount_paid_at_purchase)",
        "body": [
          "ins(order_lines, (id, order_id, product_id, quantity, status, created_at, updated_at, committed_months, shipping_address_id, service_box_id, shipment_id, service_item_id, item_mail_shipping_charge_id, amount_paid_at_purchase))"
        ]
      },
      {
        "signature": "void deleteOrderLine(int id)",
        "body": [
          "del(order_lines, order_lines.id=id)"
        ]
      },
      {
        "signature": "void updateOrderLine(int id, int order_id, int product_id, int quantity, String status, String updated_at, int committed_months, int shipping_address_id, int service_box_id, int shipment_id, int service_item_id, int item_mail_shipping_charge_id, String amount_paid_at_purchase)",
        "body": [
          "upd(order_lines, order_lines.id=id, order_lines.order_id, order_id)",
          "upd(order_lines, order_lines.id=id, order_lines.product_id, product_id)",
          "upd(order_lines, order_lines.id=id, order_lines.quantity, quantity)",
          "upd(order_lines, order_lines.id=id, order_lines.status, status)",
          "upd(order_lines, order_lines.id=id, order_lines.updated_at, updated_at)",
          "upd(order_lines, order_lines.id=id, order_lines.committed_months, committed_months)",
          "upd(order_lines, order_lines.id=id, order_lines.shipping_address_id, shipping_address_id)",
          "upd(order_lines, order_lines.id=id, order_lines.service_box_id, service_box_id)",
          "upd(order_lines, order_lines.id=id, order_lines.shipment_id, shipment_id)",
          "upd(order_lines, order_lines.id=id, order_lines.service_item_id, service_item_id)",
          "upd(order_lines, order_lines.id=id, order_lines.item_mail_shipping_charge_id, item_mail_shipping_charge_id)",
          "upd(order_lines, order_lines.id=id, order_lines.amount_paid_at_purchase, amount_paid_at_purchase)"
        ]
      },
      {
        "signature": "void readOrderLine(int id)",
        "body": [
          "pi([order_lines.order_id, order_lines.product_id, order_lines.quantity, order_lines.status, order_lines.committed_months, order_lines.shipping_address_id, order_lines.service_box_id, order_lines.shipment_id, order_lines.service_item_id, order_lines.item_mail_shipping_charge_id, order_lines.amount_paid_at_purchase], sigma(order_lines.id=id, order_lines))"
        ]
      },
      {
        "signature": "void readOrderLineCreateTime(int id)",
        "body": [
          "pi([order_lines.created_at], sigma(order_lines.id=id, order_lines))"
        ]
      },
      {
        "signature": "void readOrderLineUpdateTime(int id)",
        "body": [
          "pi([order_lines.updated_at], sigma(order_lines.id=id, order_lines))"
        ]
      },
      {
        "signature": "void createOrder(int id, int cart_id, String ip_address, int user_id, String created_at, String updated_at, String initial_charged_shipping_cost)",
        "body": [
          "ins(orders, (id, cart_id, ip_address, user_id, created_at, updated_at, initial_charged_shipping_cost))"
        ]
      },
      {
        "signature": "void deleteOrder(int id)",
        "body": [
          "del(orders, orders.id=id)"
        ]
      },
      {
        "signature": "void updateOrder(int id, int cart_id, String ip_address, int user_id, String updated_at, String initial_charged_shipping_cost)",
        "body": [
          "upd(orders, orders.id=id, orders.cart_id, cart_id)",
          "upd(orders, orders.id=id, orders.ip_address, ip_address)",
          "upd(orders, orders.id=id, orders.user_id, user_id)",
          "upd(orders, orders.id=id, orders.updated_at, updated_at)",
          "upd(orders, orders.id=id, orders.initial_charged_shipping_cost, initial_charged_shipping_cost)"
        ]
      },
      {
        "signature": "void readOrder(int id)",
        "body": [
          "pi([orders.cart_id, orders.ip_address, orders.user_id, orders.initial_charged_shipping_cost], sigma(orders.id=id, orders))"
        ]
      },
      {
        "signature": "void readOrderCreateTime(int id)",
        "body": [
          "pi([orders.created_at], sigma(orders.id=id, orders))"
        ]
      },
      {
        "signature": "void readOrderUpdateTime(int id)",
        "body": [
          "pi([orders.updated_at], sigma(orders.id=id, orders))"
        ]
      },
      {
        "signature": "void createPaymentProfile(int id, String identifier, String last_four_digits, int user_id, String created_at, String updated_at, int year, String first_name, String last_name, int billing_address_id, String cc_type, String month, String active)",
        "body": [
          "ins(payment_profiles, (id, identifier, last_four_digits, user_id, created_at, updated_at, year, first_name, last_name, billing_address_id, cc_type, month, active))"
        ]
      },
      {
        "signature": "void deletePaymentProfile(int id)",
        "body": [
          "del(payment_profiles, payment_profiles.id=id)"
        ]
      },
      {
        "signature": "void updatePaymentProfile(int id, String identifier, String last_four_digits, int user_id, String updated_at, int year, String first_name, String last_name, int billing_address_id, String cc_type, String month, String active)",
        "body": [
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.identifier, identifier)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.last_four_digits, last_four_digits)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.user_id, user_id)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.updated_at, updated_at)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.year, year)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.first_name, first_name)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.last_name, last_name)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.billing_address_id, billing_address_id)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.cc_type, cc_type)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.month, month)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.active, active)"
        ]
      },
      {
        "signature": "void readPaymentProfile(int id)",
        "body": [
          "pi([payment_profiles.identifier, payment_profiles.last_four_digits, payment_profiles.user_id, payment_profiles.year, payment_profiles.first_name, payment_profiles.last_name, payment_profiles.billing_address_id, payment_profiles.cc_type, payment_profiles.month, payment_profiles.active], sigma(payment_profiles.id=id, payment_profiles))"
        ]
      },
      {
        "signature": "void readPaymentProfileCreateTime(int id)",
        "body": [
          "pi([payment_profiles.created_at], sigma(payment_profiles.id=id, payment_profiles))"
        ]
      },
      {
        "signature": "void readPaymentProfileUpdateTime(int id)",
        "body": [
          "pi([payment_profiles.updated_at], sigma(payment_profiles.id=id, payment_profiles))"
        ]
      },
      {
        "signature": "void createPaymentTransaction(int id, int order_id, String action, String authorization, String message, String params, int user_id, String created_at, String updated_at, int payment_profile_id, String status, int storage_payment_processing_record_id, String auth_transaction_id, int credit_id, String submitted_amount)",
        "body": [
          "ins(payment_transactions, (id, order_id, action, authorization, message, params, user_id, created_at, updated_at, payment_profile_id, status, storage_payment_processing_record_id, auth_transaction_id, credit_id, submitted_amount))"
        ]
      },
      {
        "signature": "void deletePaymentTransaction(int id)",
        "body": [
          "del(payment_transactions, payment_transactions.id=id)"
        ]
      },
      {
        "signature": "void updatePaymentTransaction(int id, int order_id, String action, String authorization, String message, String params, int user_id, String updated_at, int payment_profile_id, String status, int storage_payment_processing_record_id, String auth_transaction_id, int credit_id, String submitted_amount)",
        "body": [
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.order_id, order_id)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.action, action)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.authorization, authorization)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.message, message)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.params, params)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.user_id, user_id)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.updated_at, updated_at)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.payment_profile_id, payment_profile_id)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.status, status)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.storage_payment_processing_record_id, storage_payment_processing_record_id)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.auth_transaction_id, auth_transaction_id)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.credit_id, credit_id)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.submitted_amount, submitted_amount)"
        ]
      },
      {
        "signature": "void readPaymentTransaction(int id)",
        "body": [
          "pi([payment_transactions.order_id, payment_transactions.action, payment_transactions.authorization, payment_transactions.message, payment_transactions.params, payment_transactions.user_id, payment_transactions.payment_profile_id, payment_transactions.status, payment_transactions.storage_payment_processing_record_id, payment_transactions.auth_transaction_id, payment_transactions.credit_id, payment_transactions.submitted_amount], sigma(payment_transactions.id=id, payment_transactions))"
        ]
      },
      {
        "signature": "void readPaymentTransactionCreateTime(int id)",
        "body": [
          "pi([payment_transactions.created_at], sigma(payment_transactions.id=id, payment_transactions))"
        ]
      },
      {
        "signature": "void readPaymentTransactionUpdateTime(int id)",
        "body": [
          "pi([payment_transactions.updated_at], sigma(payment_transactions.id=id, payment_transactions))"
        ]
      },
      {
        "signature": "void createPhoto(int id, int stored_item_id, String created_at, String updated_at, String data_file_name, String data_content_type, int data_file_size, String data_updated_at)",
        "body": [
          "ins(photos, (id, stored_item_id, created_at, updated_at, data_file_name, data_content_type, data_file_size, data_updated_at))"
        ]
      },
      {
        "signature": "void deletePhoto(int id)",
        "body": [
          "del(photos, photos.id=id)"
        ]
      },
      {
        "signature": "void updatePhoto(int id, int stored_item_id, String updated_at, String data_file_name, String data_content_type, int data_file_size, String data_updated_at)",
        "body": [
          "upd(photos, photos.id=id, photos.stored_item_id, stored_item_id)",
          "upd(photos, photos.id=id, photos.updated_at, updated_at)",
          "upd(photos, photos.id=id, photos.data_file_name, data_file_name)",
          "upd(photos, photos.id=id, photos.data_content_type, data_content_type)",
          "upd(photos, photos.id=id, photos.data_file_size, data_file_size)",
          "upd(photos, photos.id=id, photos.data_updated_at, data_updated_at)"
        ]
      },
      {
        "signature": "void readPhoto(int id)",
        "body": [
          "pi([photos.stored_item_id, photos.data_file_name, photos.data_content_type, photos.data_file_size, photos.data_updated_at], sigma(photos.id=id, photos))"
        ]
      },
      {
        "signature": "void readPhotoCreateTime(int id)",
        "body": [
          "pi([photos.created_at], sigma(photos.id=id, photos))"
        ]
      },
      {
        "signature": "void readPhotoUpdateTime(int id)",
        "body": [
          "pi([photos.updated_at], sigma(photos.id=id, photos))"
        ]
      },
      {
        "signature": "void createProduct(int id, String name, String price, String created_at, String updated_at, String price_comment, String first_due, String discountable)",
        "body": [
          "ins(products, (id, name, price, created_at, updated_at, price_comment, first_due, discountable))"
        ]
      },
      {
        "signature": "void deleteProduct(int id)",
        "body": [
          "del(products, products.id=id)"
        ]
      },
      {
        "signature": "void updateProduct(int id, String name, String price, String updated_at, String price_comment, String first_due, String discountable)",
        "body": [
          "upd(products, products.id=id, products.name, name)",
          "upd(products, products.id=id, products.price, price)",
          "upd(products, products.id=id, products.updated_at, updated_at)",
          "upd(products, products.id=id, products.price_comment, price_comment)",
          "upd(products, products.id=id, products.first_due, first_due)",
          "upd(products, products.id=id, products.discountable, discountable)"
        ]
      },
      {
        "signature": "void readProduct(int id)",
        "body": [
          "pi([products.name, products.price, products.price_comment, products.first_due, products.discountable], sigma(products.id=id, products))"
        ]
      },
      {
        "signature": "void readProductCreateTime(int id)",
        "body": [
          "pi([products.created_at], sigma(products.id=id, products))"
        ]
      },
      {
        "signature": "void readProductUpdateTime(int id)",
        "body": [
          "pi([products.updated_at], sigma(products.id=id, products))"
        ]
      },
      {
        "signature": "void createRentalAgreementVersion(int id, String agreement_text, String created_at, String updated_at)",
        "body": [
          "ins(rental_agreement_versions, (id, agreement_text, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteRentalAgreementVersion(int id)",
        "body": [
          "del(rental_agreement_versions, rental_agreement_versions.id=id)"
        ]
      },
      {
        "signature": "void updateRentalAgreementVersion(int id, String agreement_text, String updated_at)",
        "body": [
          "upd(rental_agreement_versions, rental_agreement_versions.id=id, rental_agreement_versions.agreement_text, agreement_text)",
          "upd(rental_agreement_versions, rental_agreement_versions.id=id, rental_agreement_versions.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readRentalAgreementVersion(int id)",
        "body": [
          "pi([rental_agreement_versions.agreement_text], sigma(rental_agreement_versions.id=id, rental_agreement_versions))"
        ]
      },
      {
        "signature": "void readRentalAgreementVersionCreateTime(int id)",
        "body": [
          "pi([rental_agreement_versions.created_at], sigma(rental_agreement_versions.id=id, rental_agreement_versions))"
        ]
      },
      {
        "signature": "void readRentalAgreementVersionUpdateTime(int id)",
        "body": [
          "pi([rental_agreement_versions.updated_at], sigma(rental_agreement_versions.id=id, rental_agreement_versions))"
        ]
      },
      {
        "signature": "void createRentalAgreementVersionUser(int id, int user_id, int rental_agreement_version_id, String created_at, String updated_at)",
        "body": [
          "ins(rental_agreement_versions_users, (id, user_id, rental_agreement_version_id, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteRentalAgreementVersionUser(int id)",
        "body": [
          "del(rental_agreement_versions_users, rental_agreement_versions_users.id=id)"
        ]
      },
      {
        "signature": "void updateRentalAgreementVersionUser(int id, int user_id, int rental_agreement_version_id, String updated_at)",
        "body": [
          "upd(rental_agreement_versions_users, rental_agreement_versions_users.id=id, rental_agreement_versions_users.user_id, user_id)",
          "upd(rental_agreement_versions_users, rental_agreement_versions_users.id=id, rental_agreement_versions_users.rental_agreement_version_id, rental_agreement_version_id)",
          "upd(rental_agreement_versions_users, rental_agreement_versions_users.id=id, rental_agreement_versions_users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readRentalAgreementVersionUser(int id)",
        "body": [
          "pi([rental_agreement_versions_users.user_id, rental_agreement_versions_users.rental_agreement_version_id], sigma(rental_agreement_versions_users.id=id, rental_agreement_versions_users))"
        ]
      },
      {
        "signature": "void readRentalAgreementVersionUserCreateTime(int id)",
        "body": [
          "pi([rental_agreement_versions_users.created_at], sigma(rental_agreement_versions_users.id=id, rental_agreement_versions_users))"
        ]
      },
      {
        "signature": "void readRentalAgreementVersionUserUpdateTime(int id)",
        "body": [
          "pi([rental_agreement_versions_users.updated_at], sigma(rental_agreement_versions_users.id=id, rental_agreement_versions_users))"
        ]
      },
      {
        "signature": "void createShipment(int id, int box_id, int from_address_id, int to_address_id, String tracking_number, String created_at, String updated_at, String shipment_label_file_name, String shipment_label_updated_at, String state, String payor, String charge_requested)",
        "body": [
          "ins(shipments, (id, box_id, from_address_id, to_address_id, tracking_number, created_at, updated_at, shipment_label_file_name, shipment_label_updated_at, state, payor, charge_requested))"
        ]
      },
      {
        "signature": "void deleteShipment(int id)",
        "body": [
          "del(shipments, shipments.id=id)"
        ]
      },
      {
        "signature": "void updateShipment(int id, int box_id, int from_address_id, int to_address_id, String tracking_number, String updated_at, String shipment_label_file_name, String shipment_label_updated_at, String state, String payor, String charge_requested)",
        "body": [
          "upd(shipments, shipments.id=id, shipments.box_id, box_id)",
          "upd(shipments, shipments.id=id, shipments.from_address_id, from_address_id)",
          "upd(shipments, shipments.id=id, shipments.to_address_id, to_address_id)",
          "upd(shipments, shipments.id=id, shipments.tracking_number, tracking_number)",
          "upd(shipments, shipments.id=id, shipments.updated_at, updated_at)",
          "upd(shipments, shipments.id=id, shipments.shipment_label_file_name, shipment_label_file_name)",
          "upd(shipments, shipments.id=id, shipments.shipment_label_updated_at, shipment_label_updated_at)",
          "upd(shipments, shipments.id=id, shipments.state, state)",
          "upd(shipments, shipments.id=id, shipments.payor, payor)",
          "upd(shipments, shipments.id=id, shipments.charge_requested, charge_requested)"
        ]
      },
      {
        "signature": "void readShipment(int id)",
        "body": [
          "pi([shipments.box_id, shipments.from_address_id, shipments.to_address_id, shipments.tracking_number, shipments.shipment_label_file_name, shipments.shipment_label_updated_at, shipments.state, shipments.payor, shipments.charge_requested], sigma(shipments.id=id, shipments))"
        ]
      },
      {
        "signature": "void readShipmentCreateTime(int id)",
        "body": [
          "pi([shipments.created_at], sigma(shipments.id=id, shipments))"
        ]
      },
      {
        "signature": "void readShipmentUpdateTime(int id)",
        "body": [
          "pi([shipments.updated_at], sigma(shipments.id=id, shipments))"
        ]
      },
      {
        "signature": "void createStorageChargeProcessingRecord(int id, int generated_by_user_id, String as_of_date, String created_at, String updated_at, String locked_for_editing)",
        "body": [
          "ins(storage_charge_processing_records, (id, generated_by_user_id, as_of_date, created_at, updated_at, locked_for_editing))"
        ]
      },
      {
        "signature": "void deleteStorageChargeProcessingRecord(int id)",
        "body": [
          "del(storage_charge_processing_records, storage_charge_processing_records.id=id)"
        ]
      },
      {
        "signature": "void updateStorageChargeProcessingRecord(int id, int generated_by_user_id, String as_of_date, String updated_at, String locked_for_editing)",
        "body": [
          "upd(storage_charge_processing_records, storage_charge_processing_records.id=id, storage_charge_processing_records.generated_by_user_id, generated_by_user_id)",
          "upd(storage_charge_processing_records, storage_charge_processing_records.id=id, storage_charge_processing_records.as_of_date, as_of_date)",
          "upd(storage_charge_processing_records, storage_charge_processing_records.id=id, storage_charge_processing_records.updated_at, updated_at)",
          "upd(storage_charge_processing_records, storage_charge_processing_records.id=id, storage_charge_processing_records.locked_for_editing, locked_for_editing)"
        ]
      },
      {
        "signature": "void readStorageChargeProcessingRecord(int id)",
        "body": [
          "pi([storage_charge_processing_records.generated_by_user_id, storage_charge_processing_records.as_of_date, storage_charge_processing_records.locked_for_editing], sigma(storage_charge_processing_records.id=id, storage_charge_processing_records))"
        ]
      },
      {
        "signature": "void readStorageChargeProcessingRecordCreateTime(int id)",
        "body": [
          "pi([storage_charge_processing_records.created_at], sigma(storage_charge_processing_records.id=id, storage_charge_processing_records))"
        ]
      },
      {
        "signature": "void readStorageChargeProcessingRecordUpdateTime(int id)",
        "body": [
          "pi([storage_charge_processing_records.updated_at], sigma(storage_charge_processing_records.id=id, storage_charge_processing_records))"
        ]
      },
      {
        "signature": "void createStorageCharge(int id, int box_id, int charge_id, String start_date, String end_date, int storage_charge_processing_record_id)",
        "body": [
          "ins(storage_charges, (id, box_id, charge_id, start_date, end_date, storage_charge_processing_record_id))"
        ]
      },
      {
        "signature": "void deleteStorageCharge(int id)",
        "body": [
          "del(storage_charges, storage_charges.id=id)"
        ]
      },
      {
        "signature": "void updateStorageCharge(int id, int box_id, int charge_id, String start_date, String end_date, int storage_charge_processing_record_id)",
        "body": [
          "upd(storage_charges, storage_charges.id=id, storage_charges.box_id, box_id)",
          "upd(storage_charges, storage_charges.id=id, storage_charges.charge_id, charge_id)",
          "upd(storage_charges, storage_charges.id=id, storage_charges.start_date, start_date)",
          "upd(storage_charges, storage_charges.id=id, storage_charges.end_date, end_date)",
          "upd(storage_charges, storage_charges.id=id, storage_charges.storage_charge_processing_record_id, storage_charge_processing_record_id)"
        ]
      },
      {
        "signature": "void readStorageCharge(int id)",
        "body": [
          "pi([storage_charges.box_id, storage_charges.charge_id, storage_charges.start_date, storage_charges.end_date, storage_charges.storage_charge_processing_record_id], sigma(storage_charges.id=id, storage_charges))"
        ]
      },
      {
        "signature": "void createStoragePaymentProcessingRecord(int id, int generated_by_user_id, String as_of_date, String created_at, String updated_at)",
        "body": [
          "ins(storage_payment_processing_records, (id, generated_by_user_id, as_of_date, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteStoragePaymentProcessingRecord(int id)",
        "body": [
          "del(storage_payment_processing_records, storage_payment_processing_records.id=id)"
        ]
      },
      {
        "signature": "void updateStoragePaymentProcessingRecord(int id, int generated_by_user_id, String as_of_date, String updated_at)",
        "body": [
          "upd(storage_payment_processing_records, storage_payment_processing_records.id=id, storage_payment_processing_records.generated_by_user_id, generated_by_user_id)",
          "upd(storage_payment_processing_records, storage_payment_processing_records.id=id, storage_payment_processing_records.as_of_date, as_of_date)",
          "upd(storage_payment_processing_records, storage_payment_processing_records.id=id, storage_payment_processing_records.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readStoragePaymentProcessingRecord(int id)",
        "body": [
          "pi([storage_payment_processing_records.generated_by_user_id, storage_payment_processing_records.as_of_date], sigma(storage_payment_processing_records.id=id, storage_payment_processing_records))"
        ]
      },
      {
        "signature": "void readStoragePaymentProcessingRecordCreateTime(int id)",
        "body": [
          "pi([storage_payment_processing_records.created_at], sigma(storage_payment_processing_records.id=id, storage_payment_processing_records))"
        ]
      },
      {
        "signature": "void readStoragePaymentProcessingRecordUpdateTime(int id)",
        "body": [
          "pi([storage_payment_processing_records.updated_at], sigma(storage_payment_processing_records.id=id, storage_payment_processing_records))"
        ]
      },
      {
        "signature": "void createStoredItemTag(int id, int stored_item_id, String tag, String created_at, String updated_at)",
        "body": [
          "ins(stored_item_tags, (id, stored_item_id, tag, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteStoredItemTag(int id)",
        "body": [
          "del(stored_item_tags, stored_item_tags.id=id)"
        ]
      },
      {
        "signature": "void updateStoredItemTag(int id, int stored_item_id, String tag, String updated_at)",
        "body": [
          "upd(stored_item_tags, stored_item_tags.id=id, stored_item_tags.stored_item_id, stored_item_id)",
          "upd(stored_item_tags, stored_item_tags.id=id, stored_item_tags.tag, tag)",
          "upd(stored_item_tags, stored_item_tags.id=id, stored_item_tags.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readStoredItemTag(int id)",
        "body": [
          "pi([stored_item_tags.stored_item_id, stored_item_tags.tag], sigma(stored_item_tags.id=id, stored_item_tags))"
        ]
      },
      {
        "signature": "void readStoredItemTagCreateTime(int id)",
        "body": [
          "pi([stored_item_tags.created_at], sigma(stored_item_tags.id=id, stored_item_tags))"
        ]
      },
      {
        "signature": "void readStoredItemTagUpdateTime(int id)",
        "body": [
          "pi([stored_item_tags.updated_at], sigma(stored_item_tags.id=id, stored_item_tags))"
        ]
      },
      {
        "signature": "void createFurnitureItemSubscription(int id, int furniture_item_id, int subscription_id)",
        "body": [
          "ins(furniture_items_subscriptions, (id, furniture_item_id, subscription_id))"
        ]
      },
      {
        "signature": "void deleteFurnitureItemSubscription(int id)",
        "body": [
          "del(furniture_items_subscriptions, furniture_items_subscriptions.id=id)"
        ]
      },
      {
        "signature": "void updateFurnitureItemSubscription(int id, int furniture_item_id, int subscription_id)",
        "body": [
          "upd(furniture_items_subscriptions, furniture_items_subscriptions.id=id, furniture_items_subscriptions.furniture_item_id, furniture_item_id)",
          "upd(furniture_items_subscriptions, furniture_items_subscriptions.id=id, furniture_items_subscriptions.subscription_id, subscription_id)"
        ]
      },
      {
        "signature": "void readFurnitureItemSubscription(int id)",
        "body": [
          "pi([furniture_items_subscriptions.furniture_item_id, furniture_items_subscriptions.subscription_id], sigma(furniture_items_subscriptions.id=id, furniture_items_subscriptions))"
        ]
      },
      {
        "signature": "void createStoredItem(int id, int box_id, String created_at, String updated_at, String photo_file_name, String photo_content_type, int photo_file_size, String photo_updated_at, String access_token, String status, String donated_to, int shipment_id, String type, String height, String width, String length, String location)",
        "body": [
          "ins(stored_item_photos, (UUID_x1, photo_file_name, photo_content_type, photo_file_size, photo_updated_at, access_token, id, created_at, updated_at))",
          "ins(stored_items, (id, box_id, created_at, updated_at, status, donated_to, shipment_id, type, height, width, length, location))"
        ]
      },
      {
        "signature": "void deleteStoredItem(int id)",
        "body": [
          "del(stored_item_photos, stored_item_photos.stored_item_id=id)",
          "del(stored_items, stored_items.id=id)"
        ]
      },
      {
        "signature": "void updateStoredItem(int id, int box_id, String updated_at, String status, String donated_to, int shipment_id, String type, String height, String width, String length, String location)",
        "body": [
          "upd(stored_items, stored_items.id=id, stored_items.box_id, box_id)",
          "upd(stored_items, stored_items.id=id, stored_items.updated_at, updated_at)",
          "upd(stored_items, stored_items.id=id, stored_items.status, status)",
          "upd(stored_items, stored_items.id=id, stored_items.donated_to, donated_to)",
          "upd(stored_items, stored_items.id=id, stored_items.shipment_id, shipment_id)",
          "upd(stored_items, stored_items.id=id, stored_items.type, type)",
          "upd(stored_items, stored_items.id=id, stored_items.height, height)",
          "upd(stored_items, stored_items.id=id, stored_items.width, width)",
          "upd(stored_items, stored_items.id=id, stored_items.length, length)",
          "upd(stored_items, stored_items.id=id, stored_items.location, location)"
        ]
      },
      {
        "signature": "void updateStoredItemPhoto(int id, String photo_file_name, String photo_content_type, String photo_file_size, String photo_updated_at, String access_token, String updated_at)",
        "body": [
          "upd(stored_item_photos, stored_item_photos.stored_item_id=id, stored_item_photos.photo_file_name, photo_file_name)",
          "upd(stored_item_photos, stored_item_photos.stored_item_id=id, stored_item_photos.photo_content_type, photo_content_type)",
          "upd(stored_item_photos, stored_item_photos.stored_item_id=id, stored_item_photos.photo_file_size, photo_file_size)",
          "upd(stored_item_photos, stored_item_photos.stored_item_id=id, stored_item_photos.photo_updated_at, photo_updated_at)",
          "upd(stored_item_photos, stored_item_photos.stored_item_id=id, stored_item_photos.access_token, access_token)",
          "upd(stored_items, stored_items.id=id, stored_items.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readStoredItem(int id)",
        "body": [
          "pi([stored_items.box_id, stored_item_photos.photo_file_name, stored_item_photos.photo_content_type, stored_item_photos.photo_file_size, stored_item_photos.photo_updated_at, stored_item_photos.access_token, stored_items.status, stored_items.donated_to, stored_items.shipment_id, stored_items.type, stored_items.height, stored_items.width, stored_items.length, stored_items.location, stored_items.creator_id, stored_items.user_id], sigma(stored_items.id=id, join(stored_items, stored_item_photos)))"
        ]
      },
      {
        "signature": "void readStoredItemCreateTime(int id)",
        "body": [
          "pi([stored_items.created_at], sigma(stored_items.id=id, stored_items))"
        ]
      },
      {
        "signature": "void readStoredItemUpdateTime(int id)",
        "body": [
          "pi([stored_items.updated_at], sigma(stored_items.id=id, stored_items))"
        ]
      },
      {
        "signature": "void createSubscription(int id, String start_date, String end_date, int user_id, int duration_in_months, String created_at, String updated_at)",
        "body": [
          "ins(subscriptions, (id, start_date, end_date, user_id, duration_in_months, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteSubscription(int id)",
        "body": [
          "del(subscriptions, subscriptions.id=id)"
        ]
      },
      {
        "signature": "void updateSubscription(int id, String start_date, String end_date, int user_id, int duration_in_months, String updated_at)",
        "body": [
          "upd(subscriptions, subscriptions.id=id, subscriptions.start_date, start_date)",
          "upd(subscriptions, subscriptions.id=id, subscriptions.end_date, end_date)",
          "upd(subscriptions, subscriptions.id=id, subscriptions.user_id, user_id)",
          "upd(subscriptions, subscriptions.id=id, subscriptions.duration_in_months, duration_in_months)",
          "upd(subscriptions, subscriptions.id=id, subscriptions.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readSubscription(int id)",
        "body": [
          "pi([subscriptions.start_date, subscriptions.end_date, subscriptions.user_id, subscriptions.duration_in_months], sigma(subscriptions.id=id, subscriptions))"
        ]
      },
      {
        "signature": "void readSubscriptionCreateTime(int id)",
        "body": [
          "pi([subscriptions.created_at], sigma(subscriptions.id=id, subscriptions))"
        ]
      },
      {
        "signature": "void readSubscriptionUpdateTime(int id)",
        "body": [
          "pi([subscriptions.updated_at], sigma(subscriptions.id=id, subscriptions))"
        ]
      },
      {
        "signature": "void createUser(int id, String email, String encrypted_password, String reset_password_token, String remember_created_at, int sign_in_count, String current_sign_in_at, String last_sign_in_at, String current_sign_in_ip, String last_sign_in_ip, String password_salt, String confirmation_token, String confirmed_at, String confirmation_sent_at, int failed_attempts, String unlock_token, String locked_at, String authentication_token, String created_at, String updated_at, String last_name, String first_name, String beta_user, String signup_comments, String role, String cim_id, int default_payment_profile_id, int default_shipping_address_id, String test_user, int acting_as_user_id, String first_time_signed_up)",
        "body": [
          "ins(users, (id, email, encrypted_password, reset_password_token, remember_created_at, sign_in_count, current_sign_in_at, last_sign_in_at, current_sign_in_ip, last_sign_in_ip, password_salt, confirmation_token, confirmed_at, confirmation_sent_at, failed_attempts, unlock_token, locked_at, authentication_token, created_at, updated_at, last_name, first_name, beta_user, signup_comments, role, cim_id, default_payment_profile_id, default_shipping_address_id, test_user, acting_as_user_id, first_time_signed_up))"
        ]
      },
      {
        "signature": "void deleteUser(int id)",
        "body": [
          "del(users, users.id=id)"
        ]
      },
      {
        "signature": "void updateUserProfile(int id, String email, String last_name, String first_name, String signup_comments, String role, int cim_id, int default_payment_profile_id, int default_shipping_address_id, String first_time_signed_up, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.email, email)",
          "upd(users, users.id=id, users.last_name, last_name)",
          "upd(users, users.id=id, users.first_name, first_name)",
          "upd(users, users.id=id, users.signup_comments, signup_comments)",
          "upd(users, users.id=id, users.role, role)",
          "upd(users, users.id=id, users.cim_id, cim_id)",
          "upd(users, users.id=id, users.default_payment_profile_id, default_payment_profile_id)",
          "upd(users, users.id=id, users.default_shipping_address_id, default_shipping_address_id)",
          "upd(users, users.id=id, users.first_time_signed_up, first_time_signed_up)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserPassword(int id, String encrypted_password, String password_salt, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.encrypted_password, encrypted_password)",
          "upd(users, users.id=id, users.password_salt, password_salt)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserResetPassword(int id, String reset_password_token, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.reset_password_token, reset_password_token)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserSignIn(int id, int sign_in_count, String current_sign_in_at, String last_sign_in_at, String current_sign_in_ip, String last_sign_in_ip, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.sign_in_count, sign_in_count)",
          "upd(users, users.id=id, users.current_sign_in_at, current_sign_in_at)",
          "upd(users, users.id=id, users.last_sign_in_at, last_sign_in_at)",
          "upd(users, users.id=id, users.current_sign_in_ip, current_sign_in_ip)",
          "upd(users, users.id=id, users.last_sign_in_ip, last_sign_in_ip)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserConfirmation(int id, String confirmation_token, String confirmed_at, String confirmation_sent_at, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.confirmation_token, confirmation_token)",
          "upd(users, users.id=id, users.confirmed_at, confirmed_at)",
          "upd(users, users.id=id, users.confirmation_sent_at, confirmation_sent_at)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserLock(int id, int failed_attempts, String unlock_token, String locked_at, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.failed_attempts, failed_attempts)",
          "upd(users, users.id=id, users.unlock_token, unlock_token)",
          "upd(users, users.id=id, users.locked_at, locked_at)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void findUserByEmail(String email)",
        "body": [
          "pi([users.id], sigma(users.email=email, users))"
        ]
      },
      {
        "signature": "void readUser(int id)",
        "body": [
          "pi([users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(users.id=id, users))"
        ]
      },
      {
        "signature": "void readUserCreateTime(int id)",
        "body": [
          "pi([users.created_at], sigma(users.id=id, users))"
        ]
      },
      {
        "signature": "void readUserUpdateTime(int id)",
        "body": [
          "pi([users.updated_at], sigma(users.id=id, users))"
        ]
      },
      {
        "signature": "void readAddressUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(addresses.id=id, join(addresses, users)))"
        ]
      },
      {
        "signature": "void readUserAddress(int id)",
        "body": [
          "pi([addresses.id, addresses.first_name, addresses.last_name, addresses.day_phone, addresses.evening_phone, addresses.address_line_1, addresses.address_line_2, addresses.city, addresses.state, addresses.zip, addresses.address_name, addresses.user_id, addresses.country, addresses.status, addresses.comment, addresses.fedex_validation_status], sigma(users.id=id, join(addresses, users)))"
        ]
      },
      {
        "signature": "void readBoxUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(boxes.id=id, join(boxes, users)))"
        ]
      },
      {
        "signature": "void readUserBox(int id)",
        "body": [
          "pi([boxes.id, boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, boxes.height, boxes.width, boxes.length, boxes.weight, boxes.box_num, boxes.return_requested_at, boxes.location, boxes.inventoried_at, boxes.created_by_id], sigma(users.id=id, join(boxes, users)))"
        ]
      },
      {
        "signature": "void readBoxUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(boxes.id=id, join(boxes, users)))"
        ]
      },
      {
        "signature": "void readUserBox(int id)",
        "body": [
          "pi([boxes.id, boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, boxes.height, boxes.width, boxes.length, boxes.weight, boxes.box_num, boxes.return_requested_at, boxes.location, boxes.inventoried_at, boxes.created_by_id], sigma(users.id=id, join(boxes, users)))"
        ]
      },
      {
        "signature": "void readBoxSubscriptionBox(int id)",
        "body": [
          "pi([boxes.id, boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, boxes.height, boxes.width, boxes.length, boxes.weight, boxes.box_num, boxes.return_requested_at, boxes.location, boxes.inventoried_at, boxes.created_by_id], sigma(boxes_subscriptions.id=id, join(boxes_subscriptions, boxes)))"
        ]
      },
      {
        "signature": "void readBoxBoxSubscription(int id)",
        "body": [
          "pi([boxes_subscriptions.id, boxes_subscriptions.box_id, boxes_subscriptions.subscription_id], sigma(boxes.id=id, join(boxes_subscriptions, boxes)))"
        ]
      },
      {
        "signature": "void readBoxSubscriptionSubscription(int id)",
        "body": [
          "pi([subscriptions.id, subscriptions.start_date, subscriptions.end_date, subscriptions.user_id, subscriptions.duration_in_months], sigma(boxes_subscriptions.id=id, join(boxes_subscriptions, subscriptions)))"
        ]
      },
      {
        "signature": "void readSubscriptionBoxSubscription(int id)",
        "body": [
          "pi([boxes_subscriptions.id, boxes_subscriptions.box_id, boxes_subscriptions.subscription_id], sigma(subscriptions.id=id, join(boxes_subscriptions, subscriptions)))"
        ]
      },
      {
        "signature": "void readCartItemCart(int id)",
        "body": [
          "pi([carts.id, carts.user_id, carts.ordered_at, carts.status, carts.quoted_shipping_cost, carts.quoted_shipping_cost_success], sigma(cart_items.id=id, join(cart_items, carts)))"
        ]
      },
      {
        "signature": "void readCartCartItem(int id)",
        "body": [
          "pi([cart_items.id, cart_items.quantity, cart_items.cart_id, cart_items.product_id, cart_items.committed_months, cart_items.box_id, cart_items.address_id, cart_items.stored_item_id], sigma(carts.id=id, join(cart_items, carts)))"
        ]
      },
      {
        "signature": "void readCartItemProduct(int id)",
        "body": [
          "pi([products.id, products.name, products.price, products.price_comment, products.first_due, products.discountable], sigma(cart_items.id=id, join(cart_items, products)))"
        ]
      },
      {
        "signature": "void readProductCartItem(int id)",
        "body": [
          "pi([cart_items.id, cart_items.quantity, cart_items.cart_id, cart_items.product_id, cart_items.committed_months, cart_items.box_id, cart_items.address_id, cart_items.stored_item_id], sigma(products.id=id, join(cart_items, products)))"
        ]
      },
      {
        "signature": "void readCartItemBox(int id)",
        "body": [
          "pi([boxes.id, boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, boxes.height, boxes.width, boxes.length, boxes.weight, boxes.box_num, boxes.return_requested_at, boxes.location, boxes.inventoried_at, boxes.created_by_id], sigma(cart_items.id=id, join(cart_items, boxes)))"
        ]
      },
      {
        "signature": "void readBoxCartItem(int id)",
        "body": [
          "pi([cart_items.id, cart_items.quantity, cart_items.cart_id, cart_items.product_id, cart_items.committed_months, cart_items.box_id, cart_items.address_id, cart_items.stored_item_id], sigma(boxes.id=id, join(cart_items, boxes)))"
        ]
      },
      {
        "signature": "void readCartItemAddress(int id)",
        "body": [
          "pi([addresses.id, addresses.first_name, addresses.last_name, addresses.day_phone, addresses.evening_phone, addresses.address_line_1, addresses.address_line_2, addresses.city, addresses.state, addresses.zip, addresses.address_name, addresses.user_id, addresses.country, addresses.status, addresses.comment, addresses.fedex_validation_status], sigma(cart_items.id=id, join(cart_items, addresses)))"
        ]
      },
      {
        "signature": "void readAddressCartItem(int id)",
        "body": [
          "pi([cart_items.id, cart_items.quantity, cart_items.cart_id, cart_items.product_id, cart_items.committed_months, cart_items.box_id, cart_items.address_id, cart_items.stored_item_id], sigma(addresses.id=id, join(cart_items, addresses)))"
        ]
      },
      {
        "signature": "void readCartItemStoredItem(int id)",
        "body": [
          "pi([stored_items.id], sigma(cart_items.id=id, join(cart_items, stored_items)))"
        ]
      },
      {
        "signature": "void readStoredItemCartItem(int id)",
        "body": [
          "pi([cart_items.id, cart_items.quantity, cart_items.cart_id, cart_items.product_id, cart_items.committed_months, cart_items.box_id, cart_items.address_id, cart_items.stored_item_id], sigma(stored_items.id=id, join(cart_items, stored_items)))"
        ]
      },
      {
        "signature": "void readCartUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(carts.id=id, join(carts, users)))"
        ]
      },
      {
        "signature": "void readUserCart(int id)",
        "body": [
          "pi([carts.id, carts.user_id, carts.ordered_at, carts.status, carts.quoted_shipping_cost, carts.quoted_shipping_cost_success], sigma(users.id=id, join(carts, users)))"
        ]
      },
      {
        "signature": "void readChargeUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(charges.id=id, join(charges, users)))"
        ]
      },
      {
        "signature": "void readUserCharge(int id)",
        "body": [
          "pi([charges.id, charges.user_id, charges.total_in_cents, charges.product_id, charges.order_id, charges.shipment_id, charges.comments, charges.created_by_admin_id], sigma(users.id=id, join(charges, users)))"
        ]
      },
      {
        "signature": "void readChargeProduct(int id)",
        "body": [
          "pi([products.id, products.name, products.price, products.price_comment, products.first_due, products.discountable], sigma(charges.id=id, join(charges, products)))"
        ]
      },
      {
        "signature": "void readProductCharge(int id)",
        "body": [
          "pi([charges.id, charges.user_id, charges.total_in_cents, charges.product_id, charges.order_id, charges.shipment_id, charges.comments, charges.created_by_admin_id], sigma(products.id=id, join(charges, products)))"
        ]
      },
      {
        "signature": "void readChargeOrder(int id)",
        "body": [
          "pi([orders.id, orders.cart_id, orders.ip_address, orders.user_id, orders.initial_charged_shipping_cost], sigma(charges.id=id, join(charges, orders)))"
        ]
      },
      {
        "signature": "void readOrderCharge(int id)",
        "body": [
          "pi([charges.id, charges.user_id, charges.total_in_cents, charges.product_id, charges.order_id, charges.shipment_id, charges.comments, charges.created_by_admin_id], sigma(orders.id=id, join(charges, orders)))"
        ]
      },
      {
        "signature": "void readChargeShipment(int id)",
        "body": [
          "pi([shipments.id, shipments.box_id, shipments.from_address_id, shipments.to_address_id, shipments.tracking_number, shipments.shipment_label_file_name, shipments.shipment_label_updated_at, shipments.state, shipments.payor, shipments.charge_requested], sigma(charges.id=id, join(charges, shipments)))"
        ]
      },
      {
        "signature": "void readShipmentCharge(int id)",
        "body": [
          "pi([charges.id, charges.user_id, charges.total_in_cents, charges.product_id, charges.order_id, charges.shipment_id, charges.comments, charges.created_by_admin_id], sigma(shipments.id=id, join(charges, shipments)))"
        ]
      },
      {
        "signature": "void readCreditUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(credits.id=id, join(credits, users)))"
        ]
      },
      {
        "signature": "void readUserCredit(int id)",
        "body": [
          "pi([credits.id, credits.amount, credits.user_id, credits.description, credits.created_by_admin_id], sigma(users.id=id, join(credits, users)))"
        ]
      },
      {
        "signature": "void readInvoiceUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(invoices.id=id, join(invoices, users)))"
        ]
      },
      {
        "signature": "void readUserInvoice(int id)",
        "body": [
          "pi([invoices.id, invoices.user_id, invoices.payment_transaction_id, invoices.order_id], sigma(users.id=id, join(invoices, users)))"
        ]
      },
      {
        "signature": "void readInvoicePaymentTransaction(int id)",
        "body": [
          "pi([payment_transactions.id, payment_transactions.order_id, payment_transactions.action, payment_transactions.authorization, payment_transactions.message, payment_transactions.params, payment_transactions.user_id, payment_transactions.payment_profile_id, payment_transactions.status, payment_transactions.storage_payment_processing_record_id, payment_transactions.auth_transaction_id, payment_transactions.credit_id, payment_transactions.submitted_amount], sigma(invoices.id=id, join(invoices, payment_transactions)))"
        ]
      },
      {
        "signature": "void readPaymentTransactionInvoice(int id)",
        "body": [
          "pi([invoices.id, invoices.user_id, invoices.payment_transaction_id, invoices.order_id], sigma(payment_transactions.id=id, join(invoices, payment_transactions)))"
        ]
      },
      {
        "signature": "void readInvoiceOrder(int id)",
        "body": [
          "pi([orders.id, orders.cart_id, orders.ip_address, orders.user_id, orders.initial_charged_shipping_cost], sigma(invoices.id=id, join(invoices, orders)))"
        ]
      },
      {
        "signature": "void readOrderInvoice(int id)",
        "body": [
          "pi([invoices.id, invoices.user_id, invoices.payment_transaction_id, invoices.order_id], sigma(orders.id=id, join(invoices, orders)))"
        ]
      },
      {
        "signature": "void readOrderLineOrder(int id)",
        "body": [
          "pi([orders.id, orders.cart_id, orders.ip_address, orders.user_id, orders.initial_charged_shipping_cost], sigma(order_lines.id=id, join(order_lines, orders)))"
        ]
      },
      {
        "signature": "void readOrderOrderLine(int id)",
        "body": [
          "pi([order_lines.id, order_lines.order_id, order_lines.product_id, order_lines.quantity, order_lines.status, order_lines.committed_months, order_lines.shipping_address_id, order_lines.service_box_id, order_lines.shipment_id, order_lines.service_item_id, order_lines.item_mail_shipping_charge_id, order_lines.amount_paid_at_purchase], sigma(orders.id=id, join(order_lines, orders)))"
        ]
      },
      {
        "signature": "void readOrderLineProduct(int id)",
        "body": [
          "pi([products.id, products.name, products.price, products.price_comment, products.first_due, products.discountable], sigma(order_lines.id=id, join(order_lines, products)))"
        ]
      },
      {
        "signature": "void readProductOrderLine(int id)",
        "body": [
          "pi([order_lines.id, order_lines.order_id, order_lines.product_id, order_lines.quantity, order_lines.status, order_lines.committed_months, order_lines.shipping_address_id, order_lines.service_box_id, order_lines.shipment_id, order_lines.service_item_id, order_lines.item_mail_shipping_charge_id, order_lines.amount_paid_at_purchase], sigma(products.id=id, join(order_lines, products)))"
        ]
      },
      {
        "signature": "void readOrderLineAddress(int id)",
        "body": [
          "pi([addresses.id, addresses.first_name, addresses.last_name, addresses.day_phone, addresses.evening_phone, addresses.address_line_1, addresses.address_line_2, addresses.city, addresses.state, addresses.zip, addresses.address_name, addresses.user_id, addresses.country, addresses.status, addresses.comment, addresses.fedex_validation_status], sigma(order_lines.id=id, join(order_lines, addresses)))"
        ]
      },
      {
        "signature": "void readAddressOrderLine(int id)",
        "body": [
          "pi([order_lines.id, order_lines.order_id, order_lines.product_id, order_lines.quantity, order_lines.status, order_lines.committed_months, order_lines.shipping_address_id, order_lines.service_box_id, order_lines.shipment_id, order_lines.service_item_id, order_lines.item_mail_shipping_charge_id, order_lines.amount_paid_at_purchase], sigma(addresses.id=id, join(order_lines, addresses)))"
        ]
      },
      {
        "signature": "void readOrderLineBox(int id)",
        "body": [
          "pi([boxes.id, boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, boxes.height, boxes.width, boxes.length, boxes.weight, boxes.box_num, boxes.return_requested_at, boxes.location, boxes.inventoried_at, boxes.created_by_id], sigma(order_lines.id=id, join(order_lines, boxes)))"
        ]
      },
      {
        "signature": "void readBoxOrderLine(int id)",
        "body": [
          "pi([order_lines.id, order_lines.order_id, order_lines.product_id, order_lines.quantity, order_lines.status, order_lines.committed_months, order_lines.shipping_address_id, order_lines.service_box_id, order_lines.shipment_id, order_lines.service_item_id, order_lines.item_mail_shipping_charge_id, order_lines.amount_paid_at_purchase], sigma(boxes.id=id, join(order_lines, boxes)))"
        ]
      },
      {
        "signature": "void readOrderLineShipment(int id)",
        "body": [
          "pi([shipments.id, shipments.box_id, shipments.from_address_id, shipments.to_address_id, shipments.tracking_number, shipments.shipment_label_file_name, shipments.shipment_label_updated_at, shipments.state, shipments.payor, shipments.charge_requested], sigma(order_lines.id=id, join(order_lines, shipments)))"
        ]
      },
      {
        "signature": "void readShipmentOrderLine(int id)",
        "body": [
          "pi([order_lines.id, order_lines.order_id, order_lines.product_id, order_lines.quantity, order_lines.status, order_lines.committed_months, order_lines.shipping_address_id, order_lines.service_box_id, order_lines.shipment_id, order_lines.service_item_id, order_lines.item_mail_shipping_charge_id, order_lines.amount_paid_at_purchase], sigma(shipments.id=id, join(order_lines, shipments)))"
        ]
      },
      {
        "signature": "void readOrderLineStoredItem(int id)",
        "body": [
          "pi([stored_items.id], sigma(order_lines.id=id, join(order_lines, stored_items)))"
        ]
      },
      {
        "signature": "void readStoredItemOrderLine(int id)",
        "body": [
          "pi([order_lines.id, order_lines.order_id, order_lines.product_id, order_lines.quantity, order_lines.status, order_lines.committed_months, order_lines.shipping_address_id, order_lines.service_box_id, order_lines.shipment_id, order_lines.service_item_id, order_lines.item_mail_shipping_charge_id, order_lines.amount_paid_at_purchase], sigma(stored_items.id=id, join(order_lines, stored_items)))"
        ]
      },
      {
        "signature": "void readOrderLineCharge(int id)",
        "body": [
          "pi([charges.id, charges.user_id, charges.total_in_cents, charges.product_id, charges.order_id, charges.shipment_id, charges.comments, charges.created_by_admin_id], sigma(order_lines.id=id, join(order_lines, charges)))"
        ]
      },
      {
        "signature": "void readChargeOrderLine(int id)",
        "body": [
          "pi([order_lines.id, order_lines.order_id, order_lines.product_id, order_lines.quantity, order_lines.status, order_lines.committed_months, order_lines.shipping_address_id, order_lines.service_box_id, order_lines.shipment_id, order_lines.service_item_id, order_lines.item_mail_shipping_charge_id, order_lines.amount_paid_at_purchase], sigma(charges.id=id, join(order_lines, charges)))"
        ]
      },
      {
        "signature": "void readOrderCart(int id)",
        "body": [
          "pi([carts.id, carts.user_id, carts.ordered_at, carts.status, carts.quoted_shipping_cost, carts.quoted_shipping_cost_success], sigma(orders.id=id, join(orders, carts)))"
        ]
      },
      {
        "signature": "void readCartOrder(int id)",
        "body": [
          "pi([orders.id, orders.cart_id, orders.ip_address, orders.user_id, orders.initial_charged_shipping_cost], sigma(carts.id=id, join(orders, carts)))"
        ]
      },
      {
        "signature": "void readOrderUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(orders.id=id, join(orders, users)))"
        ]
      },
      {
        "signature": "void readUserOrder(int id)",
        "body": [
          "pi([orders.id, orders.cart_id, orders.ip_address, orders.user_id, orders.initial_charged_shipping_cost], sigma(users.id=id, join(orders, users)))"
        ]
      },
      {
        "signature": "void readPaymentProfileUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(payment_profiles.id=id, join(payment_profiles, users)))"
        ]
      },
      {
        "signature": "void readUserPaymentProfile(int id)",
        "body": [
          "pi([payment_profiles.id, payment_profiles.identifier, payment_profiles.last_four_digits, payment_profiles.user_id, payment_profiles.year, payment_profiles.first_name, payment_profiles.last_name, payment_profiles.billing_address_id, payment_profiles.cc_type, payment_profiles.month, payment_profiles.active], sigma(users.id=id, join(payment_profiles, users)))"
        ]
      },
      {
        "signature": "void readPaymentProfileAddress(int id)",
        "body": [
          "pi([addresses.id, addresses.first_name, addresses.last_name, addresses.day_phone, addresses.evening_phone, addresses.address_line_1, addresses.address_line_2, addresses.city, addresses.state, addresses.zip, addresses.address_name, addresses.user_id, addresses.country, addresses.status, addresses.comment, addresses.fedex_validation_status], sigma(payment_profiles.id=id, join(payment_profiles, addresses)))"
        ]
      },
      {
        "signature": "void readAddressPaymentProfile(int id)",
        "body": [
          "pi([payment_profiles.id, payment_profiles.identifier, payment_profiles.last_four_digits, payment_profiles.user_id, payment_profiles.year, payment_profiles.first_name, payment_profiles.last_name, payment_profiles.billing_address_id, payment_profiles.cc_type, payment_profiles.month, payment_profiles.active], sigma(addresses.id=id, join(payment_profiles, addresses)))"
        ]
      },
      {
        "signature": "void readPaymentTransactionOrder(int id)",
        "body": [
          "pi([orders.id, orders.cart_id, orders.ip_address, orders.user_id, orders.initial_charged_shipping_cost], sigma(payment_transactions.id=id, join(payment_transactions, orders)))"
        ]
      },
      {
        "signature": "void readOrderPaymentTransaction(int id)",
        "body": [
          "pi([payment_transactions.id, payment_transactions.order_id, payment_transactions.action, payment_transactions.authorization, payment_transactions.message, payment_transactions.params, payment_transactions.user_id, payment_transactions.payment_profile_id, payment_transactions.status, payment_transactions.storage_payment_processing_record_id, payment_transactions.auth_transaction_id, payment_transactions.credit_id, payment_transactions.submitted_amount], sigma(orders.id=id, join(payment_transactions, orders)))"
        ]
      },
      {
        "signature": "void readPaymentTransactionUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(payment_transactions.id=id, join(payment_transactions, users)))"
        ]
      },
      {
        "signature": "void readUserPaymentTransaction(int id)",
        "body": [
          "pi([payment_transactions.id, payment_transactions.order_id, payment_transactions.action, payment_transactions.authorization, payment_transactions.message, payment_transactions.params, payment_transactions.user_id, payment_transactions.payment_profile_id, payment_transactions.status, payment_transactions.storage_payment_processing_record_id, payment_transactions.auth_transaction_id, payment_transactions.credit_id, payment_transactions.submitted_amount], sigma(users.id=id, join(payment_transactions, users)))"
        ]
      },
      {
        "signature": "void readPaymentTransactionPaymentProfile(int id)",
        "body": [
          "pi([payment_profiles.id, payment_profiles.identifier, payment_profiles.last_four_digits, payment_profiles.user_id, payment_profiles.year, payment_profiles.first_name, payment_profiles.last_name, payment_profiles.billing_address_id, payment_profiles.cc_type, payment_profiles.month, payment_profiles.active], sigma(payment_transactions.id=id, join(payment_transactions, payment_profiles)))"
        ]
      },
      {
        "signature": "void readPaymentProfilePaymentTransaction(int id)",
        "body": [
          "pi([payment_transactions.id, payment_transactions.order_id, payment_transactions.action, payment_transactions.authorization, payment_transactions.message, payment_transactions.params, payment_transactions.user_id, payment_transactions.payment_profile_id, payment_transactions.status, payment_transactions.storage_payment_processing_record_id, payment_transactions.auth_transaction_id, payment_transactions.credit_id, payment_transactions.submitted_amount], sigma(payment_profiles.id=id, join(payment_transactions, payment_profiles)))"
        ]
      },
      {
        "signature": "void readPaymentTransactionStoragePaymentProcessingRecord(int id)",
        "body": [
          "pi([storage_payment_processing_records.id, storage_payment_processing_records.generated_by_user_id, storage_payment_processing_records.as_of_date], sigma(payment_transactions.id=id, join(payment_transactions, storage_payment_processing_records)))"
        ]
      },
      {
        "signature": "void readStoragePaymentProcessingRecordPaymentTransaction(int id)",
        "body": [
          "pi([payment_transactions.id, payment_transactions.order_id, payment_transactions.action, payment_transactions.authorization, payment_transactions.message, payment_transactions.params, payment_transactions.user_id, payment_transactions.payment_profile_id, payment_transactions.status, payment_transactions.storage_payment_processing_record_id, payment_transactions.auth_transaction_id, payment_transactions.credit_id, payment_transactions.submitted_amount], sigma(storage_payment_processing_records.id=id, join(payment_transactions, storage_payment_processing_records)))"
        ]
      },
      {
        "signature": "void readPaymentTransactionCredit(int id)",
        "body": [
          "pi([credits.id, credits.amount, credits.user_id, credits.description, credits.created_by_admin_id], sigma(payment_transactions.id=id, join(payment_transactions, credits)))"
        ]
      },
      {
        "signature": "void readCreditPaymentTransaction(int id)",
        "body": [
          "pi([payment_transactions.id, payment_transactions.order_id, payment_transactions.action, payment_transactions.authorization, payment_transactions.message, payment_transactions.params, payment_transactions.user_id, payment_transactions.payment_profile_id, payment_transactions.status, payment_transactions.storage_payment_processing_record_id, payment_transactions.auth_transaction_id, payment_transactions.credit_id, payment_transactions.submitted_amount], sigma(credits.id=id, join(payment_transactions, credits)))"
        ]
      },
      {
        "signature": "void readPhotoStoredItem(int id)",
        "body": [
          "pi([stored_items.id], sigma(photos.id=id, join(photos, stored_items)))"
        ]
      },
      {
        "signature": "void readStoredItemPhoto(int id)",
        "body": [
          "pi([photos.id, photos.stored_item_id, photos.data_file_name, photos.data_content_type, photos.data_file_size, photos.data_updated_at], sigma(stored_items.id=id, join(photos, stored_items)))"
        ]
      },
      {
        "signature": "void readRentalAgreementVersionUserUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(rental_agreement_versions_users.id=id, join(rental_agreement_versions_users, users)))"
        ]
      },
      {
        "signature": "void readUserRentalAgreementVersionUser(int id)",
        "body": [
          "pi([rental_agreement_versions_users.id, rental_agreement_versions_users.user_id, rental_agreement_versions_users.rental_agreement_version_id], sigma(users.id=id, join(rental_agreement_versions_users, users)))"
        ]
      },
      {
        "signature": "void readRentalAgreementVersionUserRentalAgreementVersion(int id)",
        "body": [
          "pi([rental_agreement_versions.id, rental_agreement_versions.agreement_text], sigma(rental_agreement_versions_users.id=id, join(rental_agreement_versions_users, rental_agreement_versions)))"
        ]
      },
      {
        "signature": "void readRentalAgreementVersionRentalAgreementVersionUser(int id)",
        "body": [
          "pi([rental_agreement_versions_users.id, rental_agreement_versions_users.user_id, rental_agreement_versions_users.rental_agreement_version_id], sigma(rental_agreement_versions.id=id, join(rental_agreement_versions_users, rental_agreement_versions)))"
        ]
      },
      {
        "signature": "void readShipmentBox(int id)",
        "body": [
          "pi([boxes.id, boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, boxes.height, boxes.width, boxes.length, boxes.weight, boxes.box_num, boxes.return_requested_at, boxes.location, boxes.inventoried_at, boxes.created_by_id], sigma(shipments.id=id, join(shipments, boxes)))"
        ]
      },
      {
        "signature": "void readBoxShipment(int id)",
        "body": [
          "pi([shipments.id, shipments.box_id, shipments.from_address_id, shipments.to_address_id, shipments.tracking_number, shipments.shipment_label_file_name, shipments.shipment_label_updated_at, shipments.state, shipments.payor, shipments.charge_requested], sigma(boxes.id=id, join(shipments, boxes)))"
        ]
      },
      {
        "signature": "void readShipmentAddress(int id)",
        "body": [
          "pi([addresses.id, addresses.first_name, addresses.last_name, addresses.day_phone, addresses.evening_phone, addresses.address_line_1, addresses.address_line_2, addresses.city, addresses.state, addresses.zip, addresses.address_name, addresses.user_id, addresses.country, addresses.status, addresses.comment, addresses.fedex_validation_status], sigma(shipments.id=id, join(shipments, addresses)))"
        ]
      },
      {
        "signature": "void readAddressShipment(int id)",
        "body": [
          "pi([shipments.id, shipments.box_id, shipments.from_address_id, shipments.to_address_id, shipments.tracking_number, shipments.shipment_label_file_name, shipments.shipment_label_updated_at, shipments.state, shipments.payor, shipments.charge_requested], sigma(addresses.id=id, join(shipments, addresses)))"
        ]
      },
      {
        "signature": "void readShipmentAddress(int id)",
        "body": [
          "pi([addresses.id, addresses.first_name, addresses.last_name, addresses.day_phone, addresses.evening_phone, addresses.address_line_1, addresses.address_line_2, addresses.city, addresses.state, addresses.zip, addresses.address_name, addresses.user_id, addresses.country, addresses.status, addresses.comment, addresses.fedex_validation_status], sigma(shipments.id=id, join(shipments, addresses)))"
        ]
      },
      {
        "signature": "void readAddressShipment(int id)",
        "body": [
          "pi([shipments.id, shipments.box_id, shipments.from_address_id, shipments.to_address_id, shipments.tracking_number, shipments.shipment_label_file_name, shipments.shipment_label_updated_at, shipments.state, shipments.payor, shipments.charge_requested], sigma(addresses.id=id, join(shipments, addresses)))"
        ]
      },
      {
        "signature": "void readStorageChargeProcessingRecordUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(storage_charge_processing_records.id=id, join(storage_charge_processing_records, users)))"
        ]
      },
      {
        "signature": "void readUserStorageChargeProcessingRecord(int id)",
        "body": [
          "pi([storage_charge_processing_records.id, storage_charge_processing_records.generated_by_user_id, storage_charge_processing_records.as_of_date, storage_charge_processing_records.locked_for_editing], sigma(users.id=id, join(storage_charge_processing_records, users)))"
        ]
      },
      {
        "signature": "void readStorageChargeBox(int id)",
        "body": [
          "pi([boxes.id, boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, boxes.height, boxes.width, boxes.length, boxes.weight, boxes.box_num, boxes.return_requested_at, boxes.location, boxes.inventoried_at, boxes.created_by_id], sigma(storage_charges.id=id, join(storage_charges, boxes)))"
        ]
      },
      {
        "signature": "void readBoxStorageCharge(int id)",
        "body": [
          "pi([storage_charges.id, storage_charges.box_id, storage_charges.charge_id, storage_charges.start_date, storage_charges.end_date, storage_charges.storage_charge_processing_record_id], sigma(boxes.id=id, join(storage_charges, boxes)))"
        ]
      },
      {
        "signature": "void readStorageChargeCharge(int id)",
        "body": [
          "pi([charges.id, charges.user_id, charges.total_in_cents, charges.product_id, charges.order_id, charges.shipment_id, charges.comments, charges.created_by_admin_id], sigma(storage_charges.id=id, join(storage_charges, charges)))"
        ]
      },
      {
        "signature": "void readChargeStorageCharge(int id)",
        "body": [
          "pi([storage_charges.id, storage_charges.box_id, storage_charges.charge_id, storage_charges.start_date, storage_charges.end_date, storage_charges.storage_charge_processing_record_id], sigma(charges.id=id, join(storage_charges, charges)))"
        ]
      },
      {
        "signature": "void readStorageChargeStorageChargeProcessingRecord(int id)",
        "body": [
          "pi([storage_charge_processing_records.id, storage_charge_processing_records.generated_by_user_id, storage_charge_processing_records.as_of_date, storage_charge_processing_records.locked_for_editing], sigma(storage_charges.id=id, join(storage_charges, storage_charge_processing_records)))"
        ]
      },
      {
        "signature": "void readStorageChargeProcessingRecordStorageCharge(int id)",
        "body": [
          "pi([storage_charges.id, storage_charges.box_id, storage_charges.charge_id, storage_charges.start_date, storage_charges.end_date, storage_charges.storage_charge_processing_record_id], sigma(storage_charge_processing_records.id=id, join(storage_charges, storage_charge_processing_records)))"
        ]
      },
      {
        "signature": "void readStoragePaymentProcessingRecordUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(storage_payment_processing_records.id=id, join(storage_payment_processing_records, users)))"
        ]
      },
      {
        "signature": "void readUserStoragePaymentProcessingRecord(int id)",
        "body": [
          "pi([storage_payment_processing_records.id, storage_payment_processing_records.generated_by_user_id, storage_payment_processing_records.as_of_date], sigma(users.id=id, join(storage_payment_processing_records, users)))"
        ]
      },
      {
        "signature": "void readStoredItemTagStoredItem(int id)",
        "body": [
          "pi([stored_items.id], sigma(stored_item_tags.id=id, join(stored_item_tags, stored_items)))"
        ]
      },
      {
        "signature": "void readStoredItemStoredItemTag(int id)",
        "body": [
          "pi([stored_item_tags.id, stored_item_tags.stored_item_id, stored_item_tags.tag], sigma(stored_items.id=id, join(stored_item_tags, stored_items)))"
        ]
      },
      {
        "signature": "void readStoredItemBox(int id)",
        "body": [
          "pi([boxes.id, boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, boxes.height, boxes.width, boxes.length, boxes.weight, boxes.box_num, boxes.return_requested_at, boxes.location, boxes.inventoried_at, boxes.created_by_id], sigma(stored_items.id=id, join(stored_items, boxes)))"
        ]
      },
      {
        "signature": "void readBoxStoredItem(int id)",
        "body": [
          "pi([stored_items.id], sigma(boxes.id=id, join(stored_items, boxes)))"
        ]
      },
      {
        "signature": "void readStoredItemShipment(int id)",
        "body": [
          "pi([shipments.id, shipments.box_id, shipments.from_address_id, shipments.to_address_id, shipments.tracking_number, shipments.shipment_label_file_name, shipments.shipment_label_updated_at, shipments.state, shipments.payor, shipments.charge_requested], sigma(stored_items.id=id, join(stored_items, shipments)))"
        ]
      },
      {
        "signature": "void readShipmentStoredItem(int id)",
        "body": [
          "pi([stored_items.id], sigma(shipments.id=id, join(stored_items, shipments)))"
        ]
      },
      {
        "signature": "void readSubscriptionUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(subscriptions.id=id, join(subscriptions, users)))"
        ]
      },
      {
        "signature": "void readUserSubscription(int id)",
        "body": [
          "pi([subscriptions.id, subscriptions.start_date, subscriptions.end_date, subscriptions.user_id, subscriptions.duration_in_months], sigma(users.id=id, join(subscriptions, users)))"
        ]
      },
      {
        "signature": "void readUserPaymentProfile(int id)",
        "body": [
          "pi([payment_profiles.id, payment_profiles.identifier, payment_profiles.last_four_digits, payment_profiles.user_id, payment_profiles.year, payment_profiles.first_name, payment_profiles.last_name, payment_profiles.billing_address_id, payment_profiles.cc_type, payment_profiles.month, payment_profiles.active], sigma(users.id=id, join(users, payment_profiles)))"
        ]
      },
      {
        "signature": "void readPaymentProfileUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(payment_profiles.id=id, join(users, payment_profiles)))"
        ]
      },
      {
        "signature": "void readUserAddress(int id)",
        "body": [
          "pi([addresses.id, addresses.first_name, addresses.last_name, addresses.day_phone, addresses.evening_phone, addresses.address_line_1, addresses.address_line_2, addresses.city, addresses.state, addresses.zip, addresses.address_name, addresses.user_id, addresses.country, addresses.status, addresses.comment, addresses.fedex_validation_status], sigma(users.id=id, join(users, addresses)))"
        ]
      },
      {
        "signature": "void readAddressUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(addresses.id=id, join(users, addresses)))"
        ]
      }
    ]
  },
  "target": {
    "relations": [
      "addresses(int addresses.id, String addresses.first_name, String addresses.last_name, String addresses.day_phone, String addresses.evening_phone, String addresses.address_line_1, String addresses.address_line_2, String addresses.city, String addresses.state, String addresses.zip, String addresses.created_at, String addresses.updated_at, String addresses.address_name, int addresses.user_id, String addresses.country, String addresses.status, String addresses.comment, String addresses.fedex_validation_status)",
      "boxes(int boxes.id, int boxes.assigned_to_user_id, String boxes.created_at, String boxes.updated_at, int boxes.ordering_order_line_id, String boxes.status, String boxes.box_type, String boxes.description, String boxes.inventorying_status, int boxes.inventorying_order_line_id, String boxes.received_at, String boxes.weight, int boxes.box_num, String boxes.return_requested_at, String boxes.inventoried_at, int boxes.created_by_id)",
      "boxes_subscriptions(int boxes_subscriptions.id, int boxes_subscriptions.box_id, int boxes_subscriptions.subscription_id)",
      "cart_items(int cart_items.id, int cart_items.quantity, int cart_items.cart_id, int cart_items.product_id, String cart_items.created_at, String cart_items.updated_at, int cart_items.committed_months, int cart_items.box_id, int cart_items.address_id, int cart_items.stored_item_id)",
      "carts(int carts.id, int carts.user_id, String carts.created_at, String carts.updated_at, String carts.ordered_at, String carts.status, String carts.quoted_shipping_cost, String carts.quoted_shipping_cost_success)",
      "charges(int charges.id, int charges.user_id, String charges.total_in_cents, int charges.product_id, String charges.created_at, String charges.updated_at, int charges.order_id, int charges.shipment_id, String charges.comments, int charges.created_by_admin_id)",
      "credits(int credits.id, String credits.amount, int credits.user_id, String credits.created_at, String credits.updated_at, String credits.description, int credits.created_by_admin_id)",
      "dimension_sets(int dimension_sets.id, String dimension_sets.height, String dimension_sets.width, String dimension_sets.length, String dimension_sets.location, String dimension_sets.measured_object_id, String dimension_sets.measured_object_type)",
      "furniture_items_subscriptions(int furniture_items_subscriptions.id, int furniture_items_subscriptions.furniture_item_id, int furniture_items_subscriptions.subscription_id)",
      "interested_people(int interested_people.id, String interested_people.email, String interested_people.created_at, String interested_people.updated_at)",
      "invoices(int invoices.id, int invoices.user_id, int invoices.payment_transaction_id, int invoices.order_id, String invoices.created_at, String invoices.updated_at)",
      "marketing_hits(int marketing_hits.id, String marketing_hits.source, String marketing_hits.created_at, String marketing_hits.updated_at)",
      "order_lines(int order_lines.id, int order_lines.order_id, int order_lines.product_id, int order_lines.quantity, String order_lines.status, String order_lines.created_at, String order_lines.updated_at, int order_lines.committed_months, int order_lines.shipping_address_id, int order_lines.service_box_id, int order_lines.shipment_id, int order_lines.service_item_id, int order_lines.item_mail_shipping_charge_id, String order_lines.amount_paid_at_purchase)",
      "orders(int orders.id, int orders.cart_id, String orders.ip_address, int orders.user_id, String orders.created_at, String orders.updated_at, String orders.initial_charged_shipping_cost)",
      "payment_profiles(int payment_profiles.id, String payment_profiles.identifier, String payment_profiles.last_four_digits, int payment_profiles.user_id, String payment_profiles.created_at, String payment_profiles.updated_at, int payment_profiles.year, String payment_profiles.first_name, String payment_profiles.last_name, int payment_profiles.billing_address_id, String payment_profiles.cc_type, String payment_profiles.month, String payment_profiles.active)",
      "payment_transactions(int payment_transactions.id, int payment_transactions.order_id, String payment_transactions.action, String payment_transactions.authorization, String payment_transactions.message, String payment_transactions.params, int payment_transactions.user_id, String payment_transactions.created_at, String payment_transactions.updated_at, int payment_transactions.payment_profile_id, String payment_transactions.status, int payment_transactions.storage_payment_processing_record_id, String payment_transactions.auth_transaction_id, int payment_transactions.credit_id, String payment_transactions.submitted_amount)",
      "photos(int photos.id, int photos.stored_item_id, String photos.created_at, String photos.updated_at, String photos.data_file_name, String photos.data_content_type, int photos.data_file_size, String photos.data_updated_at)",
      "products(int products.id, String products.name, String products.price, String products.created_at, String products.updated_at, String products.price_comment, String products.first_due, String products.discountable)",
      "rental_agreement_versions(int rental_agreement_versions.id, String rental_agreement_versions.agreement_text, String rental_agreement_versions.created_at, String rental_agreement_versions.updated_at)",
      "rental_agreement_versions_users(int rental_agreement_versions_users.id, int rental_agreement_versions_users.user_id, int rental_agreement_versions_users.rental_agreement_version_id, String rental_agreement_versions_users.created_at, String rental_agreement_versions_users.updated_at)",
      "shipments(int shipments.id, int shipments.box_id, int shipments.from_address_id, int shipments.to_address_id, String shipments.tracking_number, String shipments.created_at, String shipments.updated_at, String shipments.shipment_label_file_name, String shipments.shipment_label_updated_at, String shipments.state, String shipments.payor, String shipments.charge_requested)",
      "storage_charge_processing_records(int storage_charge_processing_records.id, int storage_charge_processing_records.generated_by_user_id, String storage_charge_processing_records.as_of_date, String storage_charge_processing_records.created_at, String storage_charge_processing_records.updated_at, String storage_charge_processing_records.locked_for_editing)",
      "storage_charges(int storage_charges.id, int storage_charges.box_id, int storage_charges.charge_id, String storage_charges.start_date, String storage_charges.end_date, int storage_charges.storage_charge_processing_record_id)",
      "storage_payment_processing_records(int storage_payment_processing_records.id, int storage_payment_processing_records.generated_by_user_id, String storage_payment_processing_records.as_of_date, String storage_payment_processing_records.created_at, String storage_payment_processing_records.updated_at)",
      "stored_item_photos(int stored_item_photos.id, String stored_item_photos.photo_file_name, String stored_item_photos.photo_content_type, int stored_item_photos.photo_file_size, String stored_item_photos.photo_updated_at, String stored_item_photos.access_token, String stored_item_photos.stored_item_id, String stored_item_photos.created_at, String stored_item_photos.updated_at)",
      "stored_item_tags(int stored_item_tags.id, int stored_item_tags.stored_item_id, String stored_item_tags.tag, String stored_item_tags.created_at, String stored_item_tags.updated_at)",
      "stored_items(int stored_items.id, int stored_items.box_id, String stored_items.created_at, String stored_items.updated_at, String stored_items.status, String stored_items.donated_to, int stored_items.shipment_id, String stored_items.type, String stored_items.creator_id, String stored_items.user_id)",
      "subscriptions(int subscriptions.id, String subscriptions.start_date, String subscriptions.end_date, int subscriptions.user_id, int subscriptions.duration_in_months, String subscriptions.created_at, String subscriptions.updated_at)",
      "users(int users.id, String users.email, String users.encrypted_password, String users.reset_password_token, String users.remember_created_at, int users.sign_in_count, String users.current_sign_in_at, String users.last_sign_in_at, String users.current_sign_in_ip, String users.last_sign_in_ip, String users.password_salt, String users.confirmation_token, String users.confirmed_at, String users.confirmation_sent_at, int users.failed_attempts, String users.unlock_token, String users.locked_at, String users.authentication_token, String users.created_at, String users.updated_at, String users.last_name, String users.first_name, String users.beta_user, String users.signup_comments, String users.role, String users.cim_id, int users.default_payment_profile_id, int users.default_shipping_address_id, String users.test_user, int users.acting_as_user_id, String users.first_time_signed_up)"
    ],
    "primarykeys": [
      "addresses(addresses.id)",
      "boxes(boxes.id)",
      "boxes_subscriptions(boxes_subscriptions.id)",
      "cart_items(cart_items.id)",
      "carts(carts.id)",
      "charges(charges.id)",
      "credits(credits.id)",
      "dimension_sets(dimension_sets.id)",
      "interested_people(interested_people.id)",
      "invoices(invoices.id)",
      "marketing_hits(marketing_hits.id)",
      "order_lines(order_lines.id)",
      "orders(orders.id)",
      "payment_profiles(payment_profiles.id)",
      "payment_transactions(payment_transactions.id)",
      "photos(photos.id)",
      "products(products.id)",
      "rental_agreement_versions(rental_agreement_versions.id)",
      "rental_agreement_versions_users(rental_agreement_versions_users.id)",
      "shipments(shipments.id)",
      "storage_charge_processing_records(storage_charge_processing_records.id)",
      "storage_charges(storage_charges.id)",
      "storage_payment_processing_records(storage_payment_processing_records.id)",
      "stored_item_photos(stored_item_photos.id)",
      "stored_item_tags(stored_item_tags.id)",
      "stored_items(stored_items.id)",
      "subscriptions(subscriptions.id)",
      "users(users.id)"
    ],
    "foreignkeys": [
      "addresses(addresses.user_id) -> users(users.id)",
      "boxes(boxes.assigned_to_user_id) -> users(users.id)",
      "boxes(boxes.created_by_id) -> users(users.id)",
      "boxes_subscriptions(boxes_subscriptions.box_id) -> boxes(boxes.id)",
      "boxes_subscriptions(boxes_subscriptions.subscription_id) -> subscriptions(subscriptions.id)",
      "cart_items(cart_items.cart_id) -> carts(carts.id)",
      "cart_items(cart_items.product_id) -> products(products.id)",
      "cart_items(cart_items.box_id) -> boxes(boxes.id)",
      "cart_items(cart_items.address_id) -> addresses(addresses.id)",
      "cart_items(cart_items.stored_item_id) -> stored_items(stored_items.id)",
      "carts(carts.user_id) -> users(users.id)",
      "dimension_sets(dimension_sets.measured_object_id) -> stored_items(stored_items.id)",
      "dimension_sets(dimension_sets.measured_object_id) -> boxes(boxes.id)",
      "charges(charges.user_id) -> users(users.id)",
      "charges(charges.product_id) -> products(products.id)",
      "charges(charges.order_id) -> orders(orders.id)",
      "charges(charges.shipment_id) -> shipments(shipments.id)",
      "credits(credits.user_id) -> users(users.id)",
      "invoices(invoices.user_id) -> users(users.id)",
      "invoices(invoices.payment_transaction_id) -> payment_transactions(payment_transactions.id)",
      "invoices(invoices.order_id) -> orders(orders.id)",
      "order_lines(order_lines.order_id) -> orders(orders.id)",
      "order_lines(order_lines.product_id) -> products(products.id)",
      "order_lines(order_lines.shipping_address_id) -> addresses(addresses.id)",
      "order_lines(order_lines.service_box_id) -> boxes(boxes.id)",
      "order_lines(order_lines.shipment_id) -> shipments(shipments.id)",
      "order_lines(order_lines.service_item_id) -> stored_items(stored_items.id)",
      "order_lines(order_lines.item_mail_shipping_charge_id) -> charges(charges.id)",
      "orders(orders.cart_id) -> carts(carts.id)",
      "orders(orders.user_id) -> users(users.id)",
      "payment_profiles(payment_profiles.user_id) -> users(users.id)",
      "payment_profiles(payment_profiles.billing_address_id) -> addresses(addresses.id)",
      "payment_transactions(payment_transactions.order_id) -> orders(orders.id)",
      "payment_transactions(payment_transactions.user_id) -> users(users.id)",
      "payment_transactions(payment_transactions.payment_profile_id) -> payment_profiles(payment_profiles.id)",
      "payment_transactions(payment_transactions.storage_payment_processing_record_id) -> storage_payment_processing_records(storage_payment_processing_records.id)",
      "payment_transactions(payment_transactions.credit_id) -> credits(credits.id)",
      "photos(photos.stored_item_id) -> stored_items(stored_items.id)",
      "rental_agreement_versions_users(rental_agreement_versions_users.user_id) -> users(users.id)",
      "rental_agreement_versions_users(rental_agreement_versions_users.rental_agreement_version_id) -> rental_agreement_versions(rental_agreement_versions.id)",
      "shipments(shipments.box_id) -> boxes(boxes.id)",
      "shipments(shipments.from_address_id) -> addresses(addresses.id)",
      "shipments(shipments.to_address_id) -> addresses(addresses.id)",
      "storage_charge_processing_records(storage_charge_processing_records.generated_by_user_id) -> users(users.id)",
      "storage_charges(storage_charges.box_id) -> boxes(boxes.id)",
      "storage_charges(storage_charges.charge_id) -> charges(charges.id)",
      "storage_charges(storage_charges.storage_charge_processing_record_id) -> storage_charge_processing_records(storage_charge_processing_records.id)",
      "storage_payment_processing_records(storage_payment_processing_records.generated_by_user_id) -> users(users.id)",
      "stored_item_photos(stored_item_photos.stored_item_id) -> stored_items(stored_items.id)",
      "stored_item_tags(stored_item_tags.stored_item_id) -> stored_items(stored_items.id)",
      "stored_items(stored_items.box_id) -> boxes(boxes.id)",
      "stored_items(stored_items.shipment_id) -> shipments(shipments.id)",
      "subscriptions(subscriptions.user_id) -> users(users.id)",
      "users(users.default_payment_profile_id) -> payment_profiles(payment_profiles.id)",
      "users(users.default_shipping_address_id) -> addresses(addresses.id)"
    ],
    "transactions": [
      {
        "signature": "void createAddress(int id, String first_name, String last_name, String day_phone, String evening_phone, String address_line_1, String address_line_2, String city, String state, String zip, String created_at, String updated_at, String address_name, int user_id, String country, String status, String comment, String fedex_validation_status)",
        "body": [
          "ins(addresses, (id, first_name, last_name, day_phone, evening_phone, address_line_1, address_line_2, city, state, zip, created_at, updated_at, address_name, user_id, country, status, comment, fedex_validation_status))"
        ]
      },
      {
        "signature": "void deleteAddress(int id)",
        "body": [
          "del(addresses, addresses.id=id)"
        ]
      },
      {
        "signature": "void updateAddress(int id, String first_name, String last_name, String day_phone, String evening_phone, String address_line_1, String address_line_2, String city, String state, String zip, String updated_at, String address_name, int user_id, String country, String status, String comment, String fedex_validation_status)",
        "body": [
          "upd(addresses, addresses.id=id, addresses.first_name, first_name)",
          "upd(addresses, addresses.id=id, addresses.last_name, last_name)",
          "upd(addresses, addresses.id=id, addresses.day_phone, day_phone)",
          "upd(addresses, addresses.id=id, addresses.evening_phone, evening_phone)",
          "upd(addresses, addresses.id=id, addresses.address_line_1, address_line_1)",
          "upd(addresses, addresses.id=id, addresses.address_line_2, address_line_2)",
          "upd(addresses, addresses.id=id, addresses.city, city)",
          "upd(addresses, addresses.id=id, addresses.state, state)",
          "upd(addresses, addresses.id=id, addresses.zip, zip)",
          "upd(addresses, addresses.id=id, addresses.updated_at, updated_at)",
          "upd(addresses, addresses.id=id, addresses.address_name, address_name)",
          "upd(addresses, addresses.id=id, addresses.user_id, user_id)",
          "upd(addresses, addresses.id=id, addresses.country, country)",
          "upd(addresses, addresses.id=id, addresses.status, status)",
          "upd(addresses, addresses.id=id, addresses.comment, comment)",
          "upd(addresses, addresses.id=id, addresses.fedex_validation_status, fedex_validation_status)"
        ]
      },
      {
        "signature": "void readAddress(int id)",
        "body": [
          "pi([addresses.first_name, addresses.last_name, addresses.day_phone, addresses.evening_phone, addresses.address_line_1, addresses.address_line_2, addresses.city, addresses.state, addresses.zip, addresses.address_name, addresses.user_id, addresses.country, addresses.status, addresses.comment, addresses.fedex_validation_status], sigma(addresses.id=id, addresses))"
        ]
      },
      {
        "signature": "void readAddressCreateTime(int id)",
        "body": [
          "pi([addresses.created_at], sigma(addresses.id=id, addresses))"
        ]
      },
      {
        "signature": "void readAddressUpdateTime(int id)",
        "body": [
          "pi([addresses.updated_at], sigma(addresses.id=id, addresses))"
        ]
      },
      {
        "signature": "void createBox(int id, int assigned_to_user_id, String created_at, String updated_at, int ordering_order_line_id, String status, String box_type, String description, String inventorying_status, int inventorying_order_line_id, String received_at, String height, String width, String length, String weight, int box_num, String return_requested_at, String location, String inventoried_at, int created_by_id)",
        "body": [
          "ins(boxes, (id, assigned_to_user_id, created_at, updated_at, ordering_order_line_id, status, box_type, description, inventorying_status, inventorying_order_line_id, received_at, weight, box_num, return_requested_at, inventoried_at, created_by_id))",
          "ins(dimension_sets, (UUID_x1, height, width, length, location, id, UUID_Box))"
        ]
      },
      {
        "signature": "void deleteBox(int id)",
        "body": [
          "del(boxes, boxes.id=id)"
        ]
      },
      {
        "signature": "void updateBox(int id, int assigned_to_user_id, String updated_at, int ordering_order_line_id, String status, String box_type, String description, String inventorying_status, int inventorying_order_line_id, String received_at, String height, String width, String length, String weight, int box_num, String return_requested_at, String location, String inventoried_at, int created_by_id)",
        "body": [
          "upd(boxes, boxes.id=id, boxes.assigned_to_user_id, assigned_to_user_id)",
          "upd(boxes, boxes.id=id, boxes.updated_at, updated_at)",
          "upd(boxes, boxes.id=id, boxes.ordering_order_line_id, ordering_order_line_id)",
          "upd(boxes, boxes.id=id, boxes.status, status)",
          "upd(boxes, boxes.id=id, boxes.box_type, box_type)",
          "upd(boxes, boxes.id=id, boxes.description, description)",
          "upd(boxes, boxes.id=id, boxes.inventorying_status, inventorying_status)",
          "upd(boxes, boxes.id=id, boxes.inventorying_order_line_id, inventorying_order_line_id)",
          "upd(boxes, boxes.id=id, boxes.received_at, received_at)",
          "upd(boxes, boxes.id=id, boxes.height, height)",
          "upd(boxes, boxes.id=id, boxes.width, width)",
          "upd(boxes, boxes.id=id, boxes.length, length)",
          "upd(boxes, boxes.id=id, boxes.weight, weight)",
          "upd(boxes, boxes.id=id, boxes.box_num, box_num)",
          "upd(boxes, boxes.id=id, boxes.return_requested_at, return_requested_at)",
          "upd(boxes, boxes.id=id, boxes.location, location)",
          "upd(boxes, boxes.id=id, boxes.inventoried_at, inventoried_at)",
          "upd(boxes, boxes.id=id, boxes.created_by_id, created_by_id)"
        ]
      },
      {
        "signature": "void readBox(int id)",
        "body": [
          "pi([boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, dimension_sets.height, dimension_sets.width, dimension_sets.length, boxes.weight, boxes.box_num, boxes.return_requested_at, dimension_sets.location, boxes.inventoried_at, boxes.created_by_id], sigma(dimension_sets.measured_object_type=UUID_StoreItem, sigma(boxes.id=id, join(dimension_sets, boxes))))"
        ]
      },
      {
        "signature": "void readBoxCreateTime(int id)",
        "body": [
          "pi([boxes.created_at], sigma(boxes.id=id, boxes))"
        ]
      },
      {
        "signature": "void readBoxUpdateTime(int id)",
        "body": [
          "pi([boxes.updated_at], sigma(boxes.id=id, boxes))"
        ]
      },
      {
        "signature": "void createBoxSubscription(int id, int box_id, int subscription_id)",
        "body": [
          "ins(boxes_subscriptions, (id, box_id, subscription_id))"
        ]
      },
      {
        "signature": "void deleteBoxSubscription(int id)",
        "body": [
          "del(boxes_subscriptions, boxes_subscriptions.id=id)"
        ]
      },
      {
        "signature": "void updateBoxSubscription(int id, int box_id, int subscription_id)",
        "body": [
          "upd(boxes_subscriptions, boxes_subscriptions.id=id, boxes_subscriptions.box_id, box_id)",
          "upd(boxes_subscriptions, boxes_subscriptions.id=id, boxes_subscriptions.subscription_id, subscription_id)"
        ]
      },
      {
        "signature": "void readBoxSubscription(int id)",
        "body": [
          "pi([boxes_subscriptions.box_id, boxes_subscriptions.subscription_id], sigma(boxes_subscriptions.id=id, boxes_subscriptions))"
        ]
      },
      {
        "signature": "void createCartItem(int id, int quantity, int cart_id, int product_id, String created_at, String updated_at, int committed_months, int box_id, int address_id, int stored_item_id)",
        "body": [
          "ins(cart_items, (id, quantity, cart_id, product_id, created_at, updated_at, committed_months, box_id, address_id, stored_item_id))"
        ]
      },
      {
        "signature": "void deleteCartItem(int id)",
        "body": [
          "del(cart_items, cart_items.id=id)"
        ]
      },
      {
        "signature": "void updateCartItem(int id, int quantity, int cart_id, int product_id, String updated_at, int committed_months, int box_id, int address_id, int stored_item_id)",
        "body": [
          "upd(cart_items, cart_items.id=id, cart_items.quantity, quantity)",
          "upd(cart_items, cart_items.id=id, cart_items.cart_id, cart_id)",
          "upd(cart_items, cart_items.id=id, cart_items.product_id, product_id)",
          "upd(cart_items, cart_items.id=id, cart_items.updated_at, updated_at)",
          "upd(cart_items, cart_items.id=id, cart_items.committed_months, committed_months)",
          "upd(cart_items, cart_items.id=id, cart_items.box_id, box_id)",
          "upd(cart_items, cart_items.id=id, cart_items.address_id, address_id)",
          "upd(cart_items, cart_items.id=id, cart_items.stored_item_id, stored_item_id)"
        ]
      },
      {
        "signature": "void readCartItem(int id)",
        "body": [
          "pi([cart_items.quantity, cart_items.cart_id, cart_items.product_id, cart_items.committed_months, cart_items.box_id, cart_items.address_id, cart_items.stored_item_id], sigma(cart_items.id=id, cart_items))"
        ]
      },
      {
        "signature": "void readCartItemCreateTime(int id)",
        "body": [
          "pi([cart_items.created_at], sigma(cart_items.id=id, cart_items))"
        ]
      },
      {
        "signature": "void readCartItemUpdateTime(int id)",
        "body": [
          "pi([cart_items.updated_at], sigma(cart_items.id=id, cart_items))"
        ]
      },
      {
        "signature": "void createCart(int id, int user_id, String created_at, String updated_at, String ordered_at, String status, String quoted_shipping_cost, String quoted_shipping_cost_success)",
        "body": [
          "ins(carts, (id, user_id, created_at, updated_at, ordered_at, status, quoted_shipping_cost, quoted_shipping_cost_success))"
        ]
      },
      {
        "signature": "void deleteCart(int id)",
        "body": [
          "del(carts, carts.id=id)"
        ]
      },
      {
        "signature": "void updateCart(int id, int user_id, String updated_at, String ordered_at, String status, String quoted_shipping_cost, String quoted_shipping_cost_success)",
        "body": [
          "upd(carts, carts.id=id, carts.user_id, user_id)",
          "upd(carts, carts.id=id, carts.updated_at, updated_at)",
          "upd(carts, carts.id=id, carts.ordered_at, ordered_at)",
          "upd(carts, carts.id=id, carts.status, status)",
          "upd(carts, carts.id=id, carts.quoted_shipping_cost, quoted_shipping_cost)",
          "upd(carts, carts.id=id, carts.quoted_shipping_cost_success, quoted_shipping_cost_success)"
        ]
      },
      {
        "signature": "void readCart(int id)",
        "body": [
          "pi([carts.user_id, carts.ordered_at, carts.status, carts.quoted_shipping_cost, carts.quoted_shipping_cost_success], sigma(carts.id=id, carts))"
        ]
      },
      {
        "signature": "void readCartCreateTime(int id)",
        "body": [
          "pi([carts.created_at], sigma(carts.id=id, carts))"
        ]
      },
      {
        "signature": "void readCartUpdateTime(int id)",
        "body": [
          "pi([carts.updated_at], sigma(carts.id=id, carts))"
        ]
      },
      {
        "signature": "void createCharge(int id, int user_id, String total_in_cents, int product_id, String created_at, String updated_at, int order_id, int shipment_id, String comments, int created_by_admin_id)",
        "body": [
          "ins(charges, (id, user_id, total_in_cents, product_id, created_at, updated_at, order_id, shipment_id, comments, created_by_admin_id))"
        ]
      },
      {
        "signature": "void deleteCharge(int id)",
        "body": [
          "del(charges, charges.id=id)"
        ]
      },
      {
        "signature": "void updateCharge(int id, int user_id, String total_in_cents, int product_id, String updated_at, int order_id, int shipment_id, String comments, int created_by_admin_id)",
        "body": [
          "upd(charges, charges.id=id, charges.user_id, user_id)",
          "upd(charges, charges.id=id, charges.total_in_cents, total_in_cents)",
          "upd(charges, charges.id=id, charges.product_id, product_id)",
          "upd(charges, charges.id=id, charges.updated_at, updated_at)",
          "upd(charges, charges.id=id, charges.order_id, order_id)",
          "upd(charges, charges.id=id, charges.shipment_id, shipment_id)",
          "upd(charges, charges.id=id, charges.comments, comments)",
          "upd(charges, charges.id=id, charges.created_by_admin_id, created_by_admin_id)"
        ]
      },
      {
        "signature": "void readCharge(int id)",
        "body": [
          "pi([charges.user_id, charges.total_in_cents, charges.product_id, charges.order_id, charges.shipment_id, charges.comments, charges.created_by_admin_id], sigma(charges.id=id, charges))"
        ]
      },
      {
        "signature": "void readChargeCreateTime(int id)",
        "body": [
          "pi([charges.created_at], sigma(charges.id=id, charges))"
        ]
      },
      {
        "signature": "void readChargeUpdateTime(int id)",
        "body": [
          "pi([charges.updated_at], sigma(charges.id=id, charges))"
        ]
      },
      {
        "signature": "void createCredit(int id, String amount, int user_id, String created_at, String updated_at, String description, int created_by_admin_id)",
        "body": [
          "ins(credits, (id, amount, user_id, created_at, updated_at, description, created_by_admin_id))"
        ]
      },
      {
        "signature": "void deleteCredit(int id)",
        "body": [
          "del(credits, credits.id=id)"
        ]
      },
      {
        "signature": "void updateCredit(int id, String amount, int user_id, String updated_at, String description, int created_by_admin_id)",
        "body": [
          "upd(credits, credits.id=id, credits.amount, amount)",
          "upd(credits, credits.id=id, credits.user_id, user_id)",
          "upd(credits, credits.id=id, credits.updated_at, updated_at)",
          "upd(credits, credits.id=id, credits.description, description)",
          "upd(credits, credits.id=id, credits.created_by_admin_id, created_by_admin_id)"
        ]
      },
      {
        "signature": "void readCredit(int id)",
        "body": [
          "pi([credits.amount, credits.user_id, credits.description, credits.created_by_admin_id], sigma(credits.id=id, credits))"
        ]
      },
      {
        "signature": "void readCreditCreateTime(int id)",
        "body": [
          "pi([credits.created_at], sigma(credits.id=id, credits))"
        ]
      },
      {
        "signature": "void readCreditUpdateTime(int id)",
        "body": [
          "pi([credits.updated_at], sigma(credits.id=id, credits))"
        ]
      },
      {
        "signature": "void createInterestedPeople(int id, String email, String created_at, String updated_at)",
        "body": [
          "ins(interested_people, (id, email, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteInterestedPeople(int id)",
        "body": [
          "del(interested_people, interested_people.id=id)"
        ]
      },
      {
        "signature": "void updateInterestedPeople(int id, String email, String updated_at)",
        "body": [
          "upd(interested_people, interested_people.id=id, interested_people.email, email)",
          "upd(interested_people, interested_people.id=id, interested_people.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readInterestedPeople(int id)",
        "body": [
          "pi([interested_people.email], sigma(interested_people.id=id, interested_people))"
        ]
      },
      {
        "signature": "void readInterestedPeopleCreateTime(int id)",
        "body": [
          "pi([interested_people.created_at], sigma(interested_people.id=id, interested_people))"
        ]
      },
      {
        "signature": "void readInterestedPeopleUpdateTime(int id)",
        "body": [
          "pi([interested_people.updated_at], sigma(interested_people.id=id, interested_people))"
        ]
      },
      {
        "signature": "void createInvoice(int id, int user_id, int payment_transaction_id, int order_id, String created_at, String updated_at)",
        "body": [
          "ins(invoices, (id, user_id, payment_transaction_id, order_id, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteInvoice(int id)",
        "body": [
          "del(invoices, invoices.id=id)"
        ]
      },
      {
        "signature": "void updateInvoice(int id, int user_id, int payment_transaction_id, int order_id, String updated_at)",
        "body": [
          "upd(invoices, invoices.id=id, invoices.user_id, user_id)",
          "upd(invoices, invoices.id=id, invoices.payment_transaction_id, payment_transaction_id)",
          "upd(invoices, invoices.id=id, invoices.order_id, order_id)",
          "upd(invoices, invoices.id=id, invoices.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readInvoice(int id)",
        "body": [
          "pi([invoices.user_id, invoices.payment_transaction_id, invoices.order_id], sigma(invoices.id=id, invoices))"
        ]
      },
      {
        "signature": "void readInvoiceCreateTime(int id)",
        "body": [
          "pi([invoices.created_at], sigma(invoices.id=id, invoices))"
        ]
      },
      {
        "signature": "void readInvoiceUpdateTime(int id)",
        "body": [
          "pi([invoices.updated_at], sigma(invoices.id=id, invoices))"
        ]
      },
      {
        "signature": "void createMarketingHit(int id, String source, String created_at, String updated_at)",
        "body": [
          "ins(marketing_hits, (id, source, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteMarketingHit(int id)",
        "body": [
          "del(marketing_hits, marketing_hits.id=id)"
        ]
      },
      {
        "signature": "void updateMarketingHit(int id, String source, String updated_at)",
        "body": [
          "upd(marketing_hits, marketing_hits.id=id, marketing_hits.source, source)",
          "upd(marketing_hits, marketing_hits.id=id, marketing_hits.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readMarketingHit(int id)",
        "body": [
          "pi([marketing_hits.source], sigma(marketing_hits.id=id, marketing_hits))"
        ]
      },
      {
        "signature": "void readMarketingHitCreateTime(int id)",
        "body": [
          "pi([marketing_hits.created_at], sigma(marketing_hits.id=id, marketing_hits))"
        ]
      },
      {
        "signature": "void readMarketingHitUpdateTime(int id)",
        "body": [
          "pi([marketing_hits.updated_at], sigma(marketing_hits.id=id, marketing_hits))"
        ]
      },
      {
        "signature": "void createOrderLine(int id, int order_id, int product_id, int quantity, String status, String created_at, String updated_at, int committed_months, int shipping_address_id, int service_box_id, int shipment_id, int service_item_id, int item_mail_shipping_charge_id, String amount_paid_at_purchase)",
        "body": [
          "ins(order_lines, (id, order_id, product_id, quantity, status, created_at, updated_at, committed_months, shipping_address_id, service_box_id, shipment_id, service_item_id, item_mail_shipping_charge_id, amount_paid_at_purchase))"
        ]
      },
      {
        "signature": "void deleteOrderLine(int id)",
        "body": [
          "del(order_lines, order_lines.id=id)"
        ]
      },
      {
        "signature": "void updateOrderLine(int id, int order_id, int product_id, int quantity, String status, String updated_at, int committed_months, int shipping_address_id, int service_box_id, int shipment_id, int service_item_id, int item_mail_shipping_charge_id, String amount_paid_at_purchase)",
        "body": [
          "upd(order_lines, order_lines.id=id, order_lines.order_id, order_id)",
          "upd(order_lines, order_lines.id=id, order_lines.product_id, product_id)",
          "upd(order_lines, order_lines.id=id, order_lines.quantity, quantity)",
          "upd(order_lines, order_lines.id=id, order_lines.status, status)",
          "upd(order_lines, order_lines.id=id, order_lines.updated_at, updated_at)",
          "upd(order_lines, order_lines.id=id, order_lines.committed_months, committed_months)",
          "upd(order_lines, order_lines.id=id, order_lines.shipping_address_id, shipping_address_id)",
          "upd(order_lines, order_lines.id=id, order_lines.service_box_id, service_box_id)",
          "upd(order_lines, order_lines.id=id, order_lines.shipment_id, shipment_id)",
          "upd(order_lines, order_lines.id=id, order_lines.service_item_id, service_item_id)",
          "upd(order_lines, order_lines.id=id, order_lines.item_mail_shipping_charge_id, item_mail_shipping_charge_id)",
          "upd(order_lines, order_lines.id=id, order_lines.amount_paid_at_purchase, amount_paid_at_purchase)"
        ]
      },
      {
        "signature": "void readOrderLine(int id)",
        "body": [
          "pi([order_lines.order_id, order_lines.product_id, order_lines.quantity, order_lines.status, order_lines.committed_months, order_lines.shipping_address_id, order_lines.service_box_id, order_lines.shipment_id, order_lines.service_item_id, order_lines.item_mail_shipping_charge_id, order_lines.amount_paid_at_purchase], sigma(order_lines.id=id, order_lines))"
        ]
      },
      {
        "signature": "void readOrderLineCreateTime(int id)",
        "body": [
          "pi([order_lines.created_at], sigma(order_lines.id=id, order_lines))"
        ]
      },
      {
        "signature": "void readOrderLineUpdateTime(int id)",
        "body": [
          "pi([order_lines.updated_at], sigma(order_lines.id=id, order_lines))"
        ]
      },
      {
        "signature": "void createOrder(int id, int cart_id, String ip_address, int user_id, String created_at, String updated_at, String initial_charged_shipping_cost)",
        "body": [
          "ins(orders, (id, cart_id, ip_address, user_id, created_at, updated_at, initial_charged_shipping_cost))"
        ]
      },
      {
        "signature": "void deleteOrder(int id)",
        "body": [
          "del(orders, orders.id=id)"
        ]
      },
      {
        "signature": "void updateOrder(int id, int cart_id, String ip_address, int user_id, String updated_at, String initial_charged_shipping_cost)",
        "body": [
          "upd(orders, orders.id=id, orders.cart_id, cart_id)",
          "upd(orders, orders.id=id, orders.ip_address, ip_address)",
          "upd(orders, orders.id=id, orders.user_id, user_id)",
          "upd(orders, orders.id=id, orders.updated_at, updated_at)",
          "upd(orders, orders.id=id, orders.initial_charged_shipping_cost, initial_charged_shipping_cost)"
        ]
      },
      {
        "signature": "void readOrder(int id)",
        "body": [
          "pi([orders.cart_id, orders.ip_address, orders.user_id, orders.initial_charged_shipping_cost], sigma(orders.id=id, orders))"
        ]
      },
      {
        "signature": "void readOrderCreateTime(int id)",
        "body": [
          "pi([orders.created_at], sigma(orders.id=id, orders))"
        ]
      },
      {
        "signature": "void readOrderUpdateTime(int id)",
        "body": [
          "pi([orders.updated_at], sigma(orders.id=id, orders))"
        ]
      },
      {
        "signature": "void createPaymentProfile(int id, String identifier, String last_four_digits, int user_id, String created_at, String updated_at, int year, String first_name, String last_name, int billing_address_id, String cc_type, String month, String active)",
        "body": [
          "ins(payment_profiles, (id, identifier, last_four_digits, user_id, created_at, updated_at, year, first_name, last_name, billing_address_id, cc_type, month, active))"
        ]
      },
      {
        "signature": "void deletePaymentProfile(int id)",
        "body": [
          "del(payment_profiles, payment_profiles.id=id)"
        ]
      },
      {
        "signature": "void updatePaymentProfile(int id, String identifier, String last_four_digits, int user_id, String updated_at, int year, String first_name, String last_name, int billing_address_id, String cc_type, String month, String active)",
        "body": [
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.identifier, identifier)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.last_four_digits, last_four_digits)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.user_id, user_id)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.updated_at, updated_at)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.year, year)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.first_name, first_name)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.last_name, last_name)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.billing_address_id, billing_address_id)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.cc_type, cc_type)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.month, month)",
          "upd(payment_profiles, payment_profiles.id=id, payment_profiles.active, active)"
        ]
      },
      {
        "signature": "void readPaymentProfile(int id)",
        "body": [
          "pi([payment_profiles.identifier, payment_profiles.last_four_digits, payment_profiles.user_id, payment_profiles.year, payment_profiles.first_name, payment_profiles.last_name, payment_profiles.billing_address_id, payment_profiles.cc_type, payment_profiles.month, payment_profiles.active], sigma(payment_profiles.id=id, payment_profiles))"
        ]
      },
      {
        "signature": "void readPaymentProfileCreateTime(int id)",
        "body": [
          "pi([payment_profiles.created_at], sigma(payment_profiles.id=id, payment_profiles))"
        ]
      },
      {
        "signature": "void readPaymentProfileUpdateTime(int id)",
        "body": [
          "pi([payment_profiles.updated_at], sigma(payment_profiles.id=id, payment_profiles))"
        ]
      },
      {
        "signature": "void createPaymentTransaction(int id, int order_id, String action, String authorization, String message, String params, int user_id, String created_at, String updated_at, int payment_profile_id, String status, int storage_payment_processing_record_id, String auth_transaction_id, int credit_id, String submitted_amount)",
        "body": [
          "ins(payment_transactions, (id, order_id, action, authorization, message, params, user_id, created_at, updated_at, payment_profile_id, status, storage_payment_processing_record_id, auth_transaction_id, credit_id, submitted_amount))"
        ]
      },
      {
        "signature": "void deletePaymentTransaction(int id)",
        "body": [
          "del(payment_transactions, payment_transactions.id=id)"
        ]
      },
      {
        "signature": "void updatePaymentTransaction(int id, int order_id, String action, String authorization, String message, String params, int user_id, String updated_at, int payment_profile_id, String status, int storage_payment_processing_record_id, String auth_transaction_id, int credit_id, String submitted_amount)",
        "body": [
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.order_id, order_id)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.action, action)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.authorization, authorization)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.message, message)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.params, params)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.user_id, user_id)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.updated_at, updated_at)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.payment_profile_id, payment_profile_id)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.status, status)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.storage_payment_processing_record_id, storage_payment_processing_record_id)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.auth_transaction_id, auth_transaction_id)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.credit_id, credit_id)",
          "upd(payment_transactions, payment_transactions.id=id, payment_transactions.submitted_amount, submitted_amount)"
        ]
      },
      {
        "signature": "void readPaymentTransaction(int id)",
        "body": [
          "pi([payment_transactions.order_id, payment_transactions.action, payment_transactions.authorization, payment_transactions.message, payment_transactions.params, payment_transactions.user_id, payment_transactions.payment_profile_id, payment_transactions.status, payment_transactions.storage_payment_processing_record_id, payment_transactions.auth_transaction_id, payment_transactions.credit_id, payment_transactions.submitted_amount], sigma(payment_transactions.id=id, payment_transactions))"
        ]
      },
      {
        "signature": "void readPaymentTransactionCreateTime(int id)",
        "body": [
          "pi([payment_transactions.created_at], sigma(payment_transactions.id=id, payment_transactions))"
        ]
      },
      {
        "signature": "void readPaymentTransactionUpdateTime(int id)",
        "body": [
          "pi([payment_transactions.updated_at], sigma(payment_transactions.id=id, payment_transactions))"
        ]
      },
      {
        "signature": "void createPhoto(int id, int stored_item_id, String created_at, String updated_at, String data_file_name, String data_content_type, int data_file_size, String data_updated_at)",
        "body": [
          "ins(photos, (id, stored_item_id, created_at, updated_at, data_file_name, data_content_type, data_file_size, data_updated_at))"
        ]
      },
      {
        "signature": "void deletePhoto(int id)",
        "body": [
          "del(photos, photos.id=id)"
        ]
      },
      {
        "signature": "void updatePhoto(int id, int stored_item_id, String updated_at, String data_file_name, String data_content_type, int data_file_size, String data_updated_at)",
        "body": [
          "upd(photos, photos.id=id, photos.stored_item_id, stored_item_id)",
          "upd(photos, photos.id=id, photos.updated_at, updated_at)",
          "upd(photos, photos.id=id, photos.data_file_name, data_file_name)",
          "upd(photos, photos.id=id, photos.data_content_type, data_content_type)",
          "upd(photos, photos.id=id, photos.data_file_size, data_file_size)",
          "upd(photos, photos.id=id, photos.data_updated_at, data_updated_at)"
        ]
      },
      {
        "signature": "void readPhoto(int id)",
        "body": [
          "pi([photos.stored_item_id, photos.data_file_name, photos.data_content_type, photos.data_file_size, photos.data_updated_at], sigma(photos.id=id, photos))"
        ]
      },
      {
        "signature": "void readPhotoCreateTime(int id)",
        "body": [
          "pi([photos.created_at], sigma(photos.id=id, photos))"
        ]
      },
      {
        "signature": "void readPhotoUpdateTime(int id)",
        "body": [
          "pi([photos.updated_at], sigma(photos.id=id, photos))"
        ]
      },
      {
        "signature": "void createProduct(int id, String name, String price, String created_at, String updated_at, String price_comment, String first_due, String discountable)",
        "body": [
          "ins(products, (id, name, price, created_at, updated_at, price_comment, first_due, discountable))"
        ]
      },
      {
        "signature": "void deleteProduct(int id)",
        "body": [
          "del(products, products.id=id)"
        ]
      },
      {
        "signature": "void updateProduct(int id, String name, String price, String updated_at, String price_comment, String first_due, String discountable)",
        "body": [
          "upd(products, products.id=id, products.name, name)",
          "upd(products, products.id=id, products.price, price)",
          "upd(products, products.id=id, products.updated_at, updated_at)",
          "upd(products, products.id=id, products.price_comment, price_comment)",
          "upd(products, products.id=id, products.first_due, first_due)",
          "upd(products, products.id=id, products.discountable, discountable)"
        ]
      },
      {
        "signature": "void readProduct(int id)",
        "body": [
          "pi([products.name, products.price, products.price_comment, products.first_due, products.discountable], sigma(products.id=id, products))"
        ]
      },
      {
        "signature": "void readProductCreateTime(int id)",
        "body": [
          "pi([products.created_at], sigma(products.id=id, products))"
        ]
      },
      {
        "signature": "void readProductUpdateTime(int id)",
        "body": [
          "pi([products.updated_at], sigma(products.id=id, products))"
        ]
      },
      {
        "signature": "void createRentalAgreementVersion(int id, String agreement_text, String created_at, String updated_at)",
        "body": [
          "ins(rental_agreement_versions, (id, agreement_text, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteRentalAgreementVersion(int id)",
        "body": [
          "del(rental_agreement_versions, rental_agreement_versions.id=id)"
        ]
      },
      {
        "signature": "void updateRentalAgreementVersion(int id, String agreement_text, String updated_at)",
        "body": [
          "upd(rental_agreement_versions, rental_agreement_versions.id=id, rental_agreement_versions.agreement_text, agreement_text)",
          "upd(rental_agreement_versions, rental_agreement_versions.id=id, rental_agreement_versions.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readRentalAgreementVersion(int id)",
        "body": [
          "pi([rental_agreement_versions.agreement_text], sigma(rental_agreement_versions.id=id, rental_agreement_versions))"
        ]
      },
      {
        "signature": "void readRentalAgreementVersionCreateTime(int id)",
        "body": [
          "pi([rental_agreement_versions.created_at], sigma(rental_agreement_versions.id=id, rental_agreement_versions))"
        ]
      },
      {
        "signature": "void readRentalAgreementVersionUpdateTime(int id)",
        "body": [
          "pi([rental_agreement_versions.updated_at], sigma(rental_agreement_versions.id=id, rental_agreement_versions))"
        ]
      },
      {
        "signature": "void createRentalAgreementVersionUser(int id, int user_id, int rental_agreement_version_id, String created_at, String updated_at)",
        "body": [
          "ins(rental_agreement_versions_users, (id, user_id, rental_agreement_version_id, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteRentalAgreementVersionUser(int id)",
        "body": [
          "del(rental_agreement_versions_users, rental_agreement_versions_users.id=id)"
        ]
      },
      {
        "signature": "void updateRentalAgreementVersionUser(int id, int user_id, int rental_agreement_version_id, String updated_at)",
        "body": [
          "upd(rental_agreement_versions_users, rental_agreement_versions_users.id=id, rental_agreement_versions_users.user_id, user_id)",
          "upd(rental_agreement_versions_users, rental_agreement_versions_users.id=id, rental_agreement_versions_users.rental_agreement_version_id, rental_agreement_version_id)",
          "upd(rental_agreement_versions_users, rental_agreement_versions_users.id=id, rental_agreement_versions_users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readRentalAgreementVersionUser(int id)",
        "body": [
          "pi([rental_agreement_versions_users.user_id, rental_agreement_versions_users.rental_agreement_version_id], sigma(rental_agreement_versions_users.id=id, rental_agreement_versions_users))"
        ]
      },
      {
        "signature": "void readRentalAgreementVersionUserCreateTime(int id)",
        "body": [
          "pi([rental_agreement_versions_users.created_at], sigma(rental_agreement_versions_users.id=id, rental_agreement_versions_users))"
        ]
      },
      {
        "signature": "void readRentalAgreementVersionUserUpdateTime(int id)",
        "body": [
          "pi([rental_agreement_versions_users.updated_at], sigma(rental_agreement_versions_users.id=id, rental_agreement_versions_users))"
        ]
      },
      {
        "signature": "void createShipment(int id, int box_id, int from_address_id, int to_address_id, String tracking_number, String created_at, String updated_at, String shipment_label_file_name, String shipment_label_updated_at, String state, String payor, String charge_requested)",
        "body": [
          "ins(shipments, (id, box_id, from_address_id, to_address_id, tracking_number, created_at, updated_at, shipment_label_file_name, shipment_label_updated_at, state, payor, charge_requested))"
        ]
      },
      {
        "signature": "void deleteShipment(int id)",
        "body": [
          "del(shipments, shipments.id=id)"
        ]
      },
      {
        "signature": "void updateShipment(int id, int box_id, int from_address_id, int to_address_id, String tracking_number, String updated_at, String shipment_label_file_name, String shipment_label_updated_at, String state, String payor, String charge_requested)",
        "body": [
          "upd(shipments, shipments.id=id, shipments.box_id, box_id)",
          "upd(shipments, shipments.id=id, shipments.from_address_id, from_address_id)",
          "upd(shipments, shipments.id=id, shipments.to_address_id, to_address_id)",
          "upd(shipments, shipments.id=id, shipments.tracking_number, tracking_number)",
          "upd(shipments, shipments.id=id, shipments.updated_at, updated_at)",
          "upd(shipments, shipments.id=id, shipments.shipment_label_file_name, shipment_label_file_name)",
          "upd(shipments, shipments.id=id, shipments.shipment_label_updated_at, shipment_label_updated_at)",
          "upd(shipments, shipments.id=id, shipments.state, state)",
          "upd(shipments, shipments.id=id, shipments.payor, payor)",
          "upd(shipments, shipments.id=id, shipments.charge_requested, charge_requested)"
        ]
      },
      {
        "signature": "void readShipment(int id)",
        "body": [
          "pi([shipments.box_id, shipments.from_address_id, shipments.to_address_id, shipments.tracking_number, shipments.shipment_label_file_name, shipments.shipment_label_updated_at, shipments.state, shipments.payor, shipments.charge_requested], sigma(shipments.id=id, shipments))"
        ]
      },
      {
        "signature": "void readShipmentCreateTime(int id)",
        "body": [
          "pi([shipments.created_at], sigma(shipments.id=id, shipments))"
        ]
      },
      {
        "signature": "void readShipmentUpdateTime(int id)",
        "body": [
          "pi([shipments.updated_at], sigma(shipments.id=id, shipments))"
        ]
      },
      {
        "signature": "void createStorageChargeProcessingRecord(int id, int generated_by_user_id, String as_of_date, String created_at, String updated_at, String locked_for_editing)",
        "body": [
          "ins(storage_charge_processing_records, (id, generated_by_user_id, as_of_date, created_at, updated_at, locked_for_editing))"
        ]
      },
      {
        "signature": "void deleteStorageChargeProcessingRecord(int id)",
        "body": [
          "del(storage_charge_processing_records, storage_charge_processing_records.id=id)"
        ]
      },
      {
        "signature": "void updateStorageChargeProcessingRecord(int id, int generated_by_user_id, String as_of_date, String updated_at, String locked_for_editing)",
        "body": [
          "upd(storage_charge_processing_records, storage_charge_processing_records.id=id, storage_charge_processing_records.generated_by_user_id, generated_by_user_id)",
          "upd(storage_charge_processing_records, storage_charge_processing_records.id=id, storage_charge_processing_records.as_of_date, as_of_date)",
          "upd(storage_charge_processing_records, storage_charge_processing_records.id=id, storage_charge_processing_records.updated_at, updated_at)",
          "upd(storage_charge_processing_records, storage_charge_processing_records.id=id, storage_charge_processing_records.locked_for_editing, locked_for_editing)"
        ]
      },
      {
        "signature": "void readStorageChargeProcessingRecord(int id)",
        "body": [
          "pi([storage_charge_processing_records.generated_by_user_id, storage_charge_processing_records.as_of_date, storage_charge_processing_records.locked_for_editing], sigma(storage_charge_processing_records.id=id, storage_charge_processing_records))"
        ]
      },
      {
        "signature": "void readStorageChargeProcessingRecordCreateTime(int id)",
        "body": [
          "pi([storage_charge_processing_records.created_at], sigma(storage_charge_processing_records.id=id, storage_charge_processing_records))"
        ]
      },
      {
        "signature": "void readStorageChargeProcessingRecordUpdateTime(int id)",
        "body": [
          "pi([storage_charge_processing_records.updated_at], sigma(storage_charge_processing_records.id=id, storage_charge_processing_records))"
        ]
      },
      {
        "signature": "void createStorageCharge(int id, int box_id, int charge_id, String start_date, String end_date, int storage_charge_processing_record_id)",
        "body": [
          "ins(storage_charges, (id, box_id, charge_id, start_date, end_date, storage_charge_processing_record_id))"
        ]
      },
      {
        "signature": "void deleteStorageCharge(int id)",
        "body": [
          "del(storage_charges, storage_charges.id=id)"
        ]
      },
      {
        "signature": "void updateStorageCharge(int id, int box_id, int charge_id, String start_date, String end_date, int storage_charge_processing_record_id)",
        "body": [
          "upd(storage_charges, storage_charges.id=id, storage_charges.box_id, box_id)",
          "upd(storage_charges, storage_charges.id=id, storage_charges.charge_id, charge_id)",
          "upd(storage_charges, storage_charges.id=id, storage_charges.start_date, start_date)",
          "upd(storage_charges, storage_charges.id=id, storage_charges.end_date, end_date)",
          "upd(storage_charges, storage_charges.id=id, storage_charges.storage_charge_processing_record_id, storage_charge_processing_record_id)"
        ]
      },
      {
        "signature": "void readStorageCharge(int id)",
        "body": [
          "pi([storage_charges.box_id, storage_charges.charge_id, storage_charges.start_date, storage_charges.end_date, storage_charges.storage_charge_processing_record_id], sigma(storage_charges.id=id, storage_charges))"
        ]
      },
      {
        "signature": "void createStoragePaymentProcessingRecord(int id, int generated_by_user_id, String as_of_date, String created_at, String updated_at)",
        "body": [
          "ins(storage_payment_processing_records, (id, generated_by_user_id, as_of_date, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteStoragePaymentProcessingRecord(int id)",
        "body": [
          "del(storage_payment_processing_records, storage_payment_processing_records.id=id)"
        ]
      },
      {
        "signature": "void updateStoragePaymentProcessingRecord(int id, int generated_by_user_id, String as_of_date, String updated_at)",
        "body": [
          "upd(storage_payment_processing_records, storage_payment_processing_records.id=id, storage_payment_processing_records.generated_by_user_id, generated_by_user_id)",
          "upd(storage_payment_processing_records, storage_payment_processing_records.id=id, storage_payment_processing_records.as_of_date, as_of_date)",
          "upd(storage_payment_processing_records, storage_payment_processing_records.id=id, storage_payment_processing_records.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readStoragePaymentProcessingRecord(int id)",
        "body": [
          "pi([storage_payment_processing_records.generated_by_user_id, storage_payment_processing_records.as_of_date], sigma(storage_payment_processing_records.id=id, storage_payment_processing_records))"
        ]
      },
      {
        "signature": "void readStoragePaymentProcessingRecordCreateTime(int id)",
        "body": [
          "pi([storage_payment_processing_records.created_at], sigma(storage_payment_processing_records.id=id, storage_payment_processing_records))"
        ]
      },
      {
        "signature": "void readStoragePaymentProcessingRecordUpdateTime(int id)",
        "body": [
          "pi([storage_payment_processing_records.updated_at], sigma(storage_payment_processing_records.id=id, storage_payment_processing_records))"
        ]
      },
      {
        "signature": "void createStoredItemTag(int id, int stored_item_id, String tag, String created_at, String updated_at)",
        "body": [
          "ins(stored_item_tags, (id, stored_item_id, tag, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteStoredItemTag(int id)",
        "body": [
          "del(stored_item_tags, stored_item_tags.id=id)"
        ]
      },
      {
        "signature": "void updateStoredItemTag(int id, int stored_item_id, String tag, String updated_at)",
        "body": [
          "upd(stored_item_tags, stored_item_tags.id=id, stored_item_tags.stored_item_id, stored_item_id)",
          "upd(stored_item_tags, stored_item_tags.id=id, stored_item_tags.tag, tag)",
          "upd(stored_item_tags, stored_item_tags.id=id, stored_item_tags.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readStoredItemTag(int id)",
        "body": [
          "pi([stored_item_tags.stored_item_id, stored_item_tags.tag], sigma(stored_item_tags.id=id, stored_item_tags))"
        ]
      },
      {
        "signature": "void readStoredItemTagCreateTime(int id)",
        "body": [
          "pi([stored_item_tags.created_at], sigma(stored_item_tags.id=id, stored_item_tags))"
        ]
      },
      {
        "signature": "void readStoredItemTagUpdateTime(int id)",
        "body": [
          "pi([stored_item_tags.updated_at], sigma(stored_item_tags.id=id, stored_item_tags))"
        ]
      },
      {
        "signature": "void createFurnitureItemSubscription(int id, int furniture_item_id, int subscription_id)",
        "body": [
          "ins(furniture_items_subscriptions, (id, furniture_item_id, subscription_id))"
        ]
      },
      {
        "signature": "void deleteFurnitureItemSubscription(int id)",
        "body": [
          "del(furniture_items_subscriptions, furniture_items_subscriptions.id=id)"
        ]
      },
      {
        "signature": "void updateFurnitureItemSubscription(int id, int furniture_item_id, int subscription_id)",
        "body": [
          "upd(furniture_items_subscriptions, furniture_items_subscriptions.id=id, furniture_items_subscriptions.furniture_item_id, furniture_item_id)",
          "upd(furniture_items_subscriptions, furniture_items_subscriptions.id=id, furniture_items_subscriptions.subscription_id, subscription_id)"
        ]
      },
      {
        "signature": "void readFurnitureItemSubscription(int id)",
        "body": [
          "pi([furniture_items_subscriptions.furniture_item_id, furniture_items_subscriptions.subscription_id], sigma(furniture_items_subscriptions.id=id, furniture_items_subscriptions))"
        ]
      },
      {
        "signature": "void createStoredItem(int id, int box_id, String created_at, String updated_at, String photo_file_name, String photo_content_type, int photo_file_size, String photo_updated_at, String access_token, String status, String donated_to, int shipment_id, String type, String height, String width, String length, String location, int creator_id, int user_id)",
        "body": [
          "ins(stored_item_photos, (UUID_x2, photo_file_name, photo_content_type, photo_file_size, photo_updated_at, access_token, id, created_at, updated_at))",
          "ins(stored_items, (id, box_id, created_at, updated_at, status, donated_to, shipment_id, type, creator_id, user_id))",
          "ins(dimension_sets, (UUID_x3, height, width, length, location, id, UUID_StoredItem))"
        ]
      },
      {
        "signature": "void deleteStoredItem(int id)",
        "body": [
          "del(stored_item_photos, stored_item_photos.stored_item_id=id)",
          "del(stored_items, stored_items.id=id)"
        ]
      },
      {
        "signature": "void updateStoredItem(int id, int box_id, String updated_at, String status, String donated_to, int shipment_id, String type, String height, String width, String length, String location)",
        "body": [
          "upd(stored_items, stored_items.id=id, stored_items.box_id, box_id)",
          "upd(stored_items, stored_items.id=id, stored_items.updated_at, updated_at)",
          "upd(stored_items, stored_items.id=id, stored_items.status, status)",
          "upd(stored_items, stored_items.id=id, stored_items.donated_to, donated_to)",
          "upd(stored_items, stored_items.id=id, stored_items.shipment_id, shipment_id)",
          "upd(stored_items, stored_items.id=id, stored_items.type, type)",
          "upd(stored_items, stored_items.id=id, stored_items.height, height)",
          "upd(stored_items, stored_items.id=id, stored_items.width, width)",
          "upd(stored_items, stored_items.id=id, stored_items.length, length)",
          "upd(stored_items, stored_items.id=id, stored_items.location, location)"
        ]
      },
      {
        "signature": "void updateStoredItemPhoto(int id, String photo_file_name, String photo_content_type, String photo_file_size, String photo_updated_at, String access_token, String updated_at)",
        "body": [
          "upd(stored_item_photos, stored_item_photos.stored_item_id=id, stored_item_photos.photo_file_name, photo_file_name)",
          "upd(stored_item_photos, stored_item_photos.stored_item_id=id, stored_item_photos.photo_content_type, photo_content_type)",
          "upd(stored_item_photos, stored_item_photos.stored_item_id=id, stored_item_photos.photo_file_size, photo_file_size)",
          "upd(stored_item_photos, stored_item_photos.stored_item_id=id, stored_item_photos.photo_updated_at, photo_updated_at)",
          "upd(stored_item_photos, stored_item_photos.stored_item_id=id, stored_item_photos.access_token, access_token)",
          "upd(stored_items, stored_items.id=id, stored_items.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readStoredItem(int id)",
        "body": [
          "pi([stored_items.box_id, stored_item_photos.photo_file_name, stored_item_photos.photo_content_type, stored_item_photos.photo_file_size, stored_item_photos.photo_updated_at, stored_item_photos.access_token, stored_items.status, stored_items.donated_to, stored_items.shipment_id, stored_items.type, stored_items.height, stored_items.width, stored_items.length, stored_items.location, stored_items.creator_id, stored_items.user_id], sigma(stored_items.id=id, join(stored_items, stored_item_photos)))"
        ]
      },
      {
        "signature": "void readStoredItemCreateTime(int id)",
        "body": [
          "pi([stored_items.created_at], sigma(stored_items.id=id, stored_items))"
        ]
      },
      {
        "signature": "void readStoredItemUpdateTime(int id)",
        "body": [
          "pi([stored_items.updated_at], sigma(stored_items.id=id, stored_items))"
        ]
      },
      {
        "signature": "void createSubscription(int id, String start_date, String end_date, int user_id, int duration_in_months, String created_at, String updated_at)",
        "body": [
          "ins(subscriptions, (id, start_date, end_date, user_id, duration_in_months, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteSubscription(int id)",
        "body": [
          "del(subscriptions, subscriptions.id=id)"
        ]
      },
      {
        "signature": "void updateSubscription(int id, String start_date, String end_date, int user_id, int duration_in_months, String updated_at)",
        "body": [
          "upd(subscriptions, subscriptions.id=id, subscriptions.start_date, start_date)",
          "upd(subscriptions, subscriptions.id=id, subscriptions.end_date, end_date)",
          "upd(subscriptions, subscriptions.id=id, subscriptions.user_id, user_id)",
          "upd(subscriptions, subscriptions.id=id, subscriptions.duration_in_months, duration_in_months)",
          "upd(subscriptions, subscriptions.id=id, subscriptions.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readSubscription(int id)",
        "body": [
          "pi([subscriptions.start_date, subscriptions.end_date, subscriptions.user_id, subscriptions.duration_in_months], sigma(subscriptions.id=id, subscriptions))"
        ]
      },
      {
        "signature": "void readSubscriptionCreateTime(int id)",
        "body": [
          "pi([subscriptions.created_at], sigma(subscriptions.id=id, subscriptions))"
        ]
      },
      {
        "signature": "void readSubscriptionUpdateTime(int id)",
        "body": [
          "pi([subscriptions.updated_at], sigma(subscriptions.id=id, subscriptions))"
        ]
      },
      {
        "signature": "void createUser(int id, String email, String encrypted_password, String reset_password_token, String remember_created_at, int sign_in_count, String current_sign_in_at, String last_sign_in_at, String current_sign_in_ip, String last_sign_in_ip, String password_salt, String confirmation_token, String confirmed_at, String confirmation_sent_at, int failed_attempts, String unlock_token, String locked_at, String authentication_token, String created_at, String updated_at, String last_name, String first_name, String beta_user, String signup_comments, String role, String cim_id, int default_payment_profile_id, int default_shipping_address_id, String test_user, int acting_as_user_id, String first_time_signed_up)",
        "body": [
          "ins(users, (id, email, encrypted_password, reset_password_token, remember_created_at, sign_in_count, current_sign_in_at, last_sign_in_at, current_sign_in_ip, last_sign_in_ip, password_salt, confirmation_token, confirmed_at, confirmation_sent_at, failed_attempts, unlock_token, locked_at, authentication_token, created_at, updated_at, last_name, first_name, beta_user, signup_comments, role, cim_id, default_payment_profile_id, default_shipping_address_id, test_user, acting_as_user_id, first_time_signed_up))"
        ]
      },
      {
        "signature": "void deleteUser(int id)",
        "body": [
          "del(users, users.id=id)"
        ]
      },
      {
        "signature": "void updateUserProfile(int id, String email, String last_name, String first_name, String signup_comments, String role, int cim_id, int default_payment_profile_id, int default_shipping_address_id, String first_time_signed_up, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.email, email)",
          "upd(users, users.id=id, users.last_name, last_name)",
          "upd(users, users.id=id, users.first_name, first_name)",
          "upd(users, users.id=id, users.signup_comments, signup_comments)",
          "upd(users, users.id=id, users.role, role)",
          "upd(users, users.id=id, users.cim_id, cim_id)",
          "upd(users, users.id=id, users.default_payment_profile_id, default_payment_profile_id)",
          "upd(users, users.id=id, users.default_shipping_address_id, default_shipping_address_id)",
          "upd(users, users.id=id, users.first_time_signed_up, first_time_signed_up)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserPassword(int id, String encrypted_password, String password_salt, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.encrypted_password, encrypted_password)",
          "upd(users, users.id=id, users.password_salt, password_salt)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserResetPassword(int id, String reset_password_token, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.reset_password_token, reset_password_token)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserSignIn(int id, int sign_in_count, String current_sign_in_at, String last_sign_in_at, String current_sign_in_ip, String last_sign_in_ip, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.sign_in_count, sign_in_count)",
          "upd(users, users.id=id, users.current_sign_in_at, current_sign_in_at)",
          "upd(users, users.id=id, users.last_sign_in_at, last_sign_in_at)",
          "upd(users, users.id=id, users.current_sign_in_ip, current_sign_in_ip)",
          "upd(users, users.id=id, users.last_sign_in_ip, last_sign_in_ip)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserConfirmation(int id, String confirmation_token, String confirmed_at, String confirmation_sent_at, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.confirmation_token, confirmation_token)",
          "upd(users, users.id=id, users.confirmed_at, confirmed_at)",
          "upd(users, users.id=id, users.confirmation_sent_at, confirmation_sent_at)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserLock(int id, int failed_attempts, String unlock_token, String locked_at, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.failed_attempts, failed_attempts)",
          "upd(users, users.id=id, users.unlock_token, unlock_token)",
          "upd(users, users.id=id, users.locked_at, locked_at)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void findUserByEmail(String email)",
        "body": [
          "pi([users.id], sigma(users.email=email, users))"
        ]
      },
      {
        "signature": "void readUser(int id)",
        "body": [
          "pi([users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(users.id=id, users))"
        ]
      },
      {
        "signature": "void readUserCreateTime(int id)",
        "body": [
          "pi([users.created_at], sigma(users.id=id, users))"
        ]
      },
      {
        "signature": "void readUserUpdateTime(int id)",
        "body": [
          "pi([users.updated_at], sigma(users.id=id, users))"
        ]
      },
      {
        "signature": "void readAddressUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(addresses.id=id, join(addresses, users)))"
        ]
      },
      {
        "signature": "void readUserAddress(int id)",
        "body": [
          "pi([addresses.id, addresses.first_name, addresses.last_name, addresses.day_phone, addresses.evening_phone, addresses.address_line_1, addresses.address_line_2, addresses.city, addresses.state, addresses.zip, addresses.address_name, addresses.user_id, addresses.country, addresses.status, addresses.comment, addresses.fedex_validation_status], sigma(users.id=id, join(addresses, users)))"
        ]
      },
      {
        "signature": "void readBoxUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(boxes.id=id, join(boxes, users)))"
        ]
      },
      {
        "signature": "void readUserBox(int id)",
        "body": [
          "pi([boxes.id, boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, boxes.height, boxes.width, boxes.length, boxes.weight, boxes.box_num, boxes.return_requested_at, boxes.location, boxes.inventoried_at, boxes.created_by_id], sigma(users.id=id, join(boxes, users)))"
        ]
      },
      {
        "signature": "void readBoxUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(boxes.id=id, join(boxes, users)))"
        ]
      },
      {
        "signature": "void readUserBox(int id)",
        "body": [
          "pi([boxes.id, boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, boxes.height, boxes.width, boxes.length, boxes.weight, boxes.box_num, boxes.return_requested_at, boxes.location, boxes.inventoried_at, boxes.created_by_id], sigma(users.id=id, join(boxes, users)))"
        ]
      },
      {
        "signature": "void readBoxSubscriptionBox(int id)",
        "body": [
          "pi([boxes.id, boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, boxes.height, boxes.width, boxes.length, boxes.weight, boxes.box_num, boxes.return_requested_at, boxes.location, boxes.inventoried_at, boxes.created_by_id], sigma(boxes_subscriptions.id=id, join(boxes_subscriptions, boxes)))"
        ]
      },
      {
        "signature": "void readBoxBoxSubscription(int id)",
        "body": [
          "pi([boxes_subscriptions.id, boxes_subscriptions.box_id, boxes_subscriptions.subscription_id], sigma(boxes.id=id, join(boxes_subscriptions, boxes)))"
        ]
      },
      {
        "signature": "void readBoxSubscriptionSubscription(int id)",
        "body": [
          "pi([subscriptions.id, subscriptions.start_date, subscriptions.end_date, subscriptions.user_id, subscriptions.duration_in_months], sigma(boxes_subscriptions.id=id, join(boxes_subscriptions, subscriptions)))"
        ]
      },
      {
        "signature": "void readSubscriptionBoxSubscription(int id)",
        "body": [
          "pi([boxes_subscriptions.id, boxes_subscriptions.box_id, boxes_subscriptions.subscription_id], sigma(subscriptions.id=id, join(boxes_subscriptions, subscriptions)))"
        ]
      },
      {
        "signature": "void readCartItemCart(int id)",
        "body": [
          "pi([carts.id, carts.user_id, carts.ordered_at, carts.status, carts.quoted_shipping_cost, carts.quoted_shipping_cost_success], sigma(cart_items.id=id, join(cart_items, carts)))"
        ]
      },
      {
        "signature": "void readCartCartItem(int id)",
        "body": [
          "pi([cart_items.id, cart_items.quantity, cart_items.cart_id, cart_items.product_id, cart_items.committed_months, cart_items.box_id, cart_items.address_id, cart_items.stored_item_id], sigma(carts.id=id, join(cart_items, carts)))"
        ]
      },
      {
        "signature": "void readCartItemProduct(int id)",
        "body": [
          "pi([products.id, products.name, products.price, products.price_comment, products.first_due, products.discountable], sigma(cart_items.id=id, join(cart_items, products)))"
        ]
      },
      {
        "signature": "void readProductCartItem(int id)",
        "body": [
          "pi([cart_items.id, cart_items.quantity, cart_items.cart_id, cart_items.product_id, cart_items.committed_months, cart_items.box_id, cart_items.address_id, cart_items.stored_item_id], sigma(products.id=id, join(cart_items, products)))"
        ]
      },
      {
        "signature": "void readCartItemBox(int id)",
        "body": [
          "pi([boxes.id, boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, boxes.height, boxes.width, boxes.length, boxes.weight, boxes.box_num, boxes.return_requested_at, boxes.location, boxes.inventoried_at, boxes.created_by_id], sigma(cart_items.id=id, join(cart_items, boxes)))"
        ]
      },
      {
        "signature": "void readBoxCartItem(int id)",
        "body": [
          "pi([cart_items.id, cart_items.quantity, cart_items.cart_id, cart_items.product_id, cart_items.committed_months, cart_items.box_id, cart_items.address_id, cart_items.stored_item_id], sigma(boxes.id=id, join(cart_items, boxes)))"
        ]
      },
      {
        "signature": "void readCartItemAddress(int id)",
        "body": [
          "pi([addresses.id, addresses.first_name, addresses.last_name, addresses.day_phone, addresses.evening_phone, addresses.address_line_1, addresses.address_line_2, addresses.city, addresses.state, addresses.zip, addresses.address_name, addresses.user_id, addresses.country, addresses.status, addresses.comment, addresses.fedex_validation_status], sigma(cart_items.id=id, join(cart_items, addresses)))"
        ]
      },
      {
        "signature": "void readAddressCartItem(int id)",
        "body": [
          "pi([cart_items.id, cart_items.quantity, cart_items.cart_id, cart_items.product_id, cart_items.committed_months, cart_items.box_id, cart_items.address_id, cart_items.stored_item_id], sigma(addresses.id=id, join(cart_items, addresses)))"
        ]
      },
      {
        "signature": "void readCartItemStoredItem(int id)",
        "body": [
          "pi([stored_items.id], sigma(cart_items.id=id, join(cart_items, stored_items)))"
        ]
      },
      {
        "signature": "void readStoredItemCartItem(int id)",
        "body": [
          "pi([cart_items.id, cart_items.quantity, cart_items.cart_id, cart_items.product_id, cart_items.committed_months, cart_items.box_id, cart_items.address_id, cart_items.stored_item_id], sigma(stored_items.id=id, join(cart_items, stored_items)))"
        ]
      },
      {
        "signature": "void readCartUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(carts.id=id, join(carts, users)))"
        ]
      },
      {
        "signature": "void readUserCart(int id)",
        "body": [
          "pi([carts.id, carts.user_id, carts.ordered_at, carts.status, carts.quoted_shipping_cost, carts.quoted_shipping_cost_success], sigma(users.id=id, join(carts, users)))"
        ]
      },
      {
        "signature": "void readChargeUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(charges.id=id, join(charges, users)))"
        ]
      },
      {
        "signature": "void readUserCharge(int id)",
        "body": [
          "pi([charges.id, charges.user_id, charges.total_in_cents, charges.product_id, charges.order_id, charges.shipment_id, charges.comments, charges.created_by_admin_id], sigma(users.id=id, join(charges, users)))"
        ]
      },
      {
        "signature": "void readChargeProduct(int id)",
        "body": [
          "pi([products.id, products.name, products.price, products.price_comment, products.first_due, products.discountable], sigma(charges.id=id, join(charges, products)))"
        ]
      },
      {
        "signature": "void readProductCharge(int id)",
        "body": [
          "pi([charges.id, charges.user_id, charges.total_in_cents, charges.product_id, charges.order_id, charges.shipment_id, charges.comments, charges.created_by_admin_id], sigma(products.id=id, join(charges, products)))"
        ]
      },
      {
        "signature": "void readChargeOrder(int id)",
        "body": [
          "pi([orders.id, orders.cart_id, orders.ip_address, orders.user_id, orders.initial_charged_shipping_cost], sigma(charges.id=id, join(charges, orders)))"
        ]
      },
      {
        "signature": "void readOrderCharge(int id)",
        "body": [
          "pi([charges.id, charges.user_id, charges.total_in_cents, charges.product_id, charges.order_id, charges.shipment_id, charges.comments, charges.created_by_admin_id], sigma(orders.id=id, join(charges, orders)))"
        ]
      },
      {
        "signature": "void readChargeShipment(int id)",
        "body": [
          "pi([shipments.id, shipments.box_id, shipments.from_address_id, shipments.to_address_id, shipments.tracking_number, shipments.shipment_label_file_name, shipments.shipment_label_updated_at, shipments.state, shipments.payor, shipments.charge_requested], sigma(charges.id=id, join(charges, shipments)))"
        ]
      },
      {
        "signature": "void readShipmentCharge(int id)",
        "body": [
          "pi([charges.id, charges.user_id, charges.total_in_cents, charges.product_id, charges.order_id, charges.shipment_id, charges.comments, charges.created_by_admin_id], sigma(shipments.id=id, join(charges, shipments)))"
        ]
      },
      {
        "signature": "void readCreditUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(credits.id=id, join(credits, users)))"
        ]
      },
      {
        "signature": "void readUserCredit(int id)",
        "body": [
          "pi([credits.id, credits.amount, credits.user_id, credits.description, credits.created_by_admin_id], sigma(users.id=id, join(credits, users)))"
        ]
      },
      {
        "signature": "void readInvoiceUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(invoices.id=id, join(invoices, users)))"
        ]
      },
      {
        "signature": "void readUserInvoice(int id)",
        "body": [
          "pi([invoices.id, invoices.user_id, invoices.payment_transaction_id, invoices.order_id], sigma(users.id=id, join(invoices, users)))"
        ]
      },
      {
        "signature": "void readInvoicePaymentTransaction(int id)",
        "body": [
          "pi([payment_transactions.id, payment_transactions.order_id, payment_transactions.action, payment_transactions.authorization, payment_transactions.message, payment_transactions.params, payment_transactions.user_id, payment_transactions.payment_profile_id, payment_transactions.status, payment_transactions.storage_payment_processing_record_id, payment_transactions.auth_transaction_id, payment_transactions.credit_id, payment_transactions.submitted_amount], sigma(invoices.id=id, join(invoices, payment_transactions)))"
        ]
      },
      {
        "signature": "void readPaymentTransactionInvoice(int id)",
        "body": [
          "pi([invoices.id, invoices.user_id, invoices.payment_transaction_id, invoices.order_id], sigma(payment_transactions.id=id, join(invoices, payment_transactions)))"
        ]
      },
      {
        "signature": "void readInvoiceOrder(int id)",
        "body": [
          "pi([orders.id, orders.cart_id, orders.ip_address, orders.user_id, orders.initial_charged_shipping_cost], sigma(invoices.id=id, join(invoices, orders)))"
        ]
      },
      {
        "signature": "void readOrderInvoice(int id)",
        "body": [
          "pi([invoices.id, invoices.user_id, invoices.payment_transaction_id, invoices.order_id], sigma(orders.id=id, join(invoices, orders)))"
        ]
      },
      {
        "signature": "void readOrderLineOrder(int id)",
        "body": [
          "pi([orders.id, orders.cart_id, orders.ip_address, orders.user_id, orders.initial_charged_shipping_cost], sigma(order_lines.id=id, join(order_lines, orders)))"
        ]
      },
      {
        "signature": "void readOrderOrderLine(int id)",
        "body": [
          "pi([order_lines.id, order_lines.order_id, order_lines.product_id, order_lines.quantity, order_lines.status, order_lines.committed_months, order_lines.shipping_address_id, order_lines.service_box_id, order_lines.shipment_id, order_lines.service_item_id, order_lines.item_mail_shipping_charge_id, order_lines.amount_paid_at_purchase], sigma(orders.id=id, join(order_lines, orders)))"
        ]
      },
      {
        "signature": "void readOrderLineProduct(int id)",
        "body": [
          "pi([products.id, products.name, products.price, products.price_comment, products.first_due, products.discountable], sigma(order_lines.id=id, join(order_lines, products)))"
        ]
      },
      {
        "signature": "void readProductOrderLine(int id)",
        "body": [
          "pi([order_lines.id, order_lines.order_id, order_lines.product_id, order_lines.quantity, order_lines.status, order_lines.committed_months, order_lines.shipping_address_id, order_lines.service_box_id, order_lines.shipment_id, order_lines.service_item_id, order_lines.item_mail_shipping_charge_id, order_lines.amount_paid_at_purchase], sigma(products.id=id, join(order_lines, products)))"
        ]
      },
      {
        "signature": "void readOrderLineAddress(int id)",
        "body": [
          "pi([addresses.id, addresses.first_name, addresses.last_name, addresses.day_phone, addresses.evening_phone, addresses.address_line_1, addresses.address_line_2, addresses.city, addresses.state, addresses.zip, addresses.address_name, addresses.user_id, addresses.country, addresses.status, addresses.comment, addresses.fedex_validation_status], sigma(order_lines.id=id, join(order_lines, addresses)))"
        ]
      },
      {
        "signature": "void readAddressOrderLine(int id)",
        "body": [
          "pi([order_lines.id, order_lines.order_id, order_lines.product_id, order_lines.quantity, order_lines.status, order_lines.committed_months, order_lines.shipping_address_id, order_lines.service_box_id, order_lines.shipment_id, order_lines.service_item_id, order_lines.item_mail_shipping_charge_id, order_lines.amount_paid_at_purchase], sigma(addresses.id=id, join(order_lines, addresses)))"
        ]
      },
      {
        "signature": "void readOrderLineBox(int id)",
        "body": [
          "pi([boxes.id, boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, boxes.height, boxes.width, boxes.length, boxes.weight, boxes.box_num, boxes.return_requested_at, boxes.location, boxes.inventoried_at, boxes.created_by_id], sigma(order_lines.id=id, join(order_lines, boxes)))"
        ]
      },
      {
        "signature": "void readBoxOrderLine(int id)",
        "body": [
          "pi([order_lines.id, order_lines.order_id, order_lines.product_id, order_lines.quantity, order_lines.status, order_lines.committed_months, order_lines.shipping_address_id, order_lines.service_box_id, order_lines.shipment_id, order_lines.service_item_id, order_lines.item_mail_shipping_charge_id, order_lines.amount_paid_at_purchase], sigma(boxes.id=id, join(order_lines, boxes)))"
        ]
      },
      {
        "signature": "void readOrderLineShipment(int id)",
        "body": [
          "pi([shipments.id, shipments.box_id, shipments.from_address_id, shipments.to_address_id, shipments.tracking_number, shipments.shipment_label_file_name, shipments.shipment_label_updated_at, shipments.state, shipments.payor, shipments.charge_requested], sigma(order_lines.id=id, join(order_lines, shipments)))"
        ]
      },
      {
        "signature": "void readShipmentOrderLine(int id)",
        "body": [
          "pi([order_lines.id, order_lines.order_id, order_lines.product_id, order_lines.quantity, order_lines.status, order_lines.committed_months, order_lines.shipping_address_id, order_lines.service_box_id, order_lines.shipment_id, order_lines.service_item_id, order_lines.item_mail_shipping_charge_id, order_lines.amount_paid_at_purchase], sigma(shipments.id=id, join(order_lines, shipments)))"
        ]
      },
      {
        "signature": "void readOrderLineStoredItem(int id)",
        "body": [
          "pi([stored_items.id], sigma(order_lines.id=id, join(order_lines, stored_items)))"
        ]
      },
      {
        "signature": "void readStoredItemOrderLine(int id)",
        "body": [
          "pi([order_lines.id, order_lines.order_id, order_lines.product_id, order_lines.quantity, order_lines.status, order_lines.committed_months, order_lines.shipping_address_id, order_lines.service_box_id, order_lines.shipment_id, order_lines.service_item_id, order_lines.item_mail_shipping_charge_id, order_lines.amount_paid_at_purchase], sigma(stored_items.id=id, join(order_lines, stored_items)))"
        ]
      },
      {
        "signature": "void readOrderLineCharge(int id)",
        "body": [
          "pi([charges.id, charges.user_id, charges.total_in_cents, charges.product_id, charges.order_id, charges.shipment_id, charges.comments, charges.created_by_admin_id], sigma(order_lines.id=id, join(order_lines, charges)))"
        ]
      },
      {
        "signature": "void readChargeOrderLine(int id)",
        "body": [
          "pi([order_lines.id, order_lines.order_id, order_lines.product_id, order_lines.quantity, order_lines.status, order_lines.committed_months, order_lines.shipping_address_id, order_lines.service_box_id, order_lines.shipment_id, order_lines.service_item_id, order_lines.item_mail_shipping_charge_id, order_lines.amount_paid_at_purchase], sigma(charges.id=id, join(order_lines, charges)))"
        ]
      },
      {
        "signature": "void readOrderCart(int id)",
        "body": [
          "pi([carts.id, carts.user_id, carts.ordered_at, carts.status, carts.quoted_shipping_cost, carts.quoted_shipping_cost_success], sigma(orders.id=id, join(orders, carts)))"
        ]
      },
      {
        "signature": "void readCartOrder(int id)",
        "body": [
          "pi([orders.id, orders.cart_id, orders.ip_address, orders.user_id, orders.initial_charged_shipping_cost], sigma(carts.id=id, join(orders, carts)))"
        ]
      },
      {
        "signature": "void readOrderUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(orders.id=id, join(orders, users)))"
        ]
      },
      {
        "signature": "void readUserOrder(int id)",
        "body": [
          "pi([orders.id, orders.cart_id, orders.ip_address, orders.user_id, orders.initial_charged_shipping_cost], sigma(users.id=id, join(orders, users)))"
        ]
      },
      {
        "signature": "void readPaymentProfileUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(payment_profiles.id=id, join(payment_profiles, users)))"
        ]
      },
      {
        "signature": "void readUserPaymentProfile(int id)",
        "body": [
          "pi([payment_profiles.id, payment_profiles.identifier, payment_profiles.last_four_digits, payment_profiles.user_id, payment_profiles.year, payment_profiles.first_name, payment_profiles.last_name, payment_profiles.billing_address_id, payment_profiles.cc_type, payment_profiles.month, payment_profiles.active], sigma(users.id=id, join(payment_profiles, users)))"
        ]
      },
      {
        "signature": "void readPaymentProfileAddress(int id)",
        "body": [
          "pi([addresses.id, addresses.first_name, addresses.last_name, addresses.day_phone, addresses.evening_phone, addresses.address_line_1, addresses.address_line_2, addresses.city, addresses.state, addresses.zip, addresses.address_name, addresses.user_id, addresses.country, addresses.status, addresses.comment, addresses.fedex_validation_status], sigma(payment_profiles.id=id, join(payment_profiles, addresses)))"
        ]
      },
      {
        "signature": "void readAddressPaymentProfile(int id)",
        "body": [
          "pi([payment_profiles.id, payment_profiles.identifier, payment_profiles.last_four_digits, payment_profiles.user_id, payment_profiles.year, payment_profiles.first_name, payment_profiles.last_name, payment_profiles.billing_address_id, payment_profiles.cc_type, payment_profiles.month, payment_profiles.active], sigma(addresses.id=id, join(payment_profiles, addresses)))"
        ]
      },
      {
        "signature": "void readPaymentTransactionOrder(int id)",
        "body": [
          "pi([orders.id, orders.cart_id, orders.ip_address, orders.user_id, orders.initial_charged_shipping_cost], sigma(payment_transactions.id=id, join(payment_transactions, orders)))"
        ]
      },
      {
        "signature": "void readOrderPaymentTransaction(int id)",
        "body": [
          "pi([payment_transactions.id, payment_transactions.order_id, payment_transactions.action, payment_transactions.authorization, payment_transactions.message, payment_transactions.params, payment_transactions.user_id, payment_transactions.payment_profile_id, payment_transactions.status, payment_transactions.storage_payment_processing_record_id, payment_transactions.auth_transaction_id, payment_transactions.credit_id, payment_transactions.submitted_amount], sigma(orders.id=id, join(payment_transactions, orders)))"
        ]
      },
      {
        "signature": "void readPaymentTransactionUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(payment_transactions.id=id, join(payment_transactions, users)))"
        ]
      },
      {
        "signature": "void readUserPaymentTransaction(int id)",
        "body": [
          "pi([payment_transactions.id, payment_transactions.order_id, payment_transactions.action, payment_transactions.authorization, payment_transactions.message, payment_transactions.params, payment_transactions.user_id, payment_transactions.payment_profile_id, payment_transactions.status, payment_transactions.storage_payment_processing_record_id, payment_transactions.auth_transaction_id, payment_transactions.credit_id, payment_transactions.submitted_amount], sigma(users.id=id, join(payment_transactions, users)))"
        ]
      },
      {
        "signature": "void readPaymentTransactionPaymentProfile(int id)",
        "body": [
          "pi([payment_profiles.id, payment_profiles.identifier, payment_profiles.last_four_digits, payment_profiles.user_id, payment_profiles.year, payment_profiles.first_name, payment_profiles.last_name, payment_profiles.billing_address_id, payment_profiles.cc_type, payment_profiles.month, payment_profiles.active], sigma(payment_transactions.id=id, join(payment_transactions, payment_profiles)))"
        ]
      },
      {
        "signature": "void readPaymentProfilePaymentTransaction(int id)",
        "body": [
          "pi([payment_transactions.id, payment_transactions.order_id, payment_transactions.action, payment_transactions.authorization, payment_transactions.message, payment_transactions.params, payment_transactions.user_id, payment_transactions.payment_profile_id, payment_transactions.status, payment_transactions.storage_payment_processing_record_id, payment_transactions.auth_transaction_id, payment_transactions.credit_id, payment_transactions.submitted_amount], sigma(payment_profiles.id=id, join(payment_transactions, payment_profiles)))"
        ]
      },
      {
        "signature": "void readPaymentTransactionStoragePaymentProcessingRecord(int id)",
        "body": [
          "pi([storage_payment_processing_records.id, storage_payment_processing_records.generated_by_user_id, storage_payment_processing_records.as_of_date], sigma(payment_transactions.id=id, join(payment_transactions, storage_payment_processing_records)))"
        ]
      },
      {
        "signature": "void readStoragePaymentProcessingRecordPaymentTransaction(int id)",
        "body": [
          "pi([payment_transactions.id, payment_transactions.order_id, payment_transactions.action, payment_transactions.authorization, payment_transactions.message, payment_transactions.params, payment_transactions.user_id, payment_transactions.payment_profile_id, payment_transactions.status, payment_transactions.storage_payment_processing_record_id, payment_transactions.auth_transaction_id, payment_transactions.credit_id, payment_transactions.submitted_amount], sigma(storage_payment_processing_records.id=id, join(payment_transactions, storage_payment_processing_records)))"
        ]
      },
      {
        "signature": "void readPaymentTransactionCredit(int id)",
        "body": [
          "pi([credits.id, credits.amount, credits.user_id, credits.description, credits.created_by_admin_id], sigma(payment_transactions.id=id, join(payment_transactions, credits)))"
        ]
      },
      {
        "signature": "void readCreditPaymentTransaction(int id)",
        "body": [
          "pi([payment_transactions.id, payment_transactions.order_id, payment_transactions.action, payment_transactions.authorization, payment_transactions.message, payment_transactions.params, payment_transactions.user_id, payment_transactions.payment_profile_id, payment_transactions.status, payment_transactions.storage_payment_processing_record_id, payment_transactions.auth_transaction_id, payment_transactions.credit_id, payment_transactions.submitted_amount], sigma(credits.id=id, join(payment_transactions, credits)))"
        ]
      },
      {
        "signature": "void readPhotoStoredItem(int id)",
        "body": [
          "pi([stored_items.id], sigma(photos.id=id, join(photos, stored_items)))"
        ]
      },
      {
        "signature": "void readStoredItemPhoto(int id)",
        "body": [
          "pi([photos.id, photos.stored_item_id, photos.data_file_name, photos.data_content_type, photos.data_file_size, photos.data_updated_at], sigma(stored_items.id=id, join(photos, stored_items)))"
        ]
      },
      {
        "signature": "void readRentalAgreementVersionUserUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(rental_agreement_versions_users.id=id, join(rental_agreement_versions_users, users)))"
        ]
      },
      {
        "signature": "void readUserRentalAgreementVersionUser(int id)",
        "body": [
          "pi([rental_agreement_versions_users.id, rental_agreement_versions_users.user_id, rental_agreement_versions_users.rental_agreement_version_id], sigma(users.id=id, join(rental_agreement_versions_users, users)))"
        ]
      },
      {
        "signature": "void readRentalAgreementVersionUserRentalAgreementVersion(int id)",
        "body": [
          "pi([rental_agreement_versions.id, rental_agreement_versions.agreement_text], sigma(rental_agreement_versions_users.id=id, join(rental_agreement_versions_users, rental_agreement_versions)))"
        ]
      },
      {
        "signature": "void readRentalAgreementVersionRentalAgreementVersionUser(int id)",
        "body": [
          "pi([rental_agreement_versions_users.id, rental_agreement_versions_users.user_id, rental_agreement_versions_users.rental_agreement_version_id], sigma(rental_agreement_versions.id=id, join(rental_agreement_versions_users, rental_agreement_versions)))"
        ]
      },
      {
        "signature": "void readShipmentBox(int id)",
        "body": [
          "pi([boxes.id, boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, boxes.height, boxes.width, boxes.length, boxes.weight, boxes.box_num, boxes.return_requested_at, boxes.location, boxes.inventoried_at, boxes.created_by_id], sigma(shipments.id=id, join(shipments, boxes)))"
        ]
      },
      {
        "signature": "void readBoxShipment(int id)",
        "body": [
          "pi([shipments.id, shipments.box_id, shipments.from_address_id, shipments.to_address_id, shipments.tracking_number, shipments.shipment_label_file_name, shipments.shipment_label_updated_at, shipments.state, shipments.payor, shipments.charge_requested], sigma(boxes.id=id, join(shipments, boxes)))"
        ]
      },
      {
        "signature": "void readShipmentAddress(int id)",
        "body": [
          "pi([addresses.id, addresses.first_name, addresses.last_name, addresses.day_phone, addresses.evening_phone, addresses.address_line_1, addresses.address_line_2, addresses.city, addresses.state, addresses.zip, addresses.address_name, addresses.user_id, addresses.country, addresses.status, addresses.comment, addresses.fedex_validation_status], sigma(shipments.id=id, join(shipments, addresses)))"
        ]
      },
      {
        "signature": "void readAddressShipment(int id)",
        "body": [
          "pi([shipments.id, shipments.box_id, shipments.from_address_id, shipments.to_address_id, shipments.tracking_number, shipments.shipment_label_file_name, shipments.shipment_label_updated_at, shipments.state, shipments.payor, shipments.charge_requested], sigma(addresses.id=id, join(shipments, addresses)))"
        ]
      },
      {
        "signature": "void readShipmentAddress(int id)",
        "body": [
          "pi([addresses.id, addresses.first_name, addresses.last_name, addresses.day_phone, addresses.evening_phone, addresses.address_line_1, addresses.address_line_2, addresses.city, addresses.state, addresses.zip, addresses.address_name, addresses.user_id, addresses.country, addresses.status, addresses.comment, addresses.fedex_validation_status], sigma(shipments.id=id, join(shipments, addresses)))"
        ]
      },
      {
        "signature": "void readAddressShipment(int id)",
        "body": [
          "pi([shipments.id, shipments.box_id, shipments.from_address_id, shipments.to_address_id, shipments.tracking_number, shipments.shipment_label_file_name, shipments.shipment_label_updated_at, shipments.state, shipments.payor, shipments.charge_requested], sigma(addresses.id=id, join(shipments, addresses)))"
        ]
      },
      {
        "signature": "void readStorageChargeProcessingRecordUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(storage_charge_processing_records.id=id, join(storage_charge_processing_records, users)))"
        ]
      },
      {
        "signature": "void readUserStorageChargeProcessingRecord(int id)",
        "body": [
          "pi([storage_charge_processing_records.id, storage_charge_processing_records.generated_by_user_id, storage_charge_processing_records.as_of_date, storage_charge_processing_records.locked_for_editing], sigma(users.id=id, join(storage_charge_processing_records, users)))"
        ]
      },
      {
        "signature": "void readStorageChargeBox(int id)",
        "body": [
          "pi([boxes.id, boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, boxes.height, boxes.width, boxes.length, boxes.weight, boxes.box_num, boxes.return_requested_at, boxes.location, boxes.inventoried_at, boxes.created_by_id], sigma(storage_charges.id=id, join(storage_charges, boxes)))"
        ]
      },
      {
        "signature": "void readBoxStorageCharge(int id)",
        "body": [
          "pi([storage_charges.id, storage_charges.box_id, storage_charges.charge_id, storage_charges.start_date, storage_charges.end_date, storage_charges.storage_charge_processing_record_id], sigma(boxes.id=id, join(storage_charges, boxes)))"
        ]
      },
      {
        "signature": "void readStorageChargeCharge(int id)",
        "body": [
          "pi([charges.id, charges.user_id, charges.total_in_cents, charges.product_id, charges.order_id, charges.shipment_id, charges.comments, charges.created_by_admin_id], sigma(storage_charges.id=id, join(storage_charges, charges)))"
        ]
      },
      {
        "signature": "void readChargeStorageCharge(int id)",
        "body": [
          "pi([storage_charges.id, storage_charges.box_id, storage_charges.charge_id, storage_charges.start_date, storage_charges.end_date, storage_charges.storage_charge_processing_record_id], sigma(charges.id=id, join(storage_charges, charges)))"
        ]
      },
      {
        "signature": "void readStorageChargeStorageChargeProcessingRecord(int id)",
        "body": [
          "pi([storage_charge_processing_records.id, storage_charge_processing_records.generated_by_user_id, storage_charge_processing_records.as_of_date, storage_charge_processing_records.locked_for_editing], sigma(storage_charges.id=id, join(storage_charges, storage_charge_processing_records)))"
        ]
      },
      {
        "signature": "void readStorageChargeProcessingRecordStorageCharge(int id)",
        "body": [
          "pi([storage_charges.id, storage_charges.box_id, storage_charges.charge_id, storage_charges.start_date, storage_charges.end_date, storage_charges.storage_charge_processing_record_id], sigma(storage_charge_processing_records.id=id, join(storage_charges, storage_charge_processing_records)))"
        ]
      },
      {
        "signature": "void readStoragePaymentProcessingRecordUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(storage_payment_processing_records.id=id, join(storage_payment_processing_records, users)))"
        ]
      },
      {
        "signature": "void readUserStoragePaymentProcessingRecord(int id)",
        "body": [
          "pi([storage_payment_processing_records.id, storage_payment_processing_records.generated_by_user_id, storage_payment_processing_records.as_of_date], sigma(users.id=id, join(storage_payment_processing_records, users)))"
        ]
      },
      {
        "signature": "void readStoredItemTagStoredItem(int id)",
        "body": [
          "pi([stored_items.id], sigma(stored_item_tags.id=id, join(stored_item_tags, stored_items)))"
        ]
      },
      {
        "signature": "void readStoredItemStoredItemTag(int id)",
        "body": [
          "pi([stored_item_tags.id, stored_item_tags.stored_item_id, stored_item_tags.tag], sigma(stored_items.id=id, join(stored_item_tags, stored_items)))"
        ]
      },
      {
        "signature": "void readStoredItemBox(int id)",
        "body": [
          "pi([boxes.id, boxes.assigned_to_user_id, boxes.ordering_order_line_id, boxes.status, boxes.box_type, boxes.description, boxes.inventorying_status, boxes.inventorying_order_line_id, boxes.received_at, boxes.height, boxes.width, boxes.length, boxes.weight, boxes.box_num, boxes.return_requested_at, boxes.location, boxes.inventoried_at, boxes.created_by_id], sigma(stored_items.id=id, join(stored_items, boxes)))"
        ]
      },
      {
        "signature": "void readBoxStoredItem(int id)",
        "body": [
          "pi([stored_items.id], sigma(boxes.id=id, join(stored_items, boxes)))"
        ]
      },
      {
        "signature": "void readStoredItemShipment(int id)",
        "body": [
          "pi([shipments.id, shipments.box_id, shipments.from_address_id, shipments.to_address_id, shipments.tracking_number, shipments.shipment_label_file_name, shipments.shipment_label_updated_at, shipments.state, shipments.payor, shipments.charge_requested], sigma(stored_items.id=id, join(stored_items, shipments)))"
        ]
      },
      {
        "signature": "void readShipmentStoredItem(int id)",
        "body": [
          "pi([stored_items.id], sigma(shipments.id=id, join(stored_items, shipments)))"
        ]
      },
      {
        "signature": "void readSubscriptionUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(subscriptions.id=id, join(subscriptions, users)))"
        ]
      },
      {
        "signature": "void readUserSubscription(int id)",
        "body": [
          "pi([subscriptions.id, subscriptions.start_date, subscriptions.end_date, subscriptions.user_id, subscriptions.duration_in_months], sigma(users.id=id, join(subscriptions, users)))"
        ]
      },
      {
        "signature": "void readUserPaymentProfile(int id)",
        "body": [
          "pi([payment_profiles.id, payment_profiles.identifier, payment_profiles.last_four_digits, payment_profiles.user_id, payment_profiles.year, payment_profiles.first_name, payment_profiles.last_name, payment_profiles.billing_address_id, payment_profiles.cc_type, payment_profiles.month, payment_profiles.active], sigma(users.id=id, join(users, payment_profiles)))"
        ]
      },
      {
        "signature": "void readPaymentProfileUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(payment_profiles.id=id, join(users, payment_profiles)))"
        ]
      },
      {
        "signature": "void readUserAddress(int id)",
        "body": [
          "pi([addresses.id, addresses.first_name, addresses.last_name, addresses.day_phone, addresses.evening_phone, addresses.address_line_1, addresses.address_line_2, addresses.city, addresses.state, addresses.zip, addresses.address_name, addresses.user_id, addresses.country, addresses.status, addresses.comment, addresses.fedex_validation_status], sigma(users.id=id, join(users, addresses)))"
        ]
      },
      {
        "signature": "void readAddressUser(int id)",
        "body": [
          "pi([users.id, users.email, users.encrypted_password, users.reset_password_token, users.remember_created_at, users.sign_in_count, users.current_sign_in_at, users.last_sign_in_at, users.current_sign_in_ip, users.last_sign_in_ip, users.password_salt, users.confirmation_token, users.confirmed_at, users.confirmation_sent_at, users.failed_attempts, users.unlock_token, users.locked_at, users.authentication_token, users.last_name, users.first_name, users.beta_user, users.signup_comments, users.role, users.cim_id, users.default_payment_profile_id, users.default_shipping_address_id, users.test_user, users.acting_as_user_id, users.first_time_signed_up], sigma(addresses.id=id, join(users, addresses)))"
        ]
      }
    ]
  }
}