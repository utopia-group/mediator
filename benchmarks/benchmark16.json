{
  "source": {
    "relations": [
      "instructions(int instructions.id, String instructions.description, String instructions.created_at, String instructions.updated_at)",
      "lessons(int lessons.id, String lessons.title, int lessons.chapter, int lessons.section, String lessons.created_at, String lessons.updated_at, int lessons.subject_id)",
      "math_problem_templates(int math_problem_templates.id, int math_problem_templates.lesson_id, int math_problem_templates.instruction_id, int math_problem_templates.difficulty, String math_problem_templates.created_at, String math_problem_templates.updated_at, String math_problem_templates.display_mode)",
      "math_problems(int math_problems.id, int math_problems.math_problem_template_id, String math_problems.question_markup, String math_problems.created_at, String math_problems.updated_at, String math_problems.answer_markup)",
      "subjects(int subjects.id, String subjects.title, String subjects.created_at, String subjects.updated_at)",
      "worksheet_problems(int worksheet_problems.id, int worksheet_problems.worksheet_id, int worksheet_problems.math_problem_id, int worksheet_problems.problem_number, String worksheet_problems.created_at, String worksheet_problems.updated_at)",
      "worksheets(int worksheets.id, String worksheets.title, String worksheets.created_at, String worksheets.updated_at)"
    ],
    "primarykeys": [
      "instructions(instructions.id)",
      "lessons(lessons.id)",
      "math_problem_templates(math_problem_templates.id)",
      "math_problems(math_problems.id)",
      "subjects(subjects.id)",
      "worksheet_problems(worksheet_problems.id)",
      "worksheets(worksheets.id)"
    ],
    "foreignkeys": [
      "lessons(lessons.subject_id) -> subjects(subjects.id)",
      "math_problem_templates(math_problem_templates.lesson_id) -> lessons(lessons.id)",
      "math_problem_templates(math_problem_templates.instruction_id) -> instructions(instructions.id)",
      "math_problems(math_problems.math_problem_template_id) -> math_problem_templates(math_problem_templates.id)",
      "worksheet_problems(worksheet_problems.worksheet_id) -> worksheets(worksheets.id)",
      "worksheet_problems(worksheet_problems.math_problem_id) -> math_problems(math_problems.id)"
    ],
    "transactions": [
      {
        "signature": "void createInstruction(int id, String description, String created_at, String updated_at)",
        "body": [
          "ins(instructions, (id, description, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteInstruction(int id)",
        "body": [
          "del(instructions, instructions.id=id)"
        ]
      },
      {
        "signature": "void updateInstruction(int id, String description, String updated_at)",
        "body": [
          "upd(instructions, instructions.id=id, instructions.description, description)",
          "upd(instructions, instructions.id=id, instructions.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readInstruction(int id)",
        "body": [
          "pi([instructions.description], sigma(instructions.id=id, instructions))"
        ]
      },
      {
        "signature": "void readInstructionCreateTime(int id)",
        "body": [
          "pi([instructions.created_at], sigma(instructions.id=id, instructions))"
        ]
      },
      {
        "signature": "void readInstructionUpdateTime(int id)",
        "body": [
          "pi([instructions.updated_at], sigma(instructions.id=id, instructions))"
        ]
      },
      {
        "signature": "void createLesson(int id, String title, int chapter, int section, String created_at, String updated_at, int subject_id)",
        "body": [
          "ins(lessons, (id, title, chapter, section, created_at, updated_at, subject_id))"
        ]
      },
      {
        "signature": "void deleteLesson(int id)",
        "body": [
          "del(lessons, lessons.id=id)"
        ]
      },
      {
        "signature": "void updateLesson(int id, String title, int chapter, int section, String updated_at, int subject_id)",
        "body": [
          "upd(lessons, lessons.id=id, lessons.title, title)",
          "upd(lessons, lessons.id=id, lessons.chapter, chapter)",
          "upd(lessons, lessons.id=id, lessons.section, section)",
          "upd(lessons, lessons.id=id, lessons.updated_at, updated_at)",
          "upd(lessons, lessons.id=id, lessons.subject_id, subject_id)"
        ]
      },
      {
        "signature": "void readLesson(int id)",
        "body": [
          "pi([lessons.title, lessons.chapter, lessons.section, lessons.subject_id], sigma(lessons.id=id, lessons))"
        ]
      },
      {
        "signature": "void readLessonCreateTime(int id)",
        "body": [
          "pi([lessons.created_at], sigma(lessons.id=id, lessons))"
        ]
      },
      {
        "signature": "void readLessonUpdateTime(int id)",
        "body": [
          "pi([lessons.updated_at], sigma(lessons.id=id, lessons))"
        ]
      },
      {
        "signature": "void createMathProblemTemplate(int id, int lesson_id, int instruction_id, int difficulty, String created_at, String updated_at, String display_mode)",
        "body": [
          "ins(math_problem_templates, (id, lesson_id, instruction_id, difficulty, created_at, updated_at, display_mode))"
        ]
      },
      {
        "signature": "void deleteMathProblemTemplate(int id)",
        "body": [
          "del(math_problem_templates, math_problem_templates.id=id)"
        ]
      },
      {
        "signature": "void updateMathProblemTemplate(int id, int lesson_id, int instruction_id, int difficulty, String updated_at, String display_mode)",
        "body": [
          "upd(math_problem_templates, math_problem_templates.id=id, math_problem_templates.lesson_id, lesson_id)",
          "upd(math_problem_templates, math_problem_templates.id=id, math_problem_templates.instruction_id, instruction_id)",
          "upd(math_problem_templates, math_problem_templates.id=id, math_problem_templates.difficulty, difficulty)",
          "upd(math_problem_templates, math_problem_templates.id=id, math_problem_templates.updated_at, updated_at)",
          "upd(math_problem_templates, math_problem_templates.id=id, math_problem_templates.display_mode, display_mode)"
        ]
      },
      {
        "signature": "void readMathProblemTemplate(int id)",
        "body": [
          "pi([math_problem_templates.lesson_id, math_problem_templates.instruction_id, math_problem_templates.difficulty, math_problem_templates.display_mode], sigma(math_problem_templates.id=id, math_problem_templates))"
        ]
      },
      {
        "signature": "void readMathProblemTemplateCreateTime(int id)",
        "body": [
          "pi([math_problem_templates.created_at], sigma(math_problem_templates.id=id, math_problem_templates))"
        ]
      },
      {
        "signature": "void readMathProblemTemplateUpdateTime(int id)",
        "body": [
          "pi([math_problem_templates.updated_at], sigma(math_problem_templates.id=id, math_problem_templates))"
        ]
      },
      {
        "signature": "void createMathProblem(int id, int math_problem_template_id, String question_markup, String created_at, String updated_at, String answer_markup)",
        "body": [
          "ins(math_problems, (id, math_problem_template_id, question_markup, created_at, updated_at, answer_markup))"
        ]
      },
      {
        "signature": "void deleteMathProblem(int id)",
        "body": [
          "del(math_problems, math_problems.id=id)"
        ]
      },
      {
        "signature": "void updateMathProblem(int id, int math_problem_template_id, String question_markup, String updated_at, String answer_markup)",
        "body": [
          "upd(math_problems, math_problems.id=id, math_problems.math_problem_template_id, math_problem_template_id)",
          "upd(math_problems, math_problems.id=id, math_problems.question_markup, question_markup)",
          "upd(math_problems, math_problems.id=id, math_problems.updated_at, updated_at)",
          "upd(math_problems, math_problems.id=id, math_problems.answer_markup, answer_markup)"
        ]
      },
      {
        "signature": "void readMathProblem(int id)",
        "body": [
          "pi([math_problems.math_problem_template_id, math_problems.question_markup, math_problems.answer_markup], sigma(math_problems.id=id, math_problems))"
        ]
      },
      {
        "signature": "void readMathProblemCreateTime(int id)",
        "body": [
          "pi([math_problems.created_at], sigma(math_problems.id=id, math_problems))"
        ]
      },
      {
        "signature": "void readMathProblemUpdateTime(int id)",
        "body": [
          "pi([math_problems.updated_at], sigma(math_problems.id=id, math_problems))"
        ]
      },
      {
        "signature": "void createSubject(int id, String title, String created_at, String updated_at)",
        "body": [
          "ins(subjects, (id, title, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteSubject(int id)",
        "body": [
          "del(subjects, subjects.id=id)"
        ]
      },
      {
        "signature": "void updateSubject(int id, String title, String updated_at)",
        "body": [
          "upd(subjects, subjects.id=id, subjects.title, title)",
          "upd(subjects, subjects.id=id, subjects.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readSubject(int id)",
        "body": [
          "pi([subjects.title], sigma(subjects.id=id, subjects))"
        ]
      },
      {
        "signature": "void readSubjectCreateTime(int id)",
        "body": [
          "pi([subjects.created_at], sigma(subjects.id=id, subjects))"
        ]
      },
      {
        "signature": "void readSubjectUpdateTime(int id)",
        "body": [
          "pi([subjects.updated_at], sigma(subjects.id=id, subjects))"
        ]
      },
      {
        "signature": "void createWorksheetProblem(int id, int worksheet_id, int math_problem_id, int problem_number, String created_at, String updated_at)",
        "body": [
          "ins(worksheet_problems, (id, worksheet_id, math_problem_id, problem_number, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteWorksheetProblem(int id)",
        "body": [
          "del(worksheet_problems, worksheet_problems.id=id)"
        ]
      },
      {
        "signature": "void updateWorksheetProblem(int id, int worksheet_id, int math_problem_id, int problem_number, String updated_at)",
        "body": [
          "upd(worksheet_problems, worksheet_problems.id=id, worksheet_problems.worksheet_id, worksheet_id)",
          "upd(worksheet_problems, worksheet_problems.id=id, worksheet_problems.math_problem_id, math_problem_id)",
          "upd(worksheet_problems, worksheet_problems.id=id, worksheet_problems.problem_number, problem_number)",
          "upd(worksheet_problems, worksheet_problems.id=id, worksheet_problems.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readWorksheetProblem(int id)",
        "body": [
          "pi([worksheet_problems.worksheet_id, worksheet_problems.math_problem_id, worksheet_problems.problem_number], sigma(worksheet_problems.id=id, worksheet_problems))"
        ]
      },
      {
        "signature": "void readWorksheetProblemCreateTime(int id)",
        "body": [
          "pi([worksheet_problems.created_at], sigma(worksheet_problems.id=id, worksheet_problems))"
        ]
      },
      {
        "signature": "void readWorksheetProblemUpdateTime(int id)",
        "body": [
          "pi([worksheet_problems.updated_at], sigma(worksheet_problems.id=id, worksheet_problems))"
        ]
      },
      {
        "signature": "void createWorksheet(int id, String title, String created_at, String updated_at)",
        "body": [
          "ins(worksheets, (id, title, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteWorksheet(int id)",
        "body": [
          "del(worksheets, worksheets.id=id)"
        ]
      },
      {
        "signature": "void updateWorksheet(int id, String title, String updated_at)",
        "body": [
          "upd(worksheets, worksheets.id=id, worksheets.title, title)",
          "upd(worksheets, worksheets.id=id, worksheets.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readWorksheet(int id)",
        "body": [
          "pi([worksheets.title], sigma(worksheets.id=id, worksheets))"
        ]
      },
      {
        "signature": "void readWorksheetCreateTime(int id)",
        "body": [
          "pi([worksheets.created_at], sigma(worksheets.id=id, worksheets))"
        ]
      },
      {
        "signature": "void readWorksheetUpdateTime(int id)",
        "body": [
          "pi([worksheets.updated_at], sigma(worksheets.id=id, worksheets))"
        ]
      },
      {
        "signature": "void readLessonSubject(int id)",
        "body": [
          "pi([subjects.id, subjects.title], sigma(lessons.id=id, join(lessons, subjects)))"
        ]
      },
      {
        "signature": "void readSubjectLesson(int id)",
        "body": [
          "pi([lessons.id, lessons.title, lessons.chapter, lessons.section, lessons.subject_id], sigma(subjects.id=id, join(lessons, subjects)))"
        ]
      },
      {
        "signature": "void readMathProblemTemplateLesson(int id)",
        "body": [
          "pi([lessons.id, lessons.title, lessons.chapter, lessons.section, lessons.subject_id], sigma(math_problem_templates.id=id, join(math_problem_templates, lessons)))"
        ]
      },
      {
        "signature": "void readLessonMathProblemTemplate(int id)",
        "body": [
          "pi([math_problem_templates.id, math_problem_templates.lesson_id, math_problem_templates.instruction_id, math_problem_templates.difficulty, math_problem_templates.display_mode], sigma(lessons.id=id, join(math_problem_templates, lessons)))"
        ]
      },
      {
        "signature": "void readMathProblemTemplateInstruction(int id)",
        "body": [
          "pi([instructions.id, instructions.description], sigma(math_problem_templates.id=id, join(math_problem_templates, instructions)))"
        ]
      },
      {
        "signature": "void readInstructionMathProblemTemplate(int id)",
        "body": [
          "pi([math_problem_templates.id, math_problem_templates.lesson_id, math_problem_templates.instruction_id, math_problem_templates.difficulty, math_problem_templates.display_mode], sigma(instructions.id=id, join(math_problem_templates, instructions)))"
        ]
      },
      {
        "signature": "void readMathProblemMathProblemTemplate(int id)",
        "body": [
          "pi([math_problem_templates.id, math_problem_templates.lesson_id, math_problem_templates.instruction_id, math_problem_templates.difficulty, math_problem_templates.display_mode], sigma(math_problems.id=id, join(math_problems, math_problem_templates)))"
        ]
      },
      {
        "signature": "void readMathProblemTemplateMathProblem(int id)",
        "body": [
          "pi([math_problems.id, math_problems.math_problem_template_id, math_problems.question_markup, math_problems.answer_markup], sigma(math_problem_templates.id=id, join(math_problems, math_problem_templates)))"
        ]
      },
      {
        "signature": "void readWorksheetProblemWorksheet(int id)",
        "body": [
          "pi([worksheets.id, worksheets.title], sigma(worksheet_problems.id=id, join(worksheet_problems, worksheets)))"
        ]
      },
      {
        "signature": "void readWorksheetWorksheetProblem(int id)",
        "body": [
          "pi([worksheet_problems.id, worksheet_problems.worksheet_id, worksheet_problems.math_problem_id, worksheet_problems.problem_number], sigma(worksheets.id=id, join(worksheet_problems, worksheets)))"
        ]
      },
      {
        "signature": "void readWorksheetProblemMathProblem(int id)",
        "body": [
          "pi([math_problems.id, math_problems.math_problem_template_id, math_problems.question_markup, math_problems.answer_markup], sigma(worksheet_problems.id=id, join(worksheet_problems, math_problems)))"
        ]
      },
      {
        "signature": "void readMathProblemWorksheetProblem(int id)",
        "body": [
          "pi([worksheet_problems.id, worksheet_problems.worksheet_id, worksheet_problems.math_problem_id, worksheet_problems.problem_number], sigma(math_problems.id=id, join(worksheet_problems, math_problems)))"
        ]
      }
    ]
  },
  "target": {
    "relations": [
      "instructions(int instructions.id, String instructions.description, String instructions.created_at, String instructions.updated_at)",
      "lessons(int lessons.id, String lessons.title, int lessons.chapter, int lessons.section, String lessons.created_at, String lessons.updated_at, int lessons.subject_id)",
      "math_problem_templates(int math_problem_templates.id, int math_problem_templates.lesson_id, int math_problem_templates.instruction_id, String math_problem_templates.created_at, String math_problem_templates.updated_at, String math_problem_templates.display_mode)",
      "math_problems(int math_problems.id, int math_problems.problem_level_id, String math_problems.question_markup, String math_problems.created_at, String math_problems.updated_at, String math_problems.answer_markup)",
      "problem_levels(int problem_levels.id, int problem_levels.math_problem_template_id, int problem_levels.difficulty, String problem_levels.created_at, String problem_levels.updated_at)",
      "subjects(int subjects.id, String subjects.title, String subjects.created_at, String subjects.updated_at)",
      "worksheet_problems(int worksheet_problems.id, int worksheet_problems.worksheet_id, int worksheet_problems.math_problem_id, int worksheet_problems.problem_number, String worksheet_problems.created_at, String worksheet_problems.updated_at)",
      "worksheets(int worksheets.id, String worksheets.title, String worksheets.created_at, String worksheets.updated_at)"
    ],
    "primarykeys": [
      "instructions(instructions.id)",
      "lessons(lessons.id)",
      "math_problem_templates(math_problem_templates.id)",
      "math_problems(math_problems.id)",
      "problem_levels(problem_levels.id)",
      "subjects(subjects.id)",
      "worksheet_problems(worksheet_problems.id)",
      "worksheets(worksheets.id)"
    ],
    "foreignkeys": [
      "lessons(lessons.subject_id) -> subjects(subjects.id)",
      "math_problem_templates(math_problem_templates.lesson_id) -> lessons(lessons.id)",
      "math_problem_templates(math_problem_templates.instruction_id) -> instructions(instructions.id)",
      "math_problems(math_problems.problem_level_id) -> problem_levels(problem_levels.id)",
      "problem_levels(problem_levels.math_problem_template_id) -> math_problem_templates(math_problem_templates.id)",
      "worksheet_problems(worksheet_problems.worksheet_id) -> worksheets(worksheets.id)",
      "worksheet_problems(worksheet_problems.math_problem_id) -> math_problems(math_problems.id)"
    ],
    "transactions": [
      {
        "signature": "void createInstruction(int id, String description, String created_at, String updated_at)",
        "body": [
          "ins(instructions, (id, description, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteInstruction(int id)",
        "body": [
          "del(instructions, instructions.id=id)"
        ]
      },
      {
        "signature": "void updateInstruction(int id, String description, String updated_at)",
        "body": [
          "upd(instructions, instructions.id=id, instructions.description, description)",
          "upd(instructions, instructions.id=id, instructions.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readInstruction(int id)",
        "body": [
          "pi([instructions.description], sigma(instructions.id=id, instructions))"
        ]
      },
      {
        "signature": "void readInstructionCreateTime(int id)",
        "body": [
          "pi([instructions.created_at], sigma(instructions.id=id, instructions))"
        ]
      },
      {
        "signature": "void readInstructionUpdateTime(int id)",
        "body": [
          "pi([instructions.updated_at], sigma(instructions.id=id, instructions))"
        ]
      },
      {
        "signature": "void createLesson(int id, String title, int chapter, int section, String created_at, String updated_at, int subject_id)",
        "body": [
          "ins(lessons, (id, title, chapter, section, created_at, updated_at, subject_id))"
        ]
      },
      {
        "signature": "void deleteLesson(int id)",
        "body": [
          "del(lessons, lessons.id=id)"
        ]
      },
      {
        "signature": "void updateLesson(int id, String title, int chapter, int section, String updated_at, int subject_id)",
        "body": [
          "upd(lessons, lessons.id=id, lessons.title, title)",
          "upd(lessons, lessons.id=id, lessons.chapter, chapter)",
          "upd(lessons, lessons.id=id, lessons.section, section)",
          "upd(lessons, lessons.id=id, lessons.updated_at, updated_at)",
          "upd(lessons, lessons.id=id, lessons.subject_id, subject_id)"
        ]
      },
      {
        "signature": "void readLesson(int id)",
        "body": [
          "pi([lessons.title, lessons.chapter, lessons.section, lessons.subject_id], sigma(lessons.id=id, lessons))"
        ]
      },
      {
        "signature": "void readLessonCreateTime(int id)",
        "body": [
          "pi([lessons.created_at], sigma(lessons.id=id, lessons))"
        ]
      },
      {
        "signature": "void readLessonUpdateTime(int id)",
        "body": [
          "pi([lessons.updated_at], sigma(lessons.id=id, lessons))"
        ]
      },
      {
        "signature": "void createMathProblemTemplate(int id, int lesson_id, int instruction_id, int difficulty, String created_at, String updated_at, String display_mode)",
        "body": [
          "ins(math_problem_templates, (UUID_x1, lesson_id, instruction_id, created_at, updated_at, display_mode))",
          "ins(problem_levels, (id, UUID_x1, difficulty, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteMathProblemTemplate(int id)",
        "body": [
          "del(math_problem_templates, in(math_problem_templates.id, pi([problem_levels.math_problem_template_id], sigma(problem_levels.id=id, problem_levels))))",
          "del(problem_levels, problem_levels.id=id)"
        ]
      },
      {
        "signature": "void updateMathProblemTemplate(int id, int lesson_id, int instruction_id, int difficulty, String updated_at, String display_mode)",
        "body": [
          "upd(math_problem_templates, in(math_problem_templates.id, pi([problem_levels.math_problem_template_id], sigma(problem_levels.id=id, problem_levels))), math_problem_templates.lesson_id, lesson_id)",
          "upd(math_problem_templates, in(math_problem_templates.id, pi([problem_levels.math_problem_template_id], sigma(problem_levels.id=id, problem_levels))), math_problem_templates.instruction_id, instruction_id)",
          "upd(problem_levels, problem_levels.id=id, problem_levels.difficulty, difficulty)",
          "upd(problem_levels, problem_levels.id=id, problem_levels.updated_at, updated_at)",
          "upd(math_problem_templates, in(math_problem_templates.id, pi([problem_levels.math_problem_template_id], sigma(problem_levels.id=id, problem_levels))), math_problem_templates.updated_at, updated_at)",
          "upd(math_problem_templates, in(math_problem_templates.id, pi([problem_levels.math_problem_template_id], sigma(problem_levels.id=id, problem_levels))), math_problem_templates.display_mode, display_mode)"
        ]
      },
      {
        "signature": "void readMathProblemTemplate(int id)",
        "body": [
          "pi([math_problem_templates.lesson_id, math_problem_templates.instruction_id, problem_levels.difficulty, math_problem_templates.display_mode], sigma(problem_levels.id=id, join(problem_levels, math_problem_templates)))"
        ]
      },
      {
        "signature": "void readMathProblemTemplateCreateTime(int id)",
        "body": [
          "pi([problem_levels.created_at], sigma(problem_levels.id=id, problem_levels))"
        ]
      },
      {
        "signature": "void readMathProblemTemplateUpdateTime(int id)",
        "body": [
          "pi([problem_levels.updated_at], sigma(problem_levels.id=id, problem_levels))"
        ]
      },
      {
        "signature": "void createMathProblem(int id, int math_problem_template_id, String question_markup, String created_at, String updated_at, String answer_markup)",
        "body": [
          "ins(math_problems, (id, math_problem_template_id, question_markup, created_at, updated_at, answer_markup))"
        ]
      },
      {
        "signature": "void deleteMathProblem(int id)",
        "body": [
          "del(math_problems, math_problems.id=id)"
        ]
      },
      {
        "signature": "void updateMathProblem(int id, int math_problem_template_id, String question_markup, String updated_at, String answer_markup)",
        "body": [
          "upd(math_problems, math_problems.id=id, math_problems.problem_level_id, math_problem_template_id)",
          "upd(math_problems, math_problems.id=id, math_problems.question_markup, question_markup)",
          "upd(math_problems, math_problems.id=id, math_problems.updated_at, updated_at)",
          "upd(math_problems, math_problems.id=id, math_problems.answer_markup, answer_markup)"
        ]
      },
      {
        "signature": "void readMathProblem(int id)",
        "body": [
          "pi([math_problems.problem_level_id, math_problems.question_markup, math_problems.answer_markup], sigma(math_problems.id=id, math_problems))"
        ]
      },
      {
        "signature": "void readMathProblemCreateTime(int id)",
        "body": [
          "pi([math_problems.created_at], sigma(math_problems.id=id, math_problems))"
        ]
      },
      {
        "signature": "void readMathProblemUpdateTime(int id)",
        "body": [
          "pi([math_problems.updated_at], sigma(math_problems.id=id, math_problems))"
        ]
      },
      {
        "signature": "void createSubject(int id, String title, String created_at, String updated_at)",
        "body": [
          "ins(subjects, (id, title, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteSubject(int id)",
        "body": [
          "del(subjects, subjects.id=id)"
        ]
      },
      {
        "signature": "void updateSubject(int id, String title, String updated_at)",
        "body": [
          "upd(subjects, subjects.id=id, subjects.title, title)",
          "upd(subjects, subjects.id=id, subjects.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readSubject(int id)",
        "body": [
          "pi([subjects.title], sigma(subjects.id=id, subjects))"
        ]
      },
      {
        "signature": "void readSubjectCreateTime(int id)",
        "body": [
          "pi([subjects.created_at], sigma(subjects.id=id, subjects))"
        ]
      },
      {
        "signature": "void readSubjectUpdateTime(int id)",
        "body": [
          "pi([subjects.updated_at], sigma(subjects.id=id, subjects))"
        ]
      },
      {
        "signature": "void createWorksheetProblem(int id, int worksheet_id, int math_problem_id, int problem_number, String created_at, String updated_at)",
        "body": [
          "ins(worksheet_problems, (id, worksheet_id, math_problem_id, problem_number, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteWorksheetProblem(int id)",
        "body": [
          "del(worksheet_problems, worksheet_problems.id=id)"
        ]
      },
      {
        "signature": "void updateWorksheetProblem(int id, int worksheet_id, int math_problem_id, int problem_number, String updated_at)",
        "body": [
          "upd(worksheet_problems, worksheet_problems.id=id, worksheet_problems.worksheet_id, worksheet_id)",
          "upd(worksheet_problems, worksheet_problems.id=id, worksheet_problems.math_problem_id, math_problem_id)",
          "upd(worksheet_problems, worksheet_problems.id=id, worksheet_problems.problem_number, problem_number)",
          "upd(worksheet_problems, worksheet_problems.id=id, worksheet_problems.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readWorksheetProblem(int id)",
        "body": [
          "pi([worksheet_problems.worksheet_id, worksheet_problems.math_problem_id, worksheet_problems.problem_number], sigma(worksheet_problems.id=id, worksheet_problems))"
        ]
      },
      {
        "signature": "void readWorksheetProblemCreateTime(int id)",
        "body": [
          "pi([worksheet_problems.created_at], sigma(worksheet_problems.id=id, worksheet_problems))"
        ]
      },
      {
        "signature": "void readWorksheetProblemUpdateTime(int id)",
        "body": [
          "pi([worksheet_problems.updated_at], sigma(worksheet_problems.id=id, worksheet_problems))"
        ]
      },
      {
        "signature": "void createWorksheet(int id, String title, String created_at, String updated_at)",
        "body": [
          "ins(worksheets, (id, title, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteWorksheet(int id)",
        "body": [
          "del(worksheets, worksheets.id=id)"
        ]
      },
      {
        "signature": "void updateWorksheet(int id, String title, String updated_at)",
        "body": [
          "upd(worksheets, worksheets.id=id, worksheets.title, title)",
          "upd(worksheets, worksheets.id=id, worksheets.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readWorksheet(int id)",
        "body": [
          "pi([worksheets.title], sigma(worksheets.id=id, worksheets))"
        ]
      },
      {
        "signature": "void readWorksheetCreateTime(int id)",
        "body": [
          "pi([worksheets.created_at], sigma(worksheets.id=id, worksheets))"
        ]
      },
      {
        "signature": "void readWorksheetUpdateTime(int id)",
        "body": [
          "pi([worksheets.updated_at], sigma(worksheets.id=id, worksheets))"
        ]
      },
      {
        "signature": "void readLessonSubject(int id)",
        "body": [
          "pi([subjects.id, subjects.title], sigma(lessons.id=id, join(lessons, subjects)))"
        ]
      },
      {
        "signature": "void readSubjectLesson(int id)",
        "body": [
          "pi([lessons.id, lessons.title, lessons.chapter, lessons.section, lessons.subject_id], sigma(subjects.id=id, join(lessons, subjects)))"
        ]
      },
      {
        "signature": "void readMathProblemTemplateLesson(int id)",
        "body": [
          "pi([lessons.id, lessons.title, lessons.chapter, lessons.section, lessons.subject_id], sigma(problem_levels.id=id, join(join(problem_levels, math_problem_templates), lessons)))"
        ]
      },
      {
        "signature": "void readLessonMathProblemTemplate(int id)",
        "body": [
          "pi([problem_levels.id, math_problem_templates.lesson_id, math_problem_templates.instruction_id, problem_levels.difficulty, math_problem_templates.display_mode], sigma(lessons.id=id, join(join(math_problem_templates, lessons), problem_levels)))"
        ]
      },
      {
        "signature": "void readMathProblemTemplateInstruction(int id)",
        "body": [
          "pi([instructions.id, instructions.description], sigma(problem_levels.id=id, join(join(problem_levels, math_problem_templates), instructions)))"
        ]
      },
      {
        "signature": "void readInstructionMathProblemTemplate(int id)",
        "body": [
          "pi([problem_levels.id, math_problem_templates.lesson_id, math_problem_templates.instruction_id, problem_levels.difficulty, math_problem_templates.display_mode], sigma(instructions.id=id, join(join(math_problem_templates, instructions), problem_levels)))"
        ]
      },
      {
        "signature": "void readMathProblemMathProblemTemplate(int id)",
        "body": [
          "pi([problem_levels.id, math_problem_templates.lesson_id, math_problem_templates.instruction_id, problem_levels.difficulty, math_problem_templates.display_mode], sigma(math_problems.id=id, join(join(math_problems, problem_levels), math_problem_templates)))"
        ]
      },
      {
        "signature": "void readMathProblemTemplateMathProblem(int id)",
        "body": [
          "pi([math_problems.id, math_problems.problem_level_id, math_problems.question_markup, math_problems.answer_markup], sigma(problem_levels.id=id, join(math_problems, problem_levels)))"
        ]
      },
      {
        "signature": "void readWorksheetProblemWorksheet(int id)",
        "body": [
          "pi([worksheets.id, worksheets.title], sigma(worksheet_problems.id=id, join(worksheet_problems, worksheets)))"
        ]
      },
      {
        "signature": "void readWorksheetWorksheetProblem(int id)",
        "body": [
          "pi([worksheet_problems.id, worksheet_problems.worksheet_id, worksheet_problems.math_problem_id, worksheet_problems.problem_number], sigma(worksheets.id=id, join(worksheet_problems, worksheets)))"
        ]
      },
      {
        "signature": "void readWorksheetProblemMathProblem(int id)",
        "body": [
          "pi([math_problems.id, math_problems.problem_level_id, math_problems.question_markup, math_problems.answer_markup], sigma(worksheet_problems.id=id, join(worksheet_problems, math_problems)))"
        ]
      },
      {
        "signature": "void readMathProblemWorksheetProblem(int id)",
        "body": [
          "pi([worksheet_problems.id, worksheet_problems.worksheet_id, worksheet_problems.math_problem_id, worksheet_problems.problem_number], sigma(math_problems.id=id, join(worksheet_problems, math_problems)))"
        ]
      }
    ]
  }
}