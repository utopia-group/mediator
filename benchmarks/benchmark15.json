{
  "source": {
    "relations": [
      "articles(int articles.id, String articles.title, String articles.content, int articles.user_id, String articles.public, String articles.published, String articles.created_at, String articles.updated_at, String articles.permalink, int articles.category_id)",
      "blog_posts(int blog_posts.id, int blog_posts.blog_id, String blog_posts.content, String blog_posts.created_at, String blog_posts.updated_at, String blog_posts.public)",
      "blogs(int blogs.id, String blogs.title, int blogs.user_id, String blogs.created_at, String blogs.updated_at)",
      "categories(int categories.id, String categories.name, String categories.created_at, String categories.updated_at)",
      "comments(int comments.id, int comments.commenter_id, int comments.commentable_id, String comments.commentable_type, String comments.content, String comments.created_at, String comments.updated_at, String comments.public, String comments.commenter_name)",
      "conversations(int conversations.id, String conversations.created_at, String conversations.updated_at)",
      "events(int events.id, String events.name, String events.city, String events.country, String events.state, String events.start_date, String events.end_date, int events.user_id, String events.created_at, String events.updated_at)",
      "events_users(int events_users.id, int events_users.user_id, int events_users.event_id)",
      "feeds(int feeds.id, String feeds.name, String feeds.created_at, String feeds.updated_at, String feeds.store_name, String feeds.hidden, int feeds.user_id, String feeds.permalink, String feeds.description)",
      "likes(int likes.id, int likes.liker_id, int likes.liked_item_id, String likes.liked_item_type, String likes.created_at, String likes.updated_at)",
      "messages(int messages.id, String messages.content, int messages.sender_id, int messages.recipient_id, String messages.read, int messages.conversation_id, String messages.created_at, String messages.updated_at)",
      "notifications(int notifications.id, int notifications.user_id, int notifications.sender_id, int notifications.item_id, String notifications.item_type, String notifications.created_at, String notifications.updated_at, String notifications.action_type, int notifications.action_id, String notifications.public, String notifications.read)",
      "pages(int pages.id, String pages.content, String pages.created_at, String pages.updated_at, String pages.name)",
      "posts(int posts.id, String posts.content, int posts.user_id, String posts.created_at, String posts.updated_at, String posts.public, String posts.sticky, int posts.feed_id)",
      "taggings(int taggings.id, int taggings.tag_id, int taggings.taggable_id, String taggings.taggable_type, int taggings.tagger_id, String taggings.tagger_type, String taggings.context, String taggings.created_at)",
      "tags(int tags.id, String tags.name)",
      "users(int users.id, String users.name, String users.email, String users.remember_token, String users.password_digest, String users.admin, String users.created_at, String users.updated_at, String users.gravatar_suffix, String users.nickname, String users.reset_code, String users.country, String users.city, String users.modified_user, String users.author, String users.birthday, String users.started_playing, String users.bap, String users.bap_name, String users.bap_induction, String users.motto, String users.hobbies, int users.privacy_settings, String users.latitude, String users.longitude, String users.last_visit, String users.about_title, String users.about_content)",
      "users_videos(int users_videos.id, int users_videos.user_id, int users_videos.video_id)",
      "videos(int videos.id, int videos.user_id, String videos.title, String videos.vendor, String videos.created_at, String videos.updated_at, String videos.uid, String videos.url, String videos.public, String videos.location, String videos.maker, String videos.players, String videos.for_feedback, int videos.feed_id)"
    ],
    "primarykeys": [
      "articles(articles.id)",
      "blog_posts(blog_posts.id)",
      "blogs(blogs.id)",
      "categories(categories.id)",
      "comments(comments.id)",
      "conversations(conversations.id)",
      "events(events.id)",
      "events_users(events_users.id)",
      "feeds(feeds.id)",
      "likes(likes.id)",
      "messages(messages.id)",
      "notifications(notifications.id)",
      "pages(pages.id)",
      "posts(posts.id)",
      "taggings(taggings.id)",
      "tags(tags.id)",
      "users(users.id)",
      "users_videos(users_videos.id)",
      "videos(videos.id)"
    ],
    "foreignkeys": [
      "articles(articles.user_id) -> users(users.id)",
      "articles(articles.category_id) -> categories(categories.id)",
      "blog_posts(blog_posts.blog_id) -> blogs(blogs.id)",
      "blogs(blogs.user_id) -> users(users.id)",
      "comments(comments.commenter_id) -> users(users.id)",
      "events(events.user_id) -> users(users.id)",
      "events_users(events_users.user_id) -> users(users.id)",
      "events_users(events_users.event_id) -> events(events.id)",
      "feeds(feeds.user_id) -> users(users.id)",
      "likes(likes.liker_id) -> users(users.id)",
      "messages(messages.sender_id) -> users(users.id)",
      "messages(messages.recipient_id) -> users(users.id)",
      "messages(messages.conversation_id) -> conversations(conversations.id)",
      "notifications(notifications.user_id) -> users(users.id)",
      "notifications(notifications.sender_id) -> users(users.id)",
      "posts(posts.user_id) -> users(users.id)",
      "posts(posts.feed_id) -> feeds(feeds.id)",
      "taggings(taggings.tag_id) -> tags(tags.id)",
      "users_videos(users_videos.user_id) -> users(users.id)",
      "users_videos(users_videos.video_id) -> videos(videos.id)",
      "videos(videos.user_id) -> users(users.id)",
      "videos(videos.feed_id) -> feeds(feeds.id)"
    ],
    "transactions": [
      {
        "signature": "void createArticle(int id, String title, String content, int user_id, String public, String published, String created_at, String updated_at, String permalink, int category_id)",
        "body": [
          "ins(articles, (id, title, content, user_id, public, published, created_at, updated_at, permalink, category_id))"
        ]
      },
      {
        "signature": "void deleteArticle(int id)",
        "body": [
          "del(articles, articles.id=id)"
        ]
      },
      {
        "signature": "void updateArticle(int id, String title, String content, int user_id, String public, String published, String updated_at, String permalink, int category_id)",
        "body": [
          "upd(articles, articles.id=id, articles.title, title)",
          "upd(articles, articles.id=id, articles.content, content)",
          "upd(articles, articles.id=id, articles.user_id, user_id)",
          "upd(articles, articles.id=id, articles.public, public)",
          "upd(articles, articles.id=id, articles.published, published)",
          "upd(articles, articles.id=id, articles.updated_at, updated_at)",
          "upd(articles, articles.id=id, articles.permalink, permalink)",
          "upd(articles, articles.id=id, articles.category_id, category_id)"
        ]
      },
      {
        "signature": "void readArticle(int id)",
        "body": [
          "pi([articles.title, articles.content, articles.user_id, articles.public, articles.published, articles.permalink, articles.category_id], sigma(articles.id=id, articles))"
        ]
      },
      {
        "signature": "void readArticleCreateTime(int id)",
        "body": [
          "pi([articles.created_at], sigma(articles.id=id, articles))"
        ]
      },
      {
        "signature": "void readArticleUpdateTime(int id)",
        "body": [
          "pi([articles.updated_at], sigma(articles.id=id, articles))"
        ]
      },
      {
        "signature": "void createBlogPost(int id, int blog_id, String content, String created_at, String updated_at, String public)",
        "body": [
          "ins(blog_posts, (id, blog_id, content, created_at, updated_at, public))"
        ]
      },
      {
        "signature": "void deleteBlogPost(int id)",
        "body": [
          "del(blog_posts, blog_posts.id=id)"
        ]
      },
      {
        "signature": "void updateBlogPost(int id, int blog_id, String content, String updated_at, String public)",
        "body": [
          "upd(blog_posts, blog_posts.id=id, blog_posts.blog_id, blog_id)",
          "upd(blog_posts, blog_posts.id=id, blog_posts.content, content)",
          "upd(blog_posts, blog_posts.id=id, blog_posts.updated_at, updated_at)",
          "upd(blog_posts, blog_posts.id=id, blog_posts.public, public)"
        ]
      },
      {
        "signature": "void readBlogPost(int id)",
        "body": [
          "pi([blog_posts.blog_id, blog_posts.content, blog_posts.public], sigma(blog_posts.id=id, blog_posts))"
        ]
      },
      {
        "signature": "void readBlogPostCreateTime(int id)",
        "body": [
          "pi([blog_posts.created_at], sigma(blog_posts.id=id, blog_posts))"
        ]
      },
      {
        "signature": "void readBlogPostUpdateTime(int id)",
        "body": [
          "pi([blog_posts.updated_at], sigma(blog_posts.id=id, blog_posts))"
        ]
      },
      {
        "signature": "void createBlog(int id, String title, int user_id, String created_at, String updated_at)",
        "body": [
          "ins(blogs, (id, title, user_id, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteBlog(int id)",
        "body": [
          "del(blogs, blogs.id=id)"
        ]
      },
      {
        "signature": "void updateBlog(int id, String title, int user_id, String updated_at)",
        "body": [
          "upd(blogs, blogs.id=id, blogs.title, title)",
          "upd(blogs, blogs.id=id, blogs.user_id, user_id)",
          "upd(blogs, blogs.id=id, blogs.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readBlog(int id)",
        "body": [
          "pi([blogs.title, blogs.user_id], sigma(blogs.id=id, blogs))"
        ]
      },
      {
        "signature": "void readBlogCreateTime(int id)",
        "body": [
          "pi([blogs.created_at], sigma(blogs.id=id, blogs))"
        ]
      },
      {
        "signature": "void readBlogUpdateTime(int id)",
        "body": [
          "pi([blogs.updated_at], sigma(blogs.id=id, blogs))"
        ]
      },
      {
        "signature": "void createCategory(int id, String name, String created_at, String updated_at)",
        "body": [
          "ins(categories, (id, name, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteCategory(int id)",
        "body": [
          "del(categories, categories.id=id)"
        ]
      },
      {
        "signature": "void updateCategory(int id, String name, String updated_at)",
        "body": [
          "upd(categories, categories.id=id, categories.name, name)",
          "upd(categories, categories.id=id, categories.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readCategory(int id)",
        "body": [
          "pi([categories.name], sigma(categories.id=id, categories))"
        ]
      },
      {
        "signature": "void readCategoryCreateTime(int id)",
        "body": [
          "pi([categories.created_at], sigma(categories.id=id, categories))"
        ]
      },
      {
        "signature": "void readCategoryUpdateTime(int id)",
        "body": [
          "pi([categories.updated_at], sigma(categories.id=id, categories))"
        ]
      },
      {
        "signature": "void createComment(int id, int commenter_id, int commentable_id, String commentable_type, String content, String created_at, String updated_at, String public, String commenter_name)",
        "body": [
          "ins(comments, (id, commenter_id, commentable_id, commentable_type, content, created_at, updated_at, public, commenter_name))"
        ]
      },
      {
        "signature": "void deleteComment(int id)",
        "body": [
          "del(comments, comments.id=id)"
        ]
      },
      {
        "signature": "void updateComment(int id, int commenter_id, int commentable_id, String commentable_type, String content, String updated_at, String public, String commenter_name)",
        "body": [
          "upd(comments, comments.id=id, comments.commenter_id, commenter_id)",
          "upd(comments, comments.id=id, comments.commentable_id, commentable_id)",
          "upd(comments, comments.id=id, comments.commentable_type, commentable_type)",
          "upd(comments, comments.id=id, comments.content, content)",
          "upd(comments, comments.id=id, comments.updated_at, updated_at)",
          "upd(comments, comments.id=id, comments.public, public)",
          "upd(comments, comments.id=id, comments.commenter_name, commenter_name)"
        ]
      },
      {
        "signature": "void readComment(int id)",
        "body": [
          "pi([comments.commenter_id, comments.commentable_id, comments.commentable_type, comments.content, comments.public, comments.commenter_name], sigma(comments.id=id, comments))"
        ]
      },
      {
        "signature": "void readCommentCreateTime(int id)",
        "body": [
          "pi([comments.created_at], sigma(comments.id=id, comments))"
        ]
      },
      {
        "signature": "void readCommentUpdateTime(int id)",
        "body": [
          "pi([comments.updated_at], sigma(comments.id=id, comments))"
        ]
      },
      {
        "signature": "void createConversation(int id, String created_at, String updated_at)",
        "body": [
          "ins(conversations, (id, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteConversation(int id)",
        "body": [
          "del(conversations, conversations.id=id)"
        ]
      },
      {
        "signature": "void updateConversation(int id, String updated_at)",
        "body": [
          "upd(conversations, conversations.id=id, conversations.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readConversationCreateTime(int id)",
        "body": [
          "pi([conversations.created_at], sigma(conversations.id=id, conversations))"
        ]
      },
      {
        "signature": "void readConversationUpdateTime(int id)",
        "body": [
          "pi([conversations.updated_at], sigma(conversations.id=id, conversations))"
        ]
      },
      {
        "signature": "void createEvent(int id, String name, String city, String country, String state, String start_date, String end_date, int user_id, String created_at, String updated_at)",
        "body": [
          "ins(events, (id, name, city, country, state, start_date, end_date, user_id, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteEvent(int id)",
        "body": [
          "del(events, events.id=id)"
        ]
      },
      {
        "signature": "void updateEvent(int id, String name, String city, String country, String state, String start_date, String end_date, int user_id, String updated_at)",
        "body": [
          "upd(events, events.id=id, events.name, name)",
          "upd(events, events.id=id, events.city, city)",
          "upd(events, events.id=id, events.country, country)",
          "upd(events, events.id=id, events.state, state)",
          "upd(events, events.id=id, events.start_date, start_date)",
          "upd(events, events.id=id, events.end_date, end_date)",
          "upd(events, events.id=id, events.user_id, user_id)",
          "upd(events, events.id=id, events.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readEvent(int id)",
        "body": [
          "pi([events.name, events.city, events.country, events.state, events.start_date, events.end_date, events.user_id], sigma(events.id=id, events))"
        ]
      },
      {
        "signature": "void readEventCreateTime(int id)",
        "body": [
          "pi([events.created_at], sigma(events.id=id, events))"
        ]
      },
      {
        "signature": "void readEventUpdateTime(int id)",
        "body": [
          "pi([events.updated_at], sigma(events.id=id, events))"
        ]
      },
      {
        "signature": "void createEventUser(int id, int user_id, int event_id)",
        "body": [
          "ins(events_users, (id, user_id, event_id))"
        ]
      },
      {
        "signature": "void deleteEventUser(int id)",
        "body": [
          "del(events_users, events_users.id=id)"
        ]
      },
      {
        "signature": "void updateEventUser(int id, int user_id, int event_id)",
        "body": [
          "upd(events_users, events_users.id=id, events_users.user_id, user_id)",
          "upd(events_users, events_users.id=id, events_users.event_id, event_id)"
        ]
      },
      {
        "signature": "void readEventUser(int id)",
        "body": [
          "pi([events_users.user_id, events_users.event_id], sigma(events_users.id=id, events_users))"
        ]
      },
      {
        "signature": "void createFeed(int id, String name, String created_at, String updated_at, String store_name, String hidden, int user_id, String permalink, String description)",
        "body": [
          "ins(feeds, (id, name, created_at, updated_at, store_name, hidden, user_id, permalink, description))"
        ]
      },
      {
        "signature": "void deleteFeed(int id)",
        "body": [
          "del(feeds, feeds.id=id)"
        ]
      },
      {
        "signature": "void updateFeed(int id, String name, String updated_at, String store_name, String hidden, int user_id, String permalink, String description)",
        "body": [
          "upd(feeds, feeds.id=id, feeds.name, name)",
          "upd(feeds, feeds.id=id, feeds.updated_at, updated_at)",
          "upd(feeds, feeds.id=id, feeds.store_name, store_name)",
          "upd(feeds, feeds.id=id, feeds.hidden, hidden)",
          "upd(feeds, feeds.id=id, feeds.user_id, user_id)",
          "upd(feeds, feeds.id=id, feeds.permalink, permalink)",
          "upd(feeds, feeds.id=id, feeds.description, description)"
        ]
      },
      {
        "signature": "void readFeed(int id)",
        "body": [
          "pi([feeds.name, feeds.store_name, feeds.hidden, feeds.user_id, feeds.permalink, feeds.description], sigma(feeds.id=id, feeds))"
        ]
      },
      {
        "signature": "void readFeedCreateTime(int id)",
        "body": [
          "pi([feeds.created_at], sigma(feeds.id=id, feeds))"
        ]
      },
      {
        "signature": "void readFeedUpdateTime(int id)",
        "body": [
          "pi([feeds.updated_at], sigma(feeds.id=id, feeds))"
        ]
      },
      {
        "signature": "void createLike(int id, int liker_id, int liked_item_id, String liked_item_type, String created_at, String updated_at)",
        "body": [
          "ins(likes, (id, liker_id, liked_item_id, liked_item_type, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteLike(int id)",
        "body": [
          "del(likes, likes.id=id)"
        ]
      },
      {
        "signature": "void updateLike(int id, int liker_id, int liked_item_id, String liked_item_type, String updated_at)",
        "body": [
          "upd(likes, likes.id=id, likes.liker_id, liker_id)",
          "upd(likes, likes.id=id, likes.liked_item_id, liked_item_id)",
          "upd(likes, likes.id=id, likes.liked_item_type, liked_item_type)",
          "upd(likes, likes.id=id, likes.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readLike(int id)",
        "body": [
          "pi([likes.liker_id, likes.liked_item_id, likes.liked_item_type], sigma(likes.id=id, likes))"
        ]
      },
      {
        "signature": "void readLikeCreateTime(int id)",
        "body": [
          "pi([likes.created_at], sigma(likes.id=id, likes))"
        ]
      },
      {
        "signature": "void readLikeUpdateTime(int id)",
        "body": [
          "pi([likes.updated_at], sigma(likes.id=id, likes))"
        ]
      },
      {
        "signature": "void createMessage(int id, String content, int sender_id, int recipient_id, String read, int conversation_id, String created_at, String updated_at)",
        "body": [
          "ins(messages, (id, content, sender_id, recipient_id, read, conversation_id, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteMessage(int id)",
        "body": [
          "del(messages, messages.id=id)"
        ]
      },
      {
        "signature": "void updateMessage(int id, String content, int sender_id, int recipient_id, String read, int conversation_id, String updated_at)",
        "body": [
          "upd(messages, messages.id=id, messages.content, content)",
          "upd(messages, messages.id=id, messages.sender_id, sender_id)",
          "upd(messages, messages.id=id, messages.recipient_id, recipient_id)",
          "upd(messages, messages.id=id, messages.read, read)",
          "upd(messages, messages.id=id, messages.conversation_id, conversation_id)",
          "upd(messages, messages.id=id, messages.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readMessage(int id)",
        "body": [
          "pi([messages.content, messages.sender_id, messages.recipient_id, messages.read, messages.conversation_id], sigma(messages.id=id, messages))"
        ]
      },
      {
        "signature": "void readMessageCreateTime(int id)",
        "body": [
          "pi([messages.created_at], sigma(messages.id=id, messages))"
        ]
      },
      {
        "signature": "void readMessageUpdateTime(int id)",
        "body": [
          "pi([messages.updated_at], sigma(messages.id=id, messages))"
        ]
      },
      {
        "signature": "void createNotification(int id, int user_id, int sender_id, int item_id, String item_type, String created_at, String updated_at, String action_type, int action_id, String public, String read)",
        "body": [
          "ins(notifications, (id, user_id, sender_id, item_id, item_type, created_at, updated_at, action_type, action_id, public, read))"
        ]
      },
      {
        "signature": "void deleteNotification(int id)",
        "body": [
          "del(notifications, notifications.id=id)"
        ]
      },
      {
        "signature": "void updateNotification(int id, int user_id, int sender_id, int item_id, String item_type, String updated_at, String action_type, int action_id, String public, String read)",
        "body": [
          "upd(notifications, notifications.id=id, notifications.user_id, user_id)",
          "upd(notifications, notifications.id=id, notifications.sender_id, sender_id)",
          "upd(notifications, notifications.id=id, notifications.item_id, item_id)",
          "upd(notifications, notifications.id=id, notifications.item_type, item_type)",
          "upd(notifications, notifications.id=id, notifications.updated_at, updated_at)",
          "upd(notifications, notifications.id=id, notifications.action_type, action_type)",
          "upd(notifications, notifications.id=id, notifications.action_id, action_id)",
          "upd(notifications, notifications.id=id, notifications.public, public)",
          "upd(notifications, notifications.id=id, notifications.read, read)"
        ]
      },
      {
        "signature": "void readNotification(int id)",
        "body": [
          "pi([notifications.user_id, notifications.sender_id, notifications.item_id, notifications.item_type, notifications.action_type, notifications.action_id, notifications.public, notifications.read], sigma(notifications.id=id, notifications))"
        ]
      },
      {
        "signature": "void readNotificationCreateTime(int id)",
        "body": [
          "pi([notifications.created_at], sigma(notifications.id=id, notifications))"
        ]
      },
      {
        "signature": "void readNotificationUpdateTime(int id)",
        "body": [
          "pi([notifications.updated_at], sigma(notifications.id=id, notifications))"
        ]
      },
      {
        "signature": "void createPage(int id, String content, String created_at, String updated_at, String name)",
        "body": [
          "ins(pages, (id, content, created_at, updated_at, name))"
        ]
      },
      {
        "signature": "void deletePage(int id)",
        "body": [
          "del(pages, pages.id=id)"
        ]
      },
      {
        "signature": "void updatePage(int id, String content, String updated_at, String name)",
        "body": [
          "upd(pages, pages.id=id, pages.content, content)",
          "upd(pages, pages.id=id, pages.updated_at, updated_at)",
          "upd(pages, pages.id=id, pages.name, name)"
        ]
      },
      {
        "signature": "void readPage(int id)",
        "body": [
          "pi([pages.content, pages.name], sigma(pages.id=id, pages))"
        ]
      },
      {
        "signature": "void readPageCreateTime(int id)",
        "body": [
          "pi([pages.created_at], sigma(pages.id=id, pages))"
        ]
      },
      {
        "signature": "void readPageUpdateTime(int id)",
        "body": [
          "pi([pages.updated_at], sigma(pages.id=id, pages))"
        ]
      },
      {
        "signature": "void createPost(int id, String content, int user_id, String created_at, String updated_at, String public, String sticky, int feed_id)",
        "body": [
          "ins(posts, (id, content, user_id, created_at, updated_at, public, sticky, feed_id))"
        ]
      },
      {
        "signature": "void deletePost(int id)",
        "body": [
          "del(posts, posts.id=id)"
        ]
      },
      {
        "signature": "void updatePost(int id, String content, int user_id, String updated_at, String public, String sticky, int feed_id)",
        "body": [
          "upd(posts, posts.id=id, posts.content, content)",
          "upd(posts, posts.id=id, posts.user_id, user_id)",
          "upd(posts, posts.id=id, posts.updated_at, updated_at)",
          "upd(posts, posts.id=id, posts.public, public)",
          "upd(posts, posts.id=id, posts.sticky, sticky)",
          "upd(posts, posts.id=id, posts.feed_id, feed_id)"
        ]
      },
      {
        "signature": "void readPost(int id)",
        "body": [
          "pi([posts.content, posts.user_id, posts.public, posts.sticky, posts.feed_id], sigma(posts.id=id, posts))"
        ]
      },
      {
        "signature": "void readPostCreateTime(int id)",
        "body": [
          "pi([posts.created_at], sigma(posts.id=id, posts))"
        ]
      },
      {
        "signature": "void readPostUpdateTime(int id)",
        "body": [
          "pi([posts.updated_at], sigma(posts.id=id, posts))"
        ]
      },
      {
        "signature": "void createTagging(int id, int tag_id, int taggable_id, String taggable_type, int tagger_id, String tagger_type, String context, String created_at)",
        "body": [
          "ins(taggings, (id, tag_id, taggable_id, taggable_type, tagger_id, tagger_type, context, created_at))"
        ]
      },
      {
        "signature": "void deleteTagging(int id)",
        "body": [
          "del(taggings, taggings.id=id)"
        ]
      },
      {
        "signature": "void updateTagging(int id, int tag_id, int taggable_id, String taggable_type, int tagger_id, String tagger_type, String context)",
        "body": [
          "upd(taggings, taggings.id=id, taggings.tag_id, tag_id)",
          "upd(taggings, taggings.id=id, taggings.taggable_id, taggable_id)",
          "upd(taggings, taggings.id=id, taggings.taggable_type, taggable_type)",
          "upd(taggings, taggings.id=id, taggings.tagger_id, tagger_id)",
          "upd(taggings, taggings.id=id, taggings.tagger_type, tagger_type)",
          "upd(taggings, taggings.id=id, taggings.context, context)"
        ]
      },
      {
        "signature": "void readTagging(int id)",
        "body": [
          "pi([taggings.tag_id, taggings.taggable_id, taggings.taggable_type, taggings.tagger_id, taggings.tagger_type, taggings.context], sigma(taggings.id=id, taggings))"
        ]
      },
      {
        "signature": "void readTaggingCreateTime(int id)",
        "body": [
          "pi([taggings.created_at], sigma(taggings.id=id, taggings))"
        ]
      },
      {
        "signature": "void createTag(int id, String name)",
        "body": [
          "ins(tags, (id, name))"
        ]
      },
      {
        "signature": "void deleteTag(int id)",
        "body": [
          "del(tags, tags.id=id)"
        ]
      },
      {
        "signature": "void updateTag(int id, String name)",
        "body": [
          "upd(tags, tags.id=id, tags.name, name)"
        ]
      },
      {
        "signature": "void readTag(int id)",
        "body": [
          "pi([tags.name], sigma(tags.id=id, tags))"
        ]
      },
      {
        "signature": "void createUser(int id, String name, String email, String remember_token, String password_digest, String admin, String created_at, String updated_at, String gravatar_suffix, String nickname, String reset_code, String country, String city, String modified_user, String author, String birthday, String started_playing, String bap, String bap_name, String bap_induction, String motto, String hobbies, int privacy_settings, String latitude, String longitude, String last_visit, String about_title, String about_content)",
        "body": [
          "ins(users, (id, name, email, remember_token, password_digest, admin, created_at, updated_at, gravatar_suffix, nickname, reset_code, country, city, modified_user, author, birthday, started_playing, bap, bap_name, bap_induction, motto, hobbies, privacy_settings, latitude, longitude, last_visit, about_title, about_content))"
        ]
      },
      {
        "signature": "void deleteUser(int id)",
        "body": [
          "del(users, users.id=id)"
        ]
      },
      {
        "signature": "void updateUserProfile(int id, String name, String email, String nickname, String birthday, String country, String city, String motto, String hobbies, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.name, name)",
          "upd(users, users.id=id, users.email, email)",
          "upd(users, users.id=id, users.nickname, nickname)",
          "upd(users, users.id=id, users.birthday, birthday)",
          "upd(users, users.id=id, users.country, country)",
          "upd(users, users.id=id, users.city, city)",
          "upd(users, users.id=id, users.motto, motto)",
          "upd(users, users.id=id, users.hobbies, hobbies)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserAdmin(int id, String admin, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.admin, admin)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserPassword(int id, String remember_token, String password_digest, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.remember_token, remember_token)",
          "upd(users, users.id=id, users.password_digest, password_digest)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserGravatar(int id, String gravatar_suffix, String reset_code, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.gravatar_suffix, gravatar_suffix)",
          "upd(users, users.id=id, users.reset_code, reset_code)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserBap(int id, String bap, String bap_name, String bap_induction, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.bap, bap)",
          "upd(users, users.id=id, users.bap_name, bap_name)",
          "upd(users, users.id=id, users.bap_induction, bap_induction)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserPrivateSettings(int id, String privacy_settings, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.privacy_settings, privacy_settings)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserVisitInfo(int id, String latitude, String longitude, String last_visit, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.latitude, latitude)",
          "upd(users, users.id=id, users.longitude, longitude)",
          "upd(users, users.id=id, users.last_visit, last_visit)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserAbout(int id, String about_title, String about_content, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.about_title, about_title)",
          "upd(users, users.id=id, users.about_content, about_content)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void findUserByEmail(String email)",
        "body": [
          "pi([users.id], sigma(users.email=email, users))"
        ]
      },
      {
        "signature": "void readUser(int id)",
        "body": [
          "pi([users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(users.id=id, users))"
        ]
      },
      {
        "signature": "void readUserCreateTime(int id)",
        "body": [
          "pi([users.created_at], sigma(users.id=id, users))"
        ]
      },
      {
        "signature": "void readUserUpdateTime(int id)",
        "body": [
          "pi([users.updated_at], sigma(users.id=id, users))"
        ]
      },
      {
        "signature": "void createUserVideo(int id, int user_id, int video_id)",
        "body": [
          "ins(users_videos, (id, user_id, video_id))"
        ]
      },
      {
        "signature": "void deleteUserVideo(int id)",
        "body": [
          "del(users_videos, users_videos.id=id)"
        ]
      },
      {
        "signature": "void updateUserVideo(int id, int user_id, int video_id)",
        "body": [
          "upd(users_videos, users_videos.id=id, users_videos.user_id, user_id)",
          "upd(users_videos, users_videos.id=id, users_videos.video_id, video_id)"
        ]
      },
      {
        "signature": "void readUserVideo(int id)",
        "body": [
          "pi([users_videos.user_id, users_videos.video_id], sigma(users_videos.id=id, users_videos))"
        ]
      },
      {
        "signature": "void createVideo(int id, int user_id, String title, String vendor, String created_at, String updated_at, String uid, String url, String public, String location, String maker, String players, String for_feedback, int feed_id)",
        "body": [
          "ins(videos, (id, user_id, title, vendor, created_at, updated_at, uid, url, public, location, maker, players, for_feedback, feed_id))"
        ]
      },
      {
        "signature": "void deleteVideo(int id)",
        "body": [
          "del(videos, videos.id=id)"
        ]
      },
      {
        "signature": "void updateVideo(int id, int user_id, String title, String vendor, String updated_at, String uid, String url, String public, String location, String maker, String players, String for_feedback, int feed_id)",
        "body": [
          "upd(videos, videos.id=id, videos.user_id, user_id)",
          "upd(videos, videos.id=id, videos.title, title)",
          "upd(videos, videos.id=id, videos.vendor, vendor)",
          "upd(videos, videos.id=id, videos.updated_at, updated_at)",
          "upd(videos, videos.id=id, videos.uid, uid)",
          "upd(videos, videos.id=id, videos.url, url)",
          "upd(videos, videos.id=id, videos.public, public)",
          "upd(videos, videos.id=id, videos.location, location)",
          "upd(videos, videos.id=id, videos.maker, maker)",
          "upd(videos, videos.id=id, videos.players, players)",
          "upd(videos, videos.id=id, videos.for_feedback, for_feedback)",
          "upd(videos, videos.id=id, videos.feed_id, feed_id)"
        ]
      },
      {
        "signature": "void readVideo(int id)",
        "body": [
          "pi([videos.user_id, videos.title, videos.vendor, videos.uid, videos.url, videos.public, videos.location, videos.maker, videos.players, videos.for_feedback, videos.feed_id], sigma(videos.id=id, videos))"
        ]
      },
      {
        "signature": "void readVideoCreateTime(int id)",
        "body": [
          "pi([videos.created_at], sigma(videos.id=id, videos))"
        ]
      },
      {
        "signature": "void readVideoUpdateTime(int id)",
        "body": [
          "pi([videos.updated_at], sigma(videos.id=id, videos))"
        ]
      },
      {
        "signature": "void readArticleUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(articles.id=id, join(articles, users)))"
        ]
      },
      {
        "signature": "void readUserArticle(int id)",
        "body": [
          "pi([articles.id, articles.title, articles.content, articles.user_id, articles.public, articles.published, articles.permalink, articles.category_id], sigma(users.id=id, join(articles, users)))"
        ]
      },
      {
        "signature": "void readArticleCategory(int id)",
        "body": [
          "pi([categories.id, categories.name], sigma(articles.id=id, join(articles, categories)))"
        ]
      },
      {
        "signature": "void readCategoryArticle(int id)",
        "body": [
          "pi([articles.id, articles.title, articles.content, articles.user_id, articles.public, articles.published, articles.permalink, articles.category_id], sigma(categories.id=id, join(articles, categories)))"
        ]
      },
      {
        "signature": "void readBlogPostBlog(int id)",
        "body": [
          "pi([blogs.id, blogs.title, blogs.user_id], sigma(blog_posts.id=id, join(blog_posts, blogs)))"
        ]
      },
      {
        "signature": "void readBlogBlogPost(int id)",
        "body": [
          "pi([blog_posts.id, blog_posts.blog_id, blog_posts.content, blog_posts.public], sigma(blogs.id=id, join(blog_posts, blogs)))"
        ]
      },
      {
        "signature": "void readBlogUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(blogs.id=id, join(blogs, users)))"
        ]
      },
      {
        "signature": "void readUserBlog(int id)",
        "body": [
          "pi([blogs.id, blogs.title, blogs.user_id], sigma(users.id=id, join(blogs, users)))"
        ]
      },
      {
        "signature": "void readCommentUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(comments.id=id, join(comments, users)))"
        ]
      },
      {
        "signature": "void readUserComment(int id)",
        "body": [
          "pi([comments.id, comments.commenter_id, comments.commentable_id, comments.commentable_type, comments.content, comments.public, comments.commenter_name], sigma(users.id=id, join(comments, users)))"
        ]
      },
      {
        "signature": "void getEventUser(int id)",
        "body": [
          "pi([users.name, users.email, users.nickname, users.country, users.city, users.birthday], sigma(events.id=id, join(join(events_users, events), users)))"
        ]
      },
      {
        "signature": "void getUserEvent(int id)",
        "body": [
          "pi([events.name, events.city, events.country, events.state, events.start_date, events.end_date], sigma(users.id=id, join(join(events_users, users), events)))"
        ]
      },
      {
        "signature": "void readFeedUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(feeds.id=id, join(feeds, users)))"
        ]
      },
      {
        "signature": "void readUserFeed(int id)",
        "body": [
          "pi([feeds.id, feeds.name, feeds.store_name, feeds.hidden, feeds.user_id, feeds.permalink, feeds.description], sigma(users.id=id, join(feeds, users)))"
        ]
      },
      {
        "signature": "void readLikeUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(likes.id=id, join(likes, users)))"
        ]
      },
      {
        "signature": "void readUserLike(int id)",
        "body": [
          "pi([likes.id, likes.liker_id, likes.liked_item_id, likes.liked_item_type], sigma(users.id=id, join(likes, users)))"
        ]
      },
      {
        "signature": "void readMessageUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(messages.id=id, join(messages, users)))"
        ]
      },
      {
        "signature": "void readUserMessage(int id)",
        "body": [
          "pi([messages.id, messages.content, messages.sender_id, messages.recipient_id, messages.read, messages.conversation_id], sigma(users.id=id, join(messages, users)))"
        ]
      },
      {
        "signature": "void readMessageUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(messages.id=id, join(messages, users)))"
        ]
      },
      {
        "signature": "void readUserMessage(int id)",
        "body": [
          "pi([messages.id, messages.content, messages.sender_id, messages.recipient_id, messages.read, messages.conversation_id], sigma(users.id=id, join(messages, users)))"
        ]
      },
      {
        "signature": "void readMessageConversation(int id)",
        "body": [
          "pi([conversations.id], sigma(messages.id=id, join(messages, conversations)))"
        ]
      },
      {
        "signature": "void readConversationMessage(int id)",
        "body": [
          "pi([messages.id, messages.content, messages.sender_id, messages.recipient_id, messages.read, messages.conversation_id], sigma(conversations.id=id, join(messages, conversations)))"
        ]
      },
      {
        "signature": "void readNotificationUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(notifications.id=id, join(notifications, users)))"
        ]
      },
      {
        "signature": "void readUserNotification(int id)",
        "body": [
          "pi([notifications.id, notifications.user_id, notifications.sender_id, notifications.item_id, notifications.item_type, notifications.action_type, notifications.action_id, notifications.public, notifications.read], sigma(users.id=id, join(notifications, users)))"
        ]
      },
      {
        "signature": "void readNotificationUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(notifications.id=id, join(notifications, users)))"
        ]
      },
      {
        "signature": "void readUserNotification(int id)",
        "body": [
          "pi([notifications.id, notifications.user_id, notifications.sender_id, notifications.item_id, notifications.item_type, notifications.action_type, notifications.action_id, notifications.public, notifications.read], sigma(users.id=id, join(notifications, users)))"
        ]
      },
      {
        "signature": "void readPostUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(posts.id=id, join(posts, users)))"
        ]
      },
      {
        "signature": "void readUserPost(int id)",
        "body": [
          "pi([posts.id, posts.content, posts.user_id, posts.public, posts.sticky, posts.feed_id], sigma(users.id=id, join(posts, users)))"
        ]
      },
      {
        "signature": "void readPostFeed(int id)",
        "body": [
          "pi([feeds.id, feeds.name, feeds.store_name, feeds.hidden, feeds.user_id, feeds.permalink, feeds.description], sigma(posts.id=id, join(posts, feeds)))"
        ]
      },
      {
        "signature": "void readFeedPost(int id)",
        "body": [
          "pi([posts.id, posts.content, posts.user_id, posts.public, posts.sticky, posts.feed_id], sigma(feeds.id=id, join(posts, feeds)))"
        ]
      },
      {
        "signature": "void readTaggingTag(int id)",
        "body": [
          "pi([tags.id, tags.name], sigma(taggings.id=id, join(taggings, tags)))"
        ]
      },
      {
        "signature": "void readTagTagging(int id)",
        "body": [
          "pi([taggings.id, taggings.tag_id, taggings.taggable_id, taggings.taggable_type, taggings.tagger_id, taggings.tagger_type, taggings.context], sigma(tags.id=id, join(taggings, tags)))"
        ]
      },
      {
        "signature": "void readUserVideoUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(users_videos.id=id, join(users_videos, users)))"
        ]
      },
      {
        "signature": "void readVideoUser(int id)",
        "body": [
          "pi([users.name, users.email, users.nickname, users.country, users.city, users.birthday], sigma(videos.id=id, join(join(users_videos, videos), users)))"
        ]
      },
      {
        "signature": "void readUserVideo(int id)",
        "body": [
          "pi([videos.title, videos.vendor, videos.uid, videos.url, videos.location, videos.maker, videos.players], sigma(users.id=id, join(join(users_videos, videos), users)))"
        ]
      },
      {
        "signature": "void readVideoFeed(int id)",
        "body": [
          "pi([feeds.id, feeds.name, feeds.store_name, feeds.hidden, feeds.user_id, feeds.permalink, feeds.description], sigma(videos.id=id, join(videos, feeds)))"
        ]
      },
      {
        "signature": "void readFeedVideo(int id)",
        "body": [
          "pi([videos.id, videos.user_id, videos.title, videos.vendor, videos.uid, videos.url, videos.public, videos.location, videos.maker, videos.players, videos.for_feedback, videos.feed_id], sigma(feeds.id=id, join(videos, feeds)))"
        ]
      }
    ]
  },
  "target": {
    "relations": [
      "articles(int articles.id, String articles.title, String articles.content, int articles.user_id, String articles.public, String articles.published, String articles.created_at, String articles.updated_at, String articles.permalink, int articles.category_id)",
      "blog_posts(int blog_posts.id, int blog_posts.blog_id, String blog_posts.content, String blog_posts.created_at, String blog_posts.updated_at, String blog_posts.public)",
      "blogs(int blogs.id, String blogs.title, int blogs.user_id, String blogs.created_at, String blogs.updated_at)",
      "categories(int categories.id, String categories.name, String categories.created_at, String categories.updated_at)",
      "comments(int comments.id, int comments.commenter_id, int comments.commentable_id, String comments.commentable_type, String comments.content, String comments.created_at, String comments.updated_at, String comments.public, String comments.commenter_name)",
      "conversations(int conversations.id, String conversations.created_at, String conversations.updated_at)",
      "events(int events.id, String events.name, String events.city, String events.country, String events.state, String events.start_date, String events.end_date, int events.user_id, String events.created_at, String events.updated_at)",
      "attendants(int attendants.id, int attendants.user_id, String attendants.role, int attendants.event_id, String attendants.created_at, String attendants.updated_at)",
      "feeds(int feeds.id, String feeds.name, String feeds.created_at, String feeds.updated_at, String feeds.store_name, String feeds.hidden, int feeds.user_id, String feeds.permalink, String feeds.description)",
      "likes(int likes.id, int likes.liker_id, int likes.liked_item_id, String likes.liked_item_type, String likes.created_at, String likes.updated_at)",
      "messages(int messages.id, String messages.content, int messages.sender_id, int messages.recipient_id, String messages.read, int messages.conversation_id, String messages.created_at, String messages.updated_at)",
      "notifications(int notifications.id, int notifications.user_id, int notifications.sender_id, int notifications.item_id, String notifications.item_type, String notifications.created_at, String notifications.updated_at, String notifications.action_type, int notifications.action_id, String notifications.public, String notifications.read)",
      "pages(int pages.id, String pages.content, String pages.created_at, String pages.updated_at, String pages.name)",
      "posts(int posts.id, String posts.content, int posts.user_id, String posts.created_at, String posts.updated_at, String posts.public, String posts.sticky, int posts.feed_id)",
      "taggings(int taggings.id, int taggings.tag_id, int taggings.taggable_id, String taggings.taggable_type, int taggings.tagger_id, String taggings.tagger_type, String taggings.context, String taggings.created_at)",
      "tags(int tags.id, String tags.name)",
      "users(int users.id, String users.name, String users.email, String users.remember_token, String users.password_digest, String users.admin, String users.created_at, String users.updated_at, String users.gravatar_suffix, String users.nickname, String users.reset_code, String users.country, String users.city, String users.modified_user, String users.author, String users.birthday, String users.started_playing, String users.bap, String users.bap_name, String users.bap_induction, String users.motto, String users.hobbies, int users.privacy_settings, String users.latitude, String users.longitude, String users.last_visit, String users.about_title, String users.about_content)",
      "users_videos(int users_videos.id, int users_videos.user_id, int users_videos.video_id)",
      "videos(int videos.id, int videos.user_id, String videos.title, String videos.vendor, String videos.created_at, String videos.updated_at, String videos.uid, String videos.url, String videos.public, String videos.location, String videos.maker, String videos.players, String videos.for_feedback, int videos.feed_id)"
    ],
    "primarykeys": [
      "articles(articles.id)",
      "blog_posts(blog_posts.id)",
      "blogs(blogs.id)",
      "categories(categories.id)",
      "comments(comments.id)",
      "conversations(conversations.id)",
      "events(events.id)",
      "attendants(attendants.id)",
      "feeds(feeds.id)",
      "likes(likes.id)",
      "messages(messages.id)",
      "notifications(notifications.id)",
      "pages(pages.id)",
      "posts(posts.id)",
      "taggings(taggings.id)",
      "tags(tags.id)",
      "users(users.id)",
      "users_videos(users_videos.id)",
      "videos(videos.id)"
    ],
    "foreignkeys": [
      "articles(articles.user_id) -> users(users.id)",
      "articles(articles.category_id) -> categories(categories.id)",
      "blog_posts(blog_posts.blog_id) -> blogs(blogs.id)",
      "blogs(blogs.user_id) -> users(users.id)",
      "comments(comments.commenter_id) -> users(users.id)",
      "events(events.user_id) -> users(users.id)",
      "attendants(attendants.user_id) -> users(users.id)",
      "attendants(attendants.event_id) -> events(events.id)",
      "feeds(feeds.user_id) -> users(users.id)",
      "likes(likes.liker_id) -> users(users.id)",
      "messages(messages.sender_id) -> users(users.id)",
      "messages(messages.recipient_id) -> users(users.id)",
      "messages(messages.conversation_id) -> conversations(conversations.id)",
      "notifications(notifications.user_id) -> users(users.id)",
      "notifications(notifications.sender_id) -> users(users.id)",
      "posts(posts.user_id) -> users(users.id)",
      "posts(posts.feed_id) -> feeds(feeds.id)",
      "taggings(taggings.tag_id) -> tags(tags.id)",
      "users_videos(users_videos.user_id) -> users(users.id)",
      "users_videos(users_videos.video_id) -> videos(videos.id)",
      "videos(videos.user_id) -> users(users.id)",
      "videos(videos.feed_id) -> feeds(feeds.id)"
    ],
    "transactions": [
      {
        "signature": "void createArticle(int id, String title, String content, int user_id, String public, String published, String created_at, String updated_at, String permalink, int category_id)",
        "body": [
          "ins(articles, (id, title, content, user_id, public, published, created_at, updated_at, permalink, category_id))"
        ]
      },
      {
        "signature": "void deleteArticle(int id)",
        "body": [
          "del(articles, articles.id=id)"
        ]
      },
      {
        "signature": "void updateArticle(int id, String title, String content, int user_id, String public, String published, String updated_at, String permalink, int category_id)",
        "body": [
          "upd(articles, articles.id=id, articles.title, title)",
          "upd(articles, articles.id=id, articles.content, content)",
          "upd(articles, articles.id=id, articles.user_id, user_id)",
          "upd(articles, articles.id=id, articles.public, public)",
          "upd(articles, articles.id=id, articles.published, published)",
          "upd(articles, articles.id=id, articles.updated_at, updated_at)",
          "upd(articles, articles.id=id, articles.permalink, permalink)",
          "upd(articles, articles.id=id, articles.category_id, category_id)"
        ]
      },
      {
        "signature": "void readArticle(int id)",
        "body": [
          "pi([articles.title, articles.content, articles.user_id, articles.public, articles.published, articles.permalink, articles.category_id], sigma(articles.id=id, articles))"
        ]
      },
      {
        "signature": "void readArticleCreateTime(int id)",
        "body": [
          "pi([articles.created_at], sigma(articles.id=id, articles))"
        ]
      },
      {
        "signature": "void readArticleUpdateTime(int id)",
        "body": [
          "pi([articles.updated_at], sigma(articles.id=id, articles))"
        ]
      },
      {
        "signature": "void createBlogPost(int id, int blog_id, String content, String created_at, String updated_at, String public)",
        "body": [
          "ins(blog_posts, (id, blog_id, content, created_at, updated_at, public))"
        ]
      },
      {
        "signature": "void deleteBlogPost(int id)",
        "body": [
          "del(blog_posts, blog_posts.id=id)"
        ]
      },
      {
        "signature": "void updateBlogPost(int id, int blog_id, String content, String updated_at, String public)",
        "body": [
          "upd(blog_posts, blog_posts.id=id, blog_posts.blog_id, blog_id)",
          "upd(blog_posts, blog_posts.id=id, blog_posts.content, content)",
          "upd(blog_posts, blog_posts.id=id, blog_posts.updated_at, updated_at)",
          "upd(blog_posts, blog_posts.id=id, blog_posts.public, public)"
        ]
      },
      {
        "signature": "void readBlogPost(int id)",
        "body": [
          "pi([blog_posts.blog_id, blog_posts.content, blog_posts.public], sigma(blog_posts.id=id, blog_posts))"
        ]
      },
      {
        "signature": "void readBlogPostCreateTime(int id)",
        "body": [
          "pi([blog_posts.created_at], sigma(blog_posts.id=id, blog_posts))"
        ]
      },
      {
        "signature": "void readBlogPostUpdateTime(int id)",
        "body": [
          "pi([blog_posts.updated_at], sigma(blog_posts.id=id, blog_posts))"
        ]
      },
      {
        "signature": "void createBlog(int id, String title, int user_id, String created_at, String updated_at)",
        "body": [
          "ins(blogs, (id, title, user_id, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteBlog(int id)",
        "body": [
          "del(blogs, blogs.id=id)"
        ]
      },
      {
        "signature": "void updateBlog(int id, String title, int user_id, String updated_at)",
        "body": [
          "upd(blogs, blogs.id=id, blogs.title, title)",
          "upd(blogs, blogs.id=id, blogs.user_id, user_id)",
          "upd(blogs, blogs.id=id, blogs.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readBlog(int id)",
        "body": [
          "pi([blogs.title, blogs.user_id], sigma(blogs.id=id, blogs))"
        ]
      },
      {
        "signature": "void readBlogCreateTime(int id)",
        "body": [
          "pi([blogs.created_at], sigma(blogs.id=id, blogs))"
        ]
      },
      {
        "signature": "void readBlogUpdateTime(int id)",
        "body": [
          "pi([blogs.updated_at], sigma(blogs.id=id, blogs))"
        ]
      },
      {
        "signature": "void createCategory(int id, String name, String created_at, String updated_at)",
        "body": [
          "ins(categories, (id, name, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteCategory(int id)",
        "body": [
          "del(categories, categories.id=id)"
        ]
      },
      {
        "signature": "void updateCategory(int id, String name, String updated_at)",
        "body": [
          "upd(categories, categories.id=id, categories.name, name)",
          "upd(categories, categories.id=id, categories.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readCategory(int id)",
        "body": [
          "pi([categories.name], sigma(categories.id=id, categories))"
        ]
      },
      {
        "signature": "void readCategoryCreateTime(int id)",
        "body": [
          "pi([categories.created_at], sigma(categories.id=id, categories))"
        ]
      },
      {
        "signature": "void readCategoryUpdateTime(int id)",
        "body": [
          "pi([categories.updated_at], sigma(categories.id=id, categories))"
        ]
      },
      {
        "signature": "void createComment(int id, int commenter_id, int commentable_id, String commentable_type, String content, String created_at, String updated_at, String public, String commenter_name)",
        "body": [
          "ins(comments, (id, commenter_id, commentable_id, commentable_type, content, created_at, updated_at, public, commenter_name))"
        ]
      },
      {
        "signature": "void deleteComment(int id)",
        "body": [
          "del(comments, comments.id=id)"
        ]
      },
      {
        "signature": "void updateComment(int id, int commenter_id, int commentable_id, String commentable_type, String content, String updated_at, String public, String commenter_name)",
        "body": [
          "upd(comments, comments.id=id, comments.commenter_id, commenter_id)",
          "upd(comments, comments.id=id, comments.commentable_id, commentable_id)",
          "upd(comments, comments.id=id, comments.commentable_type, commentable_type)",
          "upd(comments, comments.id=id, comments.content, content)",
          "upd(comments, comments.id=id, comments.updated_at, updated_at)",
          "upd(comments, comments.id=id, comments.public, public)",
          "upd(comments, comments.id=id, comments.commenter_name, commenter_name)"
        ]
      },
      {
        "signature": "void readComment(int id)",
        "body": [
          "pi([comments.commenter_id, comments.commentable_id, comments.commentable_type, comments.content, comments.public, comments.commenter_name], sigma(comments.id=id, comments))"
        ]
      },
      {
        "signature": "void readCommentCreateTime(int id)",
        "body": [
          "pi([comments.created_at], sigma(comments.id=id, comments))"
        ]
      },
      {
        "signature": "void readCommentUpdateTime(int id)",
        "body": [
          "pi([comments.updated_at], sigma(comments.id=id, comments))"
        ]
      },
      {
        "signature": "void createConversation(int id, String created_at, String updated_at)",
        "body": [
          "ins(conversations, (id, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteConversation(int id)",
        "body": [
          "del(conversations, conversations.id=id)"
        ]
      },
      {
        "signature": "void updateConversation(int id, String updated_at)",
        "body": [
          "upd(conversations, conversations.id=id, conversations.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readConversationCreateTime(int id)",
        "body": [
          "pi([conversations.created_at], sigma(conversations.id=id, conversations))"
        ]
      },
      {
        "signature": "void readConversationUpdateTime(int id)",
        "body": [
          "pi([conversations.updated_at], sigma(conversations.id=id, conversations))"
        ]
      },
      {
        "signature": "void createEvent(int id, String name, String city, String country, String state, String start_date, String end_date, int user_id, String created_at, String updated_at)",
        "body": [
          "ins(events, (id, name, city, country, state, start_date, end_date, user_id, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteEvent(int id)",
        "body": [
          "del(events, events.id=id)"
        ]
      },
      {
        "signature": "void updateEvent(int id, String name, String city, String country, String state, String start_date, String end_date, int user_id, String updated_at)",
        "body": [
          "upd(events, events.id=id, events.name, name)",
          "upd(events, events.id=id, events.city, city)",
          "upd(events, events.id=id, events.country, country)",
          "upd(events, events.id=id, events.state, state)",
          "upd(events, events.id=id, events.start_date, start_date)",
          "upd(events, events.id=id, events.end_date, end_date)",
          "upd(events, events.id=id, events.user_id, user_id)",
          "upd(events, events.id=id, events.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readEvent(int id)",
        "body": [
          "pi([events.name, events.city, events.country, events.state, events.start_date, events.end_date, events.user_id], sigma(events.id=id, events))"
        ]
      },
      {
        "signature": "void readEventCreateTime(int id)",
        "body": [
          "pi([events.created_at], sigma(events.id=id, events))"
        ]
      },
      {
        "signature": "void readEventUpdateTime(int id)",
        "body": [
          "pi([events.updated_at], sigma(events.id=id, events))"
        ]
      },
      {
        "signature": "void createEventUser(int id, int user_id, String role, int event_id, String created_at, String updated_at)",
        "body": [
          "ins(attendants, (id, user_id, role, event_id, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteEventUser(int id)",
        "body": [
          "del(attendants, attendants.id=id)"
        ]
      },
      {
        "signature": "void updateEventUser(int id, int user_id, int event_id)",
        "body": [
          "upd(attendants, attendants.id=id, attendants.user_id, user_id)",
          "upd(attendants, attendants.id=id, attendants.event_id, event_id)"
        ]
      },
      {
        "signature": "void readEventUser(int id)",
        "body": [
          "pi([attendants.user_id, attendants.role, attendants.event_id], sigma(attendants.id=id, attendants))"
        ]
      },
      {
        "signature": "void createFeed(int id, String name, String created_at, String updated_at, String store_name, String hidden, int user_id, String permalink, String description)",
        "body": [
          "ins(feeds, (id, name, created_at, updated_at, store_name, hidden, user_id, permalink, description))"
        ]
      },
      {
        "signature": "void deleteFeed(int id)",
        "body": [
          "del(feeds, feeds.id=id)"
        ]
      },
      {
        "signature": "void updateFeed(int id, String name, String updated_at, String store_name, String hidden, int user_id, String permalink, String description)",
        "body": [
          "upd(feeds, feeds.id=id, feeds.name, name)",
          "upd(feeds, feeds.id=id, feeds.updated_at, updated_at)",
          "upd(feeds, feeds.id=id, feeds.store_name, store_name)",
          "upd(feeds, feeds.id=id, feeds.hidden, hidden)",
          "upd(feeds, feeds.id=id, feeds.user_id, user_id)",
          "upd(feeds, feeds.id=id, feeds.permalink, permalink)",
          "upd(feeds, feeds.id=id, feeds.description, description)"
        ]
      },
      {
        "signature": "void readFeed(int id)",
        "body": [
          "pi([feeds.name, feeds.store_name, feeds.hidden, feeds.user_id, feeds.permalink, feeds.description], sigma(feeds.id=id, feeds))"
        ]
      },
      {
        "signature": "void readFeedCreateTime(int id)",
        "body": [
          "pi([feeds.created_at], sigma(feeds.id=id, feeds))"
        ]
      },
      {
        "signature": "void readFeedUpdateTime(int id)",
        "body": [
          "pi([feeds.updated_at], sigma(feeds.id=id, feeds))"
        ]
      },
      {
        "signature": "void createLike(int id, int liker_id, int liked_item_id, String liked_item_type, String created_at, String updated_at)",
        "body": [
          "ins(likes, (id, liker_id, liked_item_id, liked_item_type, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteLike(int id)",
        "body": [
          "del(likes, likes.id=id)"
        ]
      },
      {
        "signature": "void updateLike(int id, int liker_id, int liked_item_id, String liked_item_type, String updated_at)",
        "body": [
          "upd(likes, likes.id=id, likes.liker_id, liker_id)",
          "upd(likes, likes.id=id, likes.liked_item_id, liked_item_id)",
          "upd(likes, likes.id=id, likes.liked_item_type, liked_item_type)",
          "upd(likes, likes.id=id, likes.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readLike(int id)",
        "body": [
          "pi([likes.liker_id, likes.liked_item_id, likes.liked_item_type], sigma(likes.id=id, likes))"
        ]
      },
      {
        "signature": "void readLikeCreateTime(int id)",
        "body": [
          "pi([likes.created_at], sigma(likes.id=id, likes))"
        ]
      },
      {
        "signature": "void readLikeUpdateTime(int id)",
        "body": [
          "pi([likes.updated_at], sigma(likes.id=id, likes))"
        ]
      },
      {
        "signature": "void createMessage(int id, String content, int sender_id, int recipient_id, String read, int conversation_id, String created_at, String updated_at)",
        "body": [
          "ins(messages, (id, content, sender_id, recipient_id, read, conversation_id, created_at, updated_at))"
        ]
      },
      {
        "signature": "void deleteMessage(int id)",
        "body": [
          "del(messages, messages.id=id)"
        ]
      },
      {
        "signature": "void updateMessage(int id, String content, int sender_id, int recipient_id, String read, int conversation_id, String updated_at)",
        "body": [
          "upd(messages, messages.id=id, messages.content, content)",
          "upd(messages, messages.id=id, messages.sender_id, sender_id)",
          "upd(messages, messages.id=id, messages.recipient_id, recipient_id)",
          "upd(messages, messages.id=id, messages.read, read)",
          "upd(messages, messages.id=id, messages.conversation_id, conversation_id)",
          "upd(messages, messages.id=id, messages.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void readMessage(int id)",
        "body": [
          "pi([messages.content, messages.sender_id, messages.recipient_id, messages.read, messages.conversation_id], sigma(messages.id=id, messages))"
        ]
      },
      {
        "signature": "void readMessageCreateTime(int id)",
        "body": [
          "pi([messages.created_at], sigma(messages.id=id, messages))"
        ]
      },
      {
        "signature": "void readMessageUpdateTime(int id)",
        "body": [
          "pi([messages.updated_at], sigma(messages.id=id, messages))"
        ]
      },
      {
        "signature": "void createNotification(int id, int user_id, int sender_id, int item_id, String item_type, String created_at, String updated_at, String action_type, int action_id, String public, String read)",
        "body": [
          "ins(notifications, (id, user_id, sender_id, item_id, item_type, created_at, updated_at, action_type, action_id, public, read))"
        ]
      },
      {
        "signature": "void deleteNotification(int id)",
        "body": [
          "del(notifications, notifications.id=id)"
        ]
      },
      {
        "signature": "void updateNotification(int id, int user_id, int sender_id, int item_id, String item_type, String updated_at, String action_type, int action_id, String public, String read)",
        "body": [
          "upd(notifications, notifications.id=id, notifications.user_id, user_id)",
          "upd(notifications, notifications.id=id, notifications.sender_id, sender_id)",
          "upd(notifications, notifications.id=id, notifications.item_id, item_id)",
          "upd(notifications, notifications.id=id, notifications.item_type, item_type)",
          "upd(notifications, notifications.id=id, notifications.updated_at, updated_at)",
          "upd(notifications, notifications.id=id, notifications.action_type, action_type)",
          "upd(notifications, notifications.id=id, notifications.action_id, action_id)",
          "upd(notifications, notifications.id=id, notifications.public, public)",
          "upd(notifications, notifications.id=id, notifications.read, read)"
        ]
      },
      {
        "signature": "void readNotification(int id)",
        "body": [
          "pi([notifications.user_id, notifications.sender_id, notifications.item_id, notifications.item_type, notifications.action_type, notifications.action_id, notifications.public, notifications.read], sigma(notifications.id=id, notifications))"
        ]
      },
      {
        "signature": "void readNotificationCreateTime(int id)",
        "body": [
          "pi([notifications.created_at], sigma(notifications.id=id, notifications))"
        ]
      },
      {
        "signature": "void readNotificationUpdateTime(int id)",
        "body": [
          "pi([notifications.updated_at], sigma(notifications.id=id, notifications))"
        ]
      },
      {
        "signature": "void createPage(int id, String content, String created_at, String updated_at, String name)",
        "body": [
          "ins(pages, (id, content, created_at, updated_at, name))"
        ]
      },
      {
        "signature": "void deletePage(int id)",
        "body": [
          "del(pages, pages.id=id)"
        ]
      },
      {
        "signature": "void updatePage(int id, String content, String updated_at, String name)",
        "body": [
          "upd(pages, pages.id=id, pages.content, content)",
          "upd(pages, pages.id=id, pages.updated_at, updated_at)",
          "upd(pages, pages.id=id, pages.name, name)"
        ]
      },
      {
        "signature": "void readPage(int id)",
        "body": [
          "pi([pages.content, pages.name], sigma(pages.id=id, pages))"
        ]
      },
      {
        "signature": "void readPageCreateTime(int id)",
        "body": [
          "pi([pages.created_at], sigma(pages.id=id, pages))"
        ]
      },
      {
        "signature": "void readPageUpdateTime(int id)",
        "body": [
          "pi([pages.updated_at], sigma(pages.id=id, pages))"
        ]
      },
      {
        "signature": "void createPost(int id, String content, int user_id, String created_at, String updated_at, String public, String sticky, int feed_id)",
        "body": [
          "ins(posts, (id, content, user_id, created_at, updated_at, public, sticky, feed_id))"
        ]
      },
      {
        "signature": "void deletePost(int id)",
        "body": [
          "del(posts, posts.id=id)"
        ]
      },
      {
        "signature": "void updatePost(int id, String content, int user_id, String updated_at, String public, String sticky, int feed_id)",
        "body": [
          "upd(posts, posts.id=id, posts.content, content)",
          "upd(posts, posts.id=id, posts.user_id, user_id)",
          "upd(posts, posts.id=id, posts.updated_at, updated_at)",
          "upd(posts, posts.id=id, posts.public, public)",
          "upd(posts, posts.id=id, posts.sticky, sticky)",
          "upd(posts, posts.id=id, posts.feed_id, feed_id)"
        ]
      },
      {
        "signature": "void readPost(int id)",
        "body": [
          "pi([posts.content, posts.user_id, posts.public, posts.sticky, posts.feed_id], sigma(posts.id=id, posts))"
        ]
      },
      {
        "signature": "void readPostCreateTime(int id)",
        "body": [
          "pi([posts.created_at], sigma(posts.id=id, posts))"
        ]
      },
      {
        "signature": "void readPostUpdateTime(int id)",
        "body": [
          "pi([posts.updated_at], sigma(posts.id=id, posts))"
        ]
      },
      {
        "signature": "void createTagging(int id, int tag_id, int taggable_id, String taggable_type, int tagger_id, String tagger_type, String context, String created_at)",
        "body": [
          "ins(taggings, (id, tag_id, taggable_id, taggable_type, tagger_id, tagger_type, context, created_at))"
        ]
      },
      {
        "signature": "void deleteTagging(int id)",
        "body": [
          "del(taggings, taggings.id=id)"
        ]
      },
      {
        "signature": "void updateTagging(int id, int tag_id, int taggable_id, String taggable_type, int tagger_id, String tagger_type, String context)",
        "body": [
          "upd(taggings, taggings.id=id, taggings.tag_id, tag_id)",
          "upd(taggings, taggings.id=id, taggings.taggable_id, taggable_id)",
          "upd(taggings, taggings.id=id, taggings.taggable_type, taggable_type)",
          "upd(taggings, taggings.id=id, taggings.tagger_id, tagger_id)",
          "upd(taggings, taggings.id=id, taggings.tagger_type, tagger_type)",
          "upd(taggings, taggings.id=id, taggings.context, context)"
        ]
      },
      {
        "signature": "void readTagging(int id)",
        "body": [
          "pi([taggings.tag_id, taggings.taggable_id, taggings.taggable_type, taggings.tagger_id, taggings.tagger_type, taggings.context], sigma(taggings.id=id, taggings))"
        ]
      },
      {
        "signature": "void readTaggingCreateTime(int id)",
        "body": [
          "pi([taggings.created_at], sigma(taggings.id=id, taggings))"
        ]
      },
      {
        "signature": "void createTag(int id, String name)",
        "body": [
          "ins(tags, (id, name))"
        ]
      },
      {
        "signature": "void deleteTag(int id)",
        "body": [
          "del(tags, tags.id=id)"
        ]
      },
      {
        "signature": "void updateTag(int id, String name)",
        "body": [
          "upd(tags, tags.id=id, tags.name, name)"
        ]
      },
      {
        "signature": "void readTag(int id)",
        "body": [
          "pi([tags.name], sigma(tags.id=id, tags))"
        ]
      },
      {
        "signature": "void createUser(int id, String name, String email, String remember_token, String password_digest, String admin, String created_at, String updated_at, String gravatar_suffix, String nickname, String reset_code, String country, String city, String modified_user, String author, String birthday, String started_playing, String bap, String bap_name, String bap_induction, String motto, String hobbies, int privacy_settings, String latitude, String longitude, String last_visit, String about_title, String about_content)",
        "body": [
          "ins(users, (id, name, email, remember_token, password_digest, admin, created_at, updated_at, gravatar_suffix, nickname, reset_code, country, city, modified_user, author, birthday, started_playing, bap, bap_name, bap_induction, motto, hobbies, privacy_settings, latitude, longitude, last_visit, about_title, about_content))"
        ]
      },
      {
        "signature": "void deleteUser(int id)",
        "body": [
          "del(users, users.id=id)"
        ]
      },
      {
        "signature": "void updateUserProfile(int id, String name, String email, String nickname, String birthday, String country, String city, String motto, String hobbies, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.name, name)",
          "upd(users, users.id=id, users.email, email)",
          "upd(users, users.id=id, users.nickname, nickname)",
          "upd(users, users.id=id, users.birthday, birthday)",
          "upd(users, users.id=id, users.country, country)",
          "upd(users, users.id=id, users.city, city)",
          "upd(users, users.id=id, users.motto, motto)",
          "upd(users, users.id=id, users.hobbies, hobbies)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserAdmin(int id, String admin, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.admin, admin)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserPassword(int id, String remember_token, String password_digest, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.remember_token, remember_token)",
          "upd(users, users.id=id, users.password_digest, password_digest)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserGravatar(int id, String gravatar_suffix, String reset_code, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.gravatar_suffix, gravatar_suffix)",
          "upd(users, users.id=id, users.reset_code, reset_code)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserBap(int id, String bap, String bap_name, String bap_induction, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.bap, bap)",
          "upd(users, users.id=id, users.bap_name, bap_name)",
          "upd(users, users.id=id, users.bap_induction, bap_induction)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserPrivateSettings(int id, String privacy_settings, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.privacy_settings, privacy_settings)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserVisitInfo(int id, String latitude, String longitude, String last_visit, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.latitude, latitude)",
          "upd(users, users.id=id, users.longitude, longitude)",
          "upd(users, users.id=id, users.last_visit, last_visit)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void updateUserAbout(int id, String about_title, String about_content, String updated_at)",
        "body": [
          "upd(users, users.id=id, users.about_title, about_title)",
          "upd(users, users.id=id, users.about_content, about_content)",
          "upd(users, users.id=id, users.updated_at, updated_at)"
        ]
      },
      {
        "signature": "void findUserByEmail(String email)",
        "body": [
          "pi([users.id], sigma(users.email=email, users))"
        ]
      },
      {
        "signature": "void readUser(int id)",
        "body": [
          "pi([users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(users.id=id, users))"
        ]
      },
      {
        "signature": "void readUserCreateTime(int id)",
        "body": [
          "pi([users.created_at], sigma(users.id=id, users))"
        ]
      },
      {
        "signature": "void readUserUpdateTime(int id)",
        "body": [
          "pi([users.updated_at], sigma(users.id=id, users))"
        ]
      },
      {
        "signature": "void createUserVideo(int id, int user_id, int video_id)",
        "body": [
          "ins(users_videos, (id, user_id, video_id))"
        ]
      },
      {
        "signature": "void deleteUserVideo(int id)",
        "body": [
          "del(users_videos, users_videos.id=id)"
        ]
      },
      {
        "signature": "void updateUserVideo(int id, int user_id, int video_id)",
        "body": [
          "upd(users_videos, users_videos.id=id, users_videos.user_id, user_id)",
          "upd(users_videos, users_videos.id=id, users_videos.video_id, video_id)"
        ]
      },
      {
        "signature": "void readUserVideo(int id)",
        "body": [
          "pi([users_videos.user_id, users_videos.video_id], sigma(users_videos.id=id, users_videos))"
        ]
      },
      {
        "signature": "void createVideo(int id, int user_id, String title, String vendor, String created_at, String updated_at, String uid, String url, String public, String location, String maker, String players, String for_feedback, int feed_id)",
        "body": [
          "ins(videos, (id, user_id, title, vendor, created_at, updated_at, uid, url, public, location, maker, players, for_feedback, feed_id))"
        ]
      },
      {
        "signature": "void deleteVideo(int id)",
        "body": [
          "del(videos, videos.id=id)"
        ]
      },
      {
        "signature": "void updateVideo(int id, int user_id, String title, String vendor, String updated_at, String uid, String url, String public, String location, String maker, String players, String for_feedback, int feed_id)",
        "body": [
          "upd(videos, videos.id=id, videos.user_id, user_id)",
          "upd(videos, videos.id=id, videos.title, title)",
          "upd(videos, videos.id=id, videos.vendor, vendor)",
          "upd(videos, videos.id=id, videos.updated_at, updated_at)",
          "upd(videos, videos.id=id, videos.uid, uid)",
          "upd(videos, videos.id=id, videos.url, url)",
          "upd(videos, videos.id=id, videos.public, public)",
          "upd(videos, videos.id=id, videos.location, location)",
          "upd(videos, videos.id=id, videos.maker, maker)",
          "upd(videos, videos.id=id, videos.players, players)",
          "upd(videos, videos.id=id, videos.for_feedback, for_feedback)",
          "upd(videos, videos.id=id, videos.feed_id, feed_id)"
        ]
      },
      {
        "signature": "void readVideo(int id)",
        "body": [
          "pi([videos.user_id, videos.title, videos.vendor, videos.uid, videos.url, videos.public, videos.location, videos.maker, videos.players, videos.for_feedback, videos.feed_id], sigma(videos.id=id, videos))"
        ]
      },
      {
        "signature": "void readVideoCreateTime(int id)",
        "body": [
          "pi([videos.created_at], sigma(videos.id=id, videos))"
        ]
      },
      {
        "signature": "void readVideoUpdateTime(int id)",
        "body": [
          "pi([videos.updated_at], sigma(videos.id=id, videos))"
        ]
      },
      {
        "signature": "void readArticleUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(articles.id=id, join(articles, users)))"
        ]
      },
      {
        "signature": "void readUserArticle(int id)",
        "body": [
          "pi([articles.id, articles.title, articles.content, articles.user_id, articles.public, articles.published, articles.permalink, articles.category_id], sigma(users.id=id, join(articles, users)))"
        ]
      },
      {
        "signature": "void readArticleCategory(int id)",
        "body": [
          "pi([categories.id, categories.name], sigma(articles.id=id, join(articles, categories)))"
        ]
      },
      {
        "signature": "void readCategoryArticle(int id)",
        "body": [
          "pi([articles.id, articles.title, articles.content, articles.user_id, articles.public, articles.published, articles.permalink, articles.category_id], sigma(categories.id=id, join(articles, categories)))"
        ]
      },
      {
        "signature": "void readBlogPostBlog(int id)",
        "body": [
          "pi([blogs.id, blogs.title, blogs.user_id], sigma(blog_posts.id=id, join(blog_posts, blogs)))"
        ]
      },
      {
        "signature": "void readBlogBlogPost(int id)",
        "body": [
          "pi([blog_posts.id, blog_posts.blog_id, blog_posts.content, blog_posts.public], sigma(blogs.id=id, join(blog_posts, blogs)))"
        ]
      },
      {
        "signature": "void readBlogUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(blogs.id=id, join(blogs, users)))"
        ]
      },
      {
        "signature": "void readUserBlog(int id)",
        "body": [
          "pi([blogs.id, blogs.title, blogs.user_id], sigma(users.id=id, join(blogs, users)))"
        ]
      },
      {
        "signature": "void readCommentUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(comments.id=id, join(comments, users)))"
        ]
      },
      {
        "signature": "void readUserComment(int id)",
        "body": [
          "pi([comments.id, comments.commenter_id, comments.commentable_id, comments.commentable_type, comments.content, comments.public, comments.commenter_name], sigma(users.id=id, join(comments, users)))"
        ]
      },
      {
        "signature": "void getEventUser(int id)",
        "body": [
          "pi([users.name, users.email, users.nickname, users.country, users.city, users.birthday, attendants.role], sigma(events.id=id, join(join(attendants, events), users)))"
        ]
      },
      {
        "signature": "void getUserEvent(int id)",
        "body": [
          "pi([events.name, events.city, events.country, events.state, events.start_date, events.end_date], sigma(users.id=id, join(join(attendants, users), events)))"
        ]
      },
      {
        "signature": "void readFeedUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(feeds.id=id, join(feeds, users)))"
        ]
      },
      {
        "signature": "void readUserFeed(int id)",
        "body": [
          "pi([feeds.id, feeds.name, feeds.store_name, feeds.hidden, feeds.user_id, feeds.permalink, feeds.description], sigma(users.id=id, join(feeds, users)))"
        ]
      },
      {
        "signature": "void readLikeUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(likes.id=id, join(likes, users)))"
        ]
      },
      {
        "signature": "void readUserLike(int id)",
        "body": [
          "pi([likes.id, likes.liker_id, likes.liked_item_id, likes.liked_item_type], sigma(users.id=id, join(likes, users)))"
        ]
      },
      {
        "signature": "void readMessageUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(messages.id=id, join(messages, users)))"
        ]
      },
      {
        "signature": "void readUserMessage(int id)",
        "body": [
          "pi([messages.id, messages.content, messages.sender_id, messages.recipient_id, messages.read, messages.conversation_id], sigma(users.id=id, join(messages, users)))"
        ]
      },
      {
        "signature": "void readMessageUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(messages.id=id, join(messages, users)))"
        ]
      },
      {
        "signature": "void readUserMessage(int id)",
        "body": [
          "pi([messages.id, messages.content, messages.sender_id, messages.recipient_id, messages.read, messages.conversation_id], sigma(users.id=id, join(messages, users)))"
        ]
      },
      {
        "signature": "void readMessageConversation(int id)",
        "body": [
          "pi([conversations.id], sigma(messages.id=id, join(messages, conversations)))"
        ]
      },
      {
        "signature": "void readConversationMessage(int id)",
        "body": [
          "pi([messages.id, messages.content, messages.sender_id, messages.recipient_id, messages.read, messages.conversation_id], sigma(conversations.id=id, join(messages, conversations)))"
        ]
      },
      {
        "signature": "void readNotificationUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(notifications.id=id, join(notifications, users)))"
        ]
      },
      {
        "signature": "void readUserNotification(int id)",
        "body": [
          "pi([notifications.id, notifications.user_id, notifications.sender_id, notifications.item_id, notifications.item_type, notifications.action_type, notifications.action_id, notifications.public, notifications.read], sigma(users.id=id, join(notifications, users)))"
        ]
      },
      {
        "signature": "void readNotificationUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(notifications.id=id, join(notifications, users)))"
        ]
      },
      {
        "signature": "void readUserNotification(int id)",
        "body": [
          "pi([notifications.id, notifications.user_id, notifications.sender_id, notifications.item_id, notifications.item_type, notifications.action_type, notifications.action_id, notifications.public, notifications.read], sigma(users.id=id, join(notifications, users)))"
        ]
      },
      {
        "signature": "void readPostUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(posts.id=id, join(posts, users)))"
        ]
      },
      {
        "signature": "void readUserPost(int id)",
        "body": [
          "pi([posts.id, posts.content, posts.user_id, posts.public, posts.sticky, posts.feed_id], sigma(users.id=id, join(posts, users)))"
        ]
      },
      {
        "signature": "void readPostFeed(int id)",
        "body": [
          "pi([feeds.id, feeds.name, feeds.store_name, feeds.hidden, feeds.user_id, feeds.permalink, feeds.description], sigma(posts.id=id, join(posts, feeds)))"
        ]
      },
      {
        "signature": "void readFeedPost(int id)",
        "body": [
          "pi([posts.id, posts.content, posts.user_id, posts.public, posts.sticky, posts.feed_id], sigma(feeds.id=id, join(posts, feeds)))"
        ]
      },
      {
        "signature": "void readTaggingTag(int id)",
        "body": [
          "pi([tags.id, tags.name], sigma(taggings.id=id, join(taggings, tags)))"
        ]
      },
      {
        "signature": "void readTagTagging(int id)",
        "body": [
          "pi([taggings.id, taggings.tag_id, taggings.taggable_id, taggings.taggable_type, taggings.tagger_id, taggings.tagger_type, taggings.context], sigma(tags.id=id, join(taggings, tags)))"
        ]
      },
      {
        "signature": "void readUserVideoUser(int id)",
        "body": [
          "pi([users.id, users.name, users.email, users.remember_token, users.password_digest, users.admin, users.gravatar_suffix, users.nickname, users.reset_code, users.country, users.city, users.modified_user, users.author, users.birthday, users.started_playing, users.bap, users.bap_name, users.bap_induction, users.motto, users.hobbies, users.privacy_settings, users.latitude, users.longitude, users.last_visit, users.about_title, users.about_content], sigma(users_videos.id=id, join(users_videos, users)))"
        ]
      },
      {
        "signature": "void readVideoUser(int id)",
        "body": [
          "pi([users.name, users.email, users.nickname, users.country, users.city, users.birthday], sigma(videos.id=id, join(join(users_videos, videos), users)))"
        ]
      },
      {
        "signature": "void readUserVideo(int id)",
        "body": [
          "pi([videos.title, videos.vendor, videos.uid, videos.url, videos.location, videos.maker, videos.players], sigma(users.id=id, join(join(users_videos, videos), users)))"
        ]
      },
      {
        "signature": "void readVideoFeed(int id)",
        "body": [
          "pi([feeds.id, feeds.name, feeds.store_name, feeds.hidden, feeds.user_id, feeds.permalink, feeds.description], sigma(videos.id=id, join(videos, feeds)))"
        ]
      },
      {
        "signature": "void readFeedVideo(int id)",
        "body": [
          "pi([videos.id, videos.user_id, videos.title, videos.vendor, videos.uid, videos.url, videos.public, videos.location, videos.maker, videos.players, videos.for_feedback, videos.feed_id], sigma(feeds.id=id, join(videos, feeds)))"
        ]
      }
    ]
  }
}